var documenterSearchIndex = {"docs":
[{"location":"examples/parameterize/#Parameterize-a-FMU","page":"Parameterize","title":"Parameterize a FMU","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Tutorial by Tobias Thummerer, Johannes Stoljar","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Last update: 09.08.2023","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"🚧 This tutorial is under revision and will be replaced by an up-to-date version soon 🚧","category":"page"},{"location":"examples/parameterize/#License","page":"Parameterize","title":"License","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/parameterize/#Introduction","page":"Parameterize","title":"Introduction","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"This example shows how to parameterize a FMU. We will show to possible ways to parameterize: The default option using the parameterization feature of fmiSimulate, fmiSimulateME or fmiSimulateCS. Second, a custom parameterization routine for advanced users. ","category":"page"},{"location":"examples/parameterize/#Other-formats","page":"Parameterize","title":"Other formats","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/parameterize/#Code-section","page":"Parameterize","title":"Code section","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"# imports\nusing FMI\nusing FMIZoo","category":"page"},{"location":"examples/parameterize/#Simulation-setup","page":"Parameterize","title":"Simulation setup","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Next, the start time and end time of the simulation are set.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"tStart = 0.0\ntStop = 1.0\ntSave = collect(tStart:tStop)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"2-element Vector{Float64}:\n 0.0\n 1.0","category":"page"},{"location":"examples/parameterize/#Import-FMU","page":"Parameterize","title":"Import FMU","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"In the next lines of code the FMU model from FMIZoo.jl is loaded and the information about the FMU is shown.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"# we use an FMU from the FMIZoo.jl\n# just replace this line with a local path if you want to use your own FMU\npathToFMU = get_model_filename(\"IO\", \"Dymola\", \"2022x\")\n\nfmu = fmiLoad(pathToFMU)\nfmiInfo(fmu)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"#################### Begin information for FMU ####################\n\tModel name:\t\t\tIO\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{889089a6-481b-41a6-a282-f6ce02a33aa6}\n\tGeneration tool:\t\tDymola Version 2022x (64-bit), 2021-10-08\n\tGeneration time:\t\t2022-05-19T06:53:52Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t4\n\tInputs:\t\t\t\t3\n\t\t352321536 [\"u_real\"]\n\t\t352321537 [\"u_boolean\"]\n\t\t352321538 [\"u_integer\"]\n\tOutputs:\t\t\t3\n\t\t335544320 [\"y_real\"]\n\t\t335544321 [\"y_boolean\"]\n\t\t335544322 [\"y_integer\"]\n\tStates:\t\t\t\t0\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tIO\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tIO\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################","category":"page"},{"location":"examples/parameterize/#Option-A:-Integrated-parameterization-feature-of-*FMI.jl*","page":"Parameterize","title":"Option A: Integrated parameterization feature of FMI.jl","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"If you are using the commands for simulation integrated in FMI.jl, the parameters and initial conditions are set at the correct locations during the initialization process of your FMU. This is the recommended way of parameterizing your model, if you don't have very uncommon requirements regarding initialization.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"dict = Dict{String, Any}()\ndict","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Dict{String, Any}()","category":"page"},{"location":"examples/parameterize/#Option-B:-Custom-parameterization-routine","page":"Parameterize","title":"Option B: Custom parameterization routine","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"If you have special requirements for initialization and parameterization, you can write your very own parameterization routine.","category":"page"},{"location":"examples/parameterize/#Instantiate-and-Setup-FMU","page":"Parameterize","title":"Instantiate and Setup FMU","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Next it is necessary to create an instance of the FMU. This is achieved by the command fmiInstantiate!().","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiInstantiate!(fmu; loggingOn=true)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"FMU:            IO\nInstanceName:   IO\nAddress:        Ptr{Nothing} @0x0000029caed89b40\nState:          0\nLogging:        1\nFMU time:       -Inf\nFMU states:     nothing","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"In the following code block, start and end time for the simulation is set by the fmiSetupExperiment() command.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiSetupExperiment(fmu, tStart, tStop)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/#Parameterize-FMU","page":"Parameterize","title":"Parameterize FMU","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"In this example, for each data type (real, boolean, integer and string) a corresponding input or parameter is selected. From here on, the inputs and parameters will be referred to as parameters for simplicity.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"params = [\"p_real\", \"p_boolean\", \"p_integer\", \"p_string\"]","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"4-element Vector{String}:\n \"p_real\"\n \"p_boolean\"\n \"p_integer\"\n \"p_string\"","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"At the beginning we want to display the initial state of these parameters, for which the FMU must be in initialization mode. The next function fmiEnterInitializationMode() informs the FMU to enter the initialization mode. Before calling this function, the variables can be set. Furthermore, fmiSetupExperiment() must be called at least once before calling fmiEnterInitializationMode(), in order that the start time is defined.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiEnterInitializationMode(fmu)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"The initial state of these parameters are displayed with the function fmiGet().","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiGet(fmu, params)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"4-element Vector{Any}:\n 0.0\n 0\n 0\n  \"Hello World!\"","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"The initialization mode is terminated with the function fmiExitInitializationMode(). (For the model exchange FMU type, this function switches off all initialization equations, and enters the event mode implicitly.)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiExitInitializationMode(fmu)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"In the next step, a function is defined that generates a random value for each parameter. For the parameter p_string a random number is inserted into the string. All parameters are combined to a tuple and output.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"function generateRandomNumbers()\n    rndReal = 100 * rand()\n    rndBoolean = rand() > 0.5\n    rndInteger = round(Integer, 100 * rand())\n    rndString = \"Random number $(100 * rand())!\"\n\n    return rndReal, rndBoolean, rndInteger, rndString\nend","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"generateRandomNumbers (generic function with 1 method)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"The previously defined function is called and the results are displayed in the console.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"paramsVal = generateRandomNumbers()","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"(63.72822520935553, true, 96, \"Random number 87.24586541350638!\")","category":"page"},{"location":"examples/parameterize/#First-variant","page":"Parameterize","title":"First variant","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"To show the first variant, it is necessary to terminate and reset the FMU instance. Then, as before, the setup command must be called for the FMU. ","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiTerminate(fmu)\nfmiReset(fmu)\nfmiSetupExperiment(fmu, tStart, tStop)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"In the next step it is possible to set the parameters for the FMU. With the first variant it is quickly possible to set all parameters at once. Even different data types can be set with only one command. The command fmiSet() selects itself which function is chosen for which data type.  As long as the output of the function gives the status code 0, setting the parameters has worked.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiSet(fmu, params, collect(paramsVal))","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"4-element Vector{UInt32}:\n 0x00000000\n 0x00000000\n 0x00000000\n 0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"After setting the parameters, it can be checked whether the corresponding parameters were set correctly. For this the function fmiGet() can be used as above. To be able to call the function fmiGet() the FMU must be in initialization mode.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiEnterInitializationMode(fmu)\n# fmiGet(fmu, params)\nfmiExitInitializationMode(fmu)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Now the FMU has been initialized correctly, the FMU can be simulated. The fmiSimulate() command is used for this purpose. It must be pointed out that the keywords instantiate=false, setup=false must be set. The keyword instantiate=false prevents the simulation command from creating a new FMU instance, otherwise our parameterization will be lost. The keyword setup=false prevents the FMU from calling the initialization mode again. The additionally listed keyword freeInstance=false prevents that the instance is removed after the simulation. This is only needed in this example, because we want to continue working on the created instance. Another keyword is the recordValues=parmas[1:3], which saves: p_real, p_boolean and p_integer as output. It should be noted that the fmiSimulate() function is not capable of outputting string values, so p_string is omitted.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"simData = fmiSimulate(fmu, (tStart, tStop); recordValues=params[1:3], saveat=tSave, \n                        instantiate=false, setup=false, freeInstance=false, terminate=false, reset=false)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Model name:\n\tIO\nSuccess:\n\ttrue\nf(x)-Evaluations:\n\tIn-place: 0\n\tOut-of-place: 0\nJacobian-Evaluations:\n\t∂ẋ_∂x: 0\n\t∂ẋ_∂u: 0\n\t∂y_∂x: 0\n\t∂y_∂u: 0\n\t∂e_∂x: 0\n\t∂e_∂u: 0\nGradient-Evaluations:\n\t∂ẋ_∂t: 0\n\t∂y_∂t: 0\n\t∂e_∂t: 0\nCallback-Evaluations:\n\tCondition (event-indicators): 0\n\tTime-Choice (event-instances): 0\n\tAffect (event-handling): 0\n\tSave values: 0\n\tSteps completed: 0\nValues [2]:\n\t0.0\t(63.72822520935553, 1.0, 96.0)\n\t1.0\t(63.72822520935553, 1.0, 96.0)\nEvents [0]:","category":"page"},{"location":"examples/parameterize/#Second-variant","page":"Parameterize","title":"Second variant","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"To show the second variant, it is necessary to terminate and reset the FMU instance. Then, as before, the setup command must be called for the FMU. ","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiTerminate(fmu)\nfmiReset(fmu)\nfmiSetupExperiment(fmu, tStart, tStop)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"To make sure that the functions work it is necessary to generate random numbers again. As shown already, we call the defined function generateRandomNumbers() and output the values.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"rndReal, rndBoolean, rndInteger, rndString = generateRandomNumbers()","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"(65.71070569568393, false, 88, \"Random number 76.02969973966232!\")","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"In the second variant, the value for each data type is set separately by the corresponding command. By this variant one has the maximum control and can be sure that also the correct data type is set. ","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiSetReal(fmu, \"p_real\", rndReal)\nfmiSetBoolean(fmu, \"p_boolean\", rndBoolean)\nfmiSetInteger(fmu, \"p_integer\", rndInteger)\nfmiSetString(fmu, \"p_string\", rndString)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"To illustrate the functionality of the parameterization with the separate functions, the corresponding get function can be also called separately for each data type:","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiSetReal() &#8660; fmiGetReal()\nfmiSetBoolean() &#8660; fmiGetBoolean()\nfmiSetInteger() &#8660; fmiGetInteger()\nfmiSetString() &#8660; fmiGetString().","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"As before, the FMU must be in initialization mode.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiEnterInitializationMode(fmu)\n# fmiGetReal(fmu, \"u_real\")\n# fmiGetBoolean(fmu, \"u_boolean\")\n# fmiGetInteger(fmu, \"u_integer\")\n# fmiGetString(fmu, \"p_string\")\nfmiExitInitializationMode(fmu)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"0x00000000","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"From here on, you may want to simulate the FMU. Please note, that with the default executionConfig, it is necessary to prevent a new instantiation using the keyword instantiate=false. Otherwise, a new instance is allocated for the simulation-call and the parameters set for the previous instance are not transfered.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"simData = fmiSimulate(fmu, (tStart, tStop); recordValues=params[1:3], saveat=tSave, \n                        instantiate=false, setup=false)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Model name:\n\tIO\nSuccess:\n\ttrue\nf(x)-Evaluations:\n\tIn-place: 0\n\tOut-of-place: 0\nJacobian-Evaluations:\n\t∂ẋ_∂x: 0\n\t∂ẋ_∂u: 0\n\t∂y_∂x: 0\n\t∂y_∂u: 0\n\t∂e_∂x: 0\n\t∂e_∂u: 0\nGradient-Evaluations:\n\t∂ẋ_∂t: 0\n\t∂y_∂t: 0\n\t∂e_∂t: 0\nCallback-Evaluations:\n\tCondition (event-indicators): 0\n\tTime-Choice (event-instances): 0\n\tAffect (event-handling): 0\n\tSave values: 0\n\tSteps completed: 0\nValues [2]:\n\t0.0\t(65.71070569568393, 0.0, 88.0)\n\t1.0\t(65.71070569568393, 0.0, 88.0)\nEvents [0]:","category":"page"},{"location":"examples/parameterize/#Unload-FMU","page":"Parameterize","title":"Unload FMU","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"The FMU will be unloaded and all unpacked data on disc will be removed.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiUnload(fmu)","category":"page"},{"location":"examples/parameterize/#Summary","page":"Parameterize","title":"Summary","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Based on this tutorial it can be seen that there are two different variants to set and get parameters.These examples should make it clear to the user how parameters can also be set with different data types. As a small reminder, the sequence of commands for the manual parameterization of an FMU is summarized again. ","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiLoad() &#8594; fmiInstantiate!() &#8594; fmiSetupExperiment() &#8594; fmiSetXXX() &#8594; fmiEnterInitializationMode() &#8594; fmiGetXXX() &#8594; fmiExitInitializationMode() &#8594; fmiSimualte() &#8594; fmiUnload()","category":"page"},{"location":"examples/multiprocessing/#Multiprocessing","page":"Multiprocessing","title":"Multiprocessing","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Tutorial by Jonas Wilfert, Tobias Thummerer","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"🚧 This tutorial is under revision and will be replaced by an up-to-date version soon 🚧","category":"page"},{"location":"examples/multiprocessing/#License","page":"Multiprocessing","title":"License","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar, Jonas Wilfert\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/multiprocessing/#Motivation","page":"Multiprocessing","title":"Motivation","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"This Julia Package FMI.jl is motivated by the use of simulation models in Julia. Here the FMI specification is implemented. FMI (Functional Mock-up Interface) is a free standard (fmi-standard.org) that defines a container and an interface to exchange dynamic models using a combination of XML files, binaries and C code zipped into a single file. The user can thus use simulation models in the form of an FMU (Functional Mock-up Units). Besides loading the FMU, the user can also set values for parameters and states and simulate the FMU both as co-simulation and model exchange simulation.","category":"page"},{"location":"examples/multiprocessing/#Introduction-to-the-example","page":"Multiprocessing","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"This example shows how to parallelize the computation of an FMU in FMI.jl. We can compute a batch of FMU-evaluations in parallel with different initial settings. Parallelization can be achieved using multithreading or using multiprocessing. This example shows multiprocessing, check multithreading.ipynb for multithreading. Advantage of multithreading is a lower communication overhead as well as lower RAM usage. However in some cases multiprocessing can be faster as the garbage collector is not shared.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"The model used is a one-dimensional spring pendulum with friction. The object-orientated structure of the SpringFrictionPendulum1D can be seen in the following graphic.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"(Image: svg)  ","category":"page"},{"location":"examples/multiprocessing/#Target-group","page":"Multiprocessing","title":"Target group","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"The example is primarily intended for users who work in the field of simulations. The example wants to show how simple it is to use FMUs in Julia.","category":"page"},{"location":"examples/multiprocessing/#Other-formats","page":"Multiprocessing","title":"Other formats","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/multiprocessing/#Getting-started","page":"Multiprocessing","title":"Getting started","text":"","category":"section"},{"location":"examples/multiprocessing/#Installation-prerequisites","page":"Multiprocessing","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":" Description Command Alternative\n1. Enter Package Manager via ] \n2. Install FMI via add FMI add \" https://github.com/ThummeTo/FMI.jl \"\n3. Install FMIZoo via add FMIZoo add \" https://github.com/ThummeTo/FMIZoo.jl \"\n4. Install FMICore via add FMICore add \" https://github.com/ThummeTo/FMICore.jl \"\n5. Install BenchmarkTools via add BenchmarkTools ","category":"page"},{"location":"examples/multiprocessing/#Code-section","page":"Multiprocessing","title":"Code section","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Adding your desired amount of processes:","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"using Distributed\nn_procs = 2\naddprocs(n_procs; exeflags=`--project=$(Base.active_project()) --threads=auto`, restrict=false)","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"2-element Vector{Int64}:\n 2\n 3","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"# imports\n@everywhere using FMI\n@everywhere using FMIZoo\n@everywhere using BenchmarkTools","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Checking that we workers have been correctly initialized:","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"workers()\n\n@everywhere println(\"Hello World!\")\n\n# The following lines can be uncommented for more advanced informations about the subprocesses\n# @everywhere println(pwd())\n# @everywhere println(Base.active_project())\n# @everywhere println(gethostname())\n# @everywhere println(VERSION)\n# @everywhere println(Threads.nthreads())","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Hello World!\n      From worker 2:\tHello World!\n      From worker 3:\tHello World!","category":"page"},{"location":"examples/multiprocessing/#Simulation-setup","page":"Multiprocessing","title":"Simulation setup","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Next, the batch size and input values are defined.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"\n# Best if batchSize is a multiple of the threads/cores\nbatchSize = 16\n\n# Define an array of arrays randomly\ninput_values = collect(collect.(eachrow(rand(batchSize,2))))","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"16-element Vector{Vector{Float64}}:\n [0.10329731829789413, 0.14507549035517997]\n [0.2946801662852577, 0.5174070346036481]\n [0.14498851117241385, 0.3628581730565762]\n [0.8885759068495861, 0.7760682102425753]\n [0.1249102600348212, 0.5047740945225007]\n [0.9571092393147107, 0.3887948587938217]\n [0.9702622672162896, 0.22049972056829803]\n [0.9190640992877644, 0.3525927479371711]\n [0.4398480595857821, 0.028496288894813926]\n [0.7166131192971872, 0.6035184223535103]\n [0.0751849388784599, 0.5529167357600513]\n [0.5251284063817906, 0.39258284053243975]\n [0.8753069298907877, 0.9320702640090234]\n [0.9907857814941148, 0.8227011934635551]\n [0.5429177690088581, 0.43219693490297084]\n [0.8907448304376181, 0.876539761382042]","category":"page"},{"location":"examples/multiprocessing/#Shared-Module","page":"Multiprocessing","title":"Shared Module","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"For Distributed we need to embed the FMU into its own module. This prevents Distributed from trying to serialize and send the FMU over the network, as this can cause issues. This module needs to be made available on all processes using @everywhere.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"@everywhere module SharedModule\n    using FMIZoo\n    using FMI\n\n    t_start = 0.0\n    t_step = 0.1\n    t_stop = 10.0\n    tspan = (t_start, t_stop)\n    tData = collect(t_start:t_step:t_stop)\n\n    model_fmu = FMIZoo.fmiLoad(\"SpringPendulum1D\", \"Dymola\", \"2022x\")\nend","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"We define a helper function to calculate the FMU and combine it into an Matrix.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"@everywhere function runCalcFormatted(fmu, x0, recordValues=[\"mass.s\", \"mass.v\"])\n    data = fmiSimulateME(fmu, SharedModule.tspan; recordValues=recordValues, saveat=SharedModule.tData, x0=x0, showProgress=false, dtmax=1e-4)\n    return reduce(hcat, data.states.u)\nend","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Running a single evaluation is pretty quick, therefore the speed can be better tested with BenchmarkTools.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"@benchmark data = runCalcFormatted(SharedModule.model_fmu, rand(2))","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"BenchmarkTools.Trial: 3 samples with 1 evaluation.\n Range \u001b[90m(\u001b[39m\u001b[36m\u001b[1mmin\u001b[22m\u001b[39m … \u001b[35mmax\u001b[39m\u001b[90m):  \u001b[39m\u001b[36m\u001b[1m2.127 s\u001b[22m\u001b[39m … \u001b[35m  2.152 s\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmin … max\u001b[90m): \u001b[39m1.53% … 1.58%\n Time  \u001b[90m(\u001b[39m\u001b[34m\u001b[1mmedian\u001b[22m\u001b[39m\u001b[90m):     \u001b[39m\u001b[34m\u001b[1m2.139 s              \u001b[22m\u001b[39m\u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmedian\u001b[90m):    \u001b[39m1.59%\n Time  \u001b[90m(\u001b[39m\u001b[32m\u001b[1mmean\u001b[22m\u001b[39m ± \u001b[32mσ\u001b[39m\u001b[90m):   \u001b[39m\u001b[32m\u001b[1m2.140 s\u001b[22m\u001b[39m ± \u001b[32m12.309 ms\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmean ± σ\u001b[90m):  \u001b[39m1.68% ± 0.23%\n\n  \u001b[34m█\u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[32m \u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[39m \n  \u001b[34m█\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m▁\u001b[32m▁\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m \u001b[39m▁\n  2.13 s\u001b[90m         Histogram: frequency by time\u001b[39m        2.15 s \u001b[0m\u001b[1m<\u001b[22m\n\n Memory estimate\u001b[90m: \u001b[39m\u001b[33m474.73 MiB\u001b[39m, allocs estimate\u001b[90m: \u001b[39m\u001b[33m11802668\u001b[39m.","category":"page"},{"location":"examples/multiprocessing/#Single-Threaded-Batch-Execution","page":"Multiprocessing","title":"Single Threaded Batch Execution","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"To compute a batch we can collect multiple evaluations. In a single threaded context we can use the same FMU for every call.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"println(\"Single Threaded\")\n@benchmark collect(runCalcFormatted(SharedModule.model_fmu, i) for i in input_values)","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Single Threaded\n\n\n\n\n\nBenchmarkTools.Trial: 1 sample with 1 evaluation.\n Single result which took \u001b[34m34.285 s\u001b[39m (1.74% GC) to evaluate,\n with a memory estimate of \u001b[33m7.43 GiB\u001b[39m, over \u001b[33m189042686\u001b[39m allocations.","category":"page"},{"location":"examples/multiprocessing/#Multithreaded-Batch-Execution","page":"Multiprocessing","title":"Multithreaded Batch Execution","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"In a multithreaded context we have to provide each thread it's own fmu, as they are not thread safe. To spread the execution of a function to multiple processes, the function pmap can be used.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"println(\"Multi Threaded\")\n@benchmark pmap(i -> runCalcFormatted(SharedModule.model_fmu, i), input_values)","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"Multi Threaded\n\n\n\n\n\nBenchmarkTools.Trial: 1 sample with 1 evaluation.\n Single result which took \u001b[34m21.407 s\u001b[39m (0.00% GC) to evaluate,\n with a memory estimate of \u001b[33m90.98 KiB\u001b[39m, over \u001b[33m1620\u001b[39m allocations.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"As you can see, there is a significant speed-up in the median execution time. But: The speed-up is often much smaller than n_procs (or the number of physical cores of your CPU), this has different reasons. For a rule of thumb, the speed-up should be around n/2 on a n-core-processor with n Julia processes.","category":"page"},{"location":"examples/multiprocessing/#Unload-FMU","page":"Multiprocessing","title":"Unload FMU","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"After calculating the data, the FMU is unloaded and all unpacked data on disc is removed.","category":"page"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"@everywhere fmiUnload(SharedModule.model_fmu)","category":"page"},{"location":"examples/multiprocessing/#Summary","page":"Multiprocessing","title":"Summary","text":"","category":"section"},{"location":"examples/multiprocessing/","page":"Multiprocessing","title":"Multiprocessing","text":"In this tutorial it is shown how multi processing with Distributed.jl can be used to improve the performance for calculating a Batch of FMUs.","category":"page"},{"location":"fmi3_lowlevel_library_types/#FMI3-Types-in-FMI-Import/Core-.jl","page":"FMI3 Types in FMI Import/Core .jl","title":"FMI3 Types in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi3_lowlevel_library_types/","page":"FMI3 Types in FMI Import/Core .jl","title":"FMI3 Types in FMI Import/Core .jl","text":"FMU3\nFMU3Instance\nFMU3InstanceEnvironment\nfmi3Struct\nfmi3StructMD\nfmi3Initial\nFMU3Solution\nfmi3Variable\nfmi3VariableDependency\nfmi3SimpleType\nfmi3Type\nfmi3Unit\nfmi3Float32\nfmi3Float64\nfmi3Int8\nfmi3Int16\nfmi3Int32\nfmi3Int64\nfmi3UInt8\nfmi3UInt16\nfmi3UInt32\nfmi3UInt64\nFMIImport.fmi3ValueReferenceFormat\nfmi3IntervalQualifier\nfmi3Variability\nfmi3DependencyKind\nFMU3Event\nFMU3ExecutionConfiguration\nfmi3Status\nfmi3Annotation\nfmi3ModelDescription\nfmi3VariableNamingConvention\nfmi3Causality","category":"page"},{"location":"fmi3_lowlevel_library_types/#FMICore.FMU3","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.FMU3","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.1. Header Files and Naming of Functions\n\nThe mutable struct representing an FMU in the FMI 3.0 Standard. Also contains the paths to the FMU and ZIP folder as well als all the FMI 3.0 function pointers\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.FMU3Instance","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.FMU3Instance","text":"Source: FMISpec3.0, Version D5ef1c1:: 2.2.1. Header Files and Naming of Functions\n\nThe mutable struct represents a pointer to an FMU specific data structure that contains the information needed to process the model equations or to process the co-simulation of the model/subsystem represented by the FMU.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.FMU3InstanceEnvironment","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.FMU3InstanceEnvironment","text":"This is a pointer to a data structure in the importer. Using this pointer, data may be transferred between the importer and callback functions the importer provides with the instantiation functions.\n\nSource: FMISpec 3.0.1 [2.2.3. Platform Dependent Definitions]\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMIImport.fmi3Struct","page":"FMI3 Types in FMI Import/Core .jl","title":"FMIImport.fmi3Struct","text":"Union containing a FMU3 or a FMU3Instance\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMIImport.fmi3StructMD","page":"FMI3 Types in FMI Import/Core .jl","title":"FMIImport.fmi3StructMD","text":"Union containing a FMU3, a FMU3Instance or a fmi3ModelDescription\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Initial","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Initial","text":"Source: FMISpec3.0, Version D5ef1c1:2.4.7.5. Type specific properties Enumeration that defines how the variable is initialized, i.e. if a fmi3Set{VariableType} is allowed and how the FMU internally treats this value in Instantiated and Initialization Mode. For the variable with causality = independent, the attribute initial must not be provided, because its start value is set with the startTime parameter of fmi3EnterInitializationMode.\n\nThe attribute initial for other variables can have the following values and meanings:\n\nexact - The variable is initialized with the start value (provided under the variable type element).\n\napprox - The start value provides an approximation that may be modified during initialization, e.g., if the FMU is part of an algebraic loop where the variable might be an iteration variable and start value is taken as initial value for an iterative solution process.\n\ncalculated - The variable is calculated from other variables during initialization. It is not allowed to provide a start value.\n\nIf initial is not present, it is defined by Table 22 based on causality and variability. If initial = exact or approx, or causality = input, a start value must be provided. If initial = calculated, or causality = independent, it is not allowed to provide a start value.\n\n[The environment decides when to use the start value of a variable with causality = input. Examples: * Automatic tests of FMUs are performed, and the FMU is tested by providing the start value as constant input. * For a Model Exchange FMU, the FMU might be part of an algebraic loop. If the input variable is iteration variable of this algebraic loop, then initialization starts with its start value.]\n\nIf fmi3Set{VariableType} is not called on a variable with causality = input, then the FMU must use the start value as value of this input.\n\nAdded prefix \"fmi3\" to help with redefinition of constans in enums.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.FMU3Solution","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.FMU3Solution","text":"The mutable struct representing a specific Solution of a FMI2 FMU.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Variable","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Variable","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.7. Definition of Model Variables\n\nA fmi3Variable describes the the type, name, valueRefence and optional information for every variable in the Modeldescription.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3VariableDependency","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3VariableDependency","text":"Mutable Struct representing existance and kind of dependencies of an Unknown on Known Variables.\n\nSee also FMI3.0.1 Spec [fig 30]\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3SimpleType","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3SimpleType","text":"ToDo: Not implemented\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Type","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Type","text":"Source: FMISpec3.0, Version D5ef1c1: 2.3.1. Super State: FMU State Setable\n\nArgument fmuType defines the type of the FMU:\n\nfmi3ModelExchange: FMU with initialization and events; between events simulation of continuous systems is performed with external integrators from the environment.\nfmi3CoSimulation: Black box interface for co-simulation.\nfmi3ScheduledExecution: Concurrent computation of model partitions on a single computational resource (e.g. CPU-core)\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Unit","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Unit","text":"ToDo: Not implemented\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Float32","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Float32","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Float64","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Float64","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Int8","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Int8","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Int16","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Int16","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Int32","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Int32","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Int64","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Int64","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3UInt8","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3UInt8","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3UInt16","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3UInt16","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3UInt32","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3UInt32","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3UInt64","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3UInt64","text":"Source: FMISpec3.0-dev, Version D5ef1c1:2.2.2. Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section.  All definitions in this section are provided in the header file fmi3PlatformTypes.h. It is required to use this definition for all binary FMUs.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMIImport.fmi3ValueReferenceFormat","page":"FMI3 Types in FMI Import/Core .jl","title":"FMIImport.fmi3ValueReferenceFormat","text":"Union of (wildcard for) all ways to describe and pass a fmi3ValueReference (e.g. String, Int64, Array, fmi3ValueReference, ...)\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3IntervalQualifier","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3IntervalQualifier","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.9.4. Scheduled Execution Enumeration that defines the IntervalQualifiers which describe how to treat the intervals and intervalCounters arguments. They have the following meaning: fmi3IntervalNotYetKnown -  is returned for a countdown aperiodic Clock for which the next interval is not yet known. This qualifier value can only be returned directly after the Clock was active and previous calls to fmi3GetInterval never returned fmi3IntervalChanged (nor fmi3IntervalUnchanged). In Scheduled Execution this return value means that the corresponding model partition cannot be scheduled yet.\n\nfmi3IntervalUnchanged - is returned if a previous call to fmi3GetInterval already returned a value qualified with fmi3IntervalChanged which has not changed since. In Scheduled Execution this means the corresponding model partition has already been scheduled.\n\nfmi3IntervalChanged - is returned to indicate that the value for the interval has changed for this Clock. Any previously returned intervals (if any) are overwritten with the current value. The new Clock interval is relative to the time of the current Event Mode or Clock Update Mode in contrast to the interval of a periodic Clock, where the interval is defined as the time between consecutive Clock ticks. In Scheduled Execution this means that the corresponding model partition has to be scheduled or re-scheduled (if a previous call to fmi3GetInterval returned fmi3IntervalChanged).\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Variability","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Variability","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.7.4. Variable Attributes Enumeration that defines the time dependency of the variable, in other words, it defines the time instants when a variable can change its value. [The purpose of this attribute is to define when a result value needs to be inquired and to be stored. For example, discrete variables change their values only at event instants (ME) or at a communication point (CS and SE) and it is therefore only necessary to inquire them with fmi3Get{VariableType} and store them at event times.] Allowed values of this enumeration: constant - The value of the variable never changes.\n\nfixed - The value of the variable is fixed after initialization, in other words, after fmi3ExitInitializationMode was called the variable value does not change anymore.\n\ntunable - The value of the variable is constant between events (ME) and between communication points (CS and SE) due to changing variables with causality = parameter and variability = tunable. Whenever a parameter with variability = tunable changes, an event is triggered externally (ME or CS if events are supported), or the change is performed at the next communication point (CS and SE) and the variables with variability = tunable and causality = calculatedParameter or output must be newly computed. [tunable inputs are not allowed, see Table 18.]\n\ndiscrete - Model Exchange: The value of the variable is constant between external and internal events (= time, state, step events defined implicitly in the FMU). Co-Simulation: By convention, the variable is from a real sampled data system and its value is only changed at communication points (including event handling). During intermediateUpdate, discrete variables are not allowed to change. [If the simulation algorithm notices a change in a discrete variable during intermediateUpdate, the simulation algorithm will delay the change, raise an event with earlyReturnRequested == fmi3True and during the communication point it can change the discrete variable, followed by event handling.]\n\ncontinuous - Only a variable of type == fmi3GetFloat32 or type == fmi3GetFloat64 can be continuous. Model Exchange: No restrictions on value changes (see Section 4.1.1).\n\nThe default is continuous for variables of type <Float32> and <Float64>, and discrete for all other types.\n\nFor variables of type Clock and clocked variables the variability is always discrete or tunable.\n\n[Note that the information about continuous states is defined with elements <ContinuousStateDerivative> in <ModelStructure>.]\n\nAdded prefix \"fmi3\" to help with redefinition of constans in enums.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3DependencyKind","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3DependencyKind","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.10. Dependencies of Variables\n\nEnumeration that defines the dependencies a single unknown variable vunknown can have in relation to a known variable vknown. They have the following meaning: dependent - no particular structure, f(.., v_{known,i}, ..)\n\nOnly for floating point type unknowns v_{unknown}:\n\nconstant - constant factor, c ⋅ v_{known,i} where c is an expression that is evaluated before fmi3EnterInitializationMode is called.\n\nOnly for floating point type unknowns v_{unknown} in Event and Continuous-Time Mode (ME) and at communication points (CS and SE), and not for <InitialUnknown> for Initialization Mode:\n\nfixed - fixed factor, p⋅v_{known,i} where p is an expression that is evaluated before fmi3ExitInitializationMode is called.\n\ntunable - tunable factor, p⋅v_{known,i} where p is an expression that is evaluated before fmi3ExitInitializationMode is called and in Event Mode due to event handling (ME) or at a communication point (CS and SE)\n\ndiscrete - discrete factor, d⋅v_{known,i} where d is an expression that is evaluated before fmi3ExitInitializationMode is called and in Event Mode due to an external or internal event or at a communication point (CS and SE).\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.FMU3Event","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.FMU3Event","text":"Container for event related information. \n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.FMU3ExecutionConfiguration","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.FMU3ExecutionConfiguration","text":"A mutable struct representing the excution configuration of a FMU. For FMUs that have issues with calls like fmi3Reset or fmi3FreeInstance, this is pretty useful.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Status","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Status","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.3. Status Returned by Functions Defines the status flag (an enumeration of type fmi3Status defined in file fmi3FunctionTypes.h) that is returned by functions to indicate the success of the function call: The status has the following meaning:\n\nfmi3OK: The call was successful. The output argument values are defined.\nfmi3Warning: A non-critical problem was detected, but the computation can continue. The output argument values are defined. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings.\n\n[In certain applications, e.g. in a prototyping environment, warnings may be acceptable. For production environments warnings should be treated like errors unless they can be safely ignored.]\n\nfmi3Discard: The call was not successful and the FMU is in the same state as before the call. The output argument values are not defined, but the computation can continue. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. Advanced simulation algorithms can try alternative approaches to drive the simulation by calling the function with different arguments or calling another function. Otherwise the simulation algorithm has to treat this return code like fmi3Error and has to terminate the simulation.\n\n[Examples for usage of fmi3Discard are handling of min/max violation, or signal numerical problems during model evaluation forcing smaller step sizes.]\n\nfmi3Error: The call failed. The output argument values are undefined and the simulation cannot be continued. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. If a function returns fmi3Error, it is possible to restore a previously retrieved FMU state by calling fmi3SetFMUState. Otherwise fmi3FreeInstance or fmi3Reset must be called. When detecting illegal arguments or a function call not allowed in the current state according to the respective state machine, the FMU must return fmi3Error. Other instances of this FMU are not affected by the error.\nfmi3Fatal: The state of all instances of the model is irreparably corrupted. [For example, due to a runtime exception such as access violation or integer division by zero during the execution of an FMI function.] Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings, if still possible. It is not allowed to call any other function for any instance of the FMU.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Annotation","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Annotation","text":"A not further specified annotation struct.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3ModelDescription","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3ModelDescription","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.1. Definition of an FMU\n\nThe central FMU data structure defining all variables of the FMU that are visible/accessible via the FMU functions.\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3VariableNamingConvention","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3VariableNamingConvention","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.7.5.1. Variable Naming Conventions\n\n\n\n\n\n","category":"type"},{"location":"fmi3_lowlevel_library_types/#FMICore.fmi3Causality","page":"FMI3 Types in FMI Import/Core .jl","title":"FMICore.fmi3Causality","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.7.4. Variable Attributes Enumeration that defines the causality of the variable. Allowed values of this enumeration:\n\nparameter - A data value that is constant during the simulation (except for tunable parameters, see there) and is provided by the environment and cannot be used in connections, except for parameter propagation in terminals as described in Section 2.4.9.2.6. variability must be fixed or tunable. These parameters can be changed independently, unlike calculated parameters. initial must be exact or not present (meaning exact).\n\ncalculatedParameter - A data value that is constant during the simulation and is computed during initialization or when tunable parameters change. variability must be fixed or tunable. initial must be approx, calculated or not present (meaning calculated).\n\ninput - The variable value can be provided by the importer. [For example, the importer could forward the output of another FMU into this input.]\n\noutput -  The variable value can be used by the importer. [For example, this value can be forwarded to an input of another FMU.] The algebraic relationship to the inputs can be defined via the dependencies attribute of <fmiModelDescription><ModelStructure><Output>.\n\nlocal -  Local variables are:\n\ncontinuous states and their ContinuousStateDerivatives, ClockedStates, EventIndicators or InitialUnknowns. These variables are listed in the <fmiModelDescription><ModelStructure>.\ninternal, intermediate variables or local clocks which can be read for debugging purposes and are not listed in the <fmiModelDescription><ModelStructure>.\n\nSetting of local variables:\n\nIn Initialization Mode and before, local variables need to be set if they do have start values or are listed as <InitialUnknown>.\nIn super state Initialized, fmi3Set{VariableType} must not be called on any of the local variables. Only in Model Exchange, continuous states can be set with fmi3SetContinuousStates. Local variable values must not be used as input to another model or FMU.\n\nindependent - The independent variable (usually time [but could also be, for example, angle]). All variables are a function of this independent variable. variability must be continuous. Exactly one variable of an FMU must be defined as independent.  For Model Exchange the value is the last value set by fmi3SetTime. For Co-Simulation the value of the independent variable is lastSuccessfulTime return by the last call to fmi3DoStep or the value of argument intermediateUpdateTime of fmi3CallbackIntermediateUpdate. For Scheduled Execution the value of the independent variable is not defined. [The main purpose of this variable in Scheduled Execution is to define a quantity and unit for the independent variable.] The initial value of the independent variable is the value of the argument startTime of fmi3EnterInitializationMode for both Co-Simulation and Model Exchange.  If the unit for the independent variable is not defined, it is implicitly s (seconds). If one variable is defined as independent, it must be defined with a floating point type without a start attribute. It is not allowed to call function fmi3Set{VariableType} on an independent variable. Instead, its value is initialized with fmi3EnterInitializationMode and after initialization set by fmi3SetTime for Model Exchange and by arguments currentCommunicationPoint and communicationStepSize of fmi3DoStep for Co-Simulation FMUs. [The actual value can be inquired with fmi3Get{VariableType}.]\n\nstructuralParameter - The variable value can only be changed in Configuration Mode or Reconfiguration Mode. The variability attribute must be fixed or tunable. The initial attribute must be exact or not present (meaning exact). The start attribute is mandatory. A structural parameter must not have a <Dimension> element. A structural parameter may be referenced in <Dimension> elements. If a structural parameters is referenced in <Dimension> elements, it must be of type <UInt64> and its start attribute must be larger than 0. The min attribute might still be 0.\n\nThe default of causality is local. A continuous-time state or an event indicator must have causality = local or output, see also Section 2.4.8.\n\n[causality = calculatedParameter and causality = local with variability = fixed or tunable are similar. The difference is that a calculatedParameter can be used in another model or FMU, whereas a local variable cannot. For example, when importing an FMU in a Modelica environment, a calculatedParameter should be imported in a public section as final parameter, whereas a local variable should be imported in a protected section of the model.]\n\nThe causality of variables of type Clock must be either input or output.\n\nAdded prefix \"fmi3\" to help with redefinition of constans in enums.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_modeldescription_functions/#Working-with-the-FMI-model-description","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"The FMI model description provides all human readable information on the model. The following fuctions can be used to obtain all information provided by the model descripton, wich in turn can be extrated from the fmu.","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#Loading/Parsing","page":"Working with the FMI model description","title":"Loading/Parsing","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2LoadModelDescription","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2LoadModelDescription","page":"Working with the FMI model description","title":"FMIImport.fmi2LoadModelDescription","text":"fmi2LoadModelDescription(pathToModelDescription::String)\n\nExtract the FMU variables and meta data from the ModelDescription\n\nArguments\n\npathToModelDescription::String: Contains the path to a file name that is selected to be read and converted to an XML document. In order to better extract the variables and meta data in the further process.\n\nReturns\n\nmd::fmi2ModelDescription: Retuns a struct which provides the static information of ModelVariables.\n\nSource\n\nEzXML.jl\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#general-information-about-the-FMU","page":"Working with the FMI model description","title":"general information about the FMU","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetModelName\nfmi2GetGUID\nfmi2IsCoSimulation\nfmi2IsModelExchange\nfmi2GetGenerationTool\nfmi2GetGenerationDateAndTime","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetModelName","page":"Working with the FMI model description","title":"FMIImport.fmi2GetModelName","text":"fmi2GetModelName(md::fmi2ModelDescription)\n\nReturns the tag 'modelName' from the model description.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.modelName::String: Returns the tag 'modelName' from the model description.\n\n\n\n\n\nfunction fmi2GetModelName(fmu::FMU2)\n\nReturns the tag 'modelName' from the model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nfmu.modelDescription.modelName::String: Returns the tag 'modelName' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetGUID","page":"Working with the FMI model description","title":"FMIImport.fmi2GetGUID","text":"fmi2GetGUID(md::fmi2ModelDescription)\n\nReturns the tag 'guid' from the model description.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.guid::String: Returns the tag 'guid' from the model description.\n\n\n\n\n\nfmi2GetGUID(fmu::FMU2)\n\nReturns the tag 'guid' from the model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nfmu.modelDescription.guid::String: Returns the tag 'guid' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2IsCoSimulation","page":"Working with the FMI model description","title":"FMIImport.fmi2IsCoSimulation","text":"fmi2IsCoSimulation(md::fmi2ModelDescription)\n\nReturns true, if the FMU supports co simulation\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU supports co simulation\n\n\n\n\n\nfmi2IsCoSimulation(fmu::FMU2)\n\nReturns true, if the FMU supports co simulation\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\n::Bool: Returns true, if the FMU supports co simulation\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2IsModelExchange","page":"Working with the FMI model description","title":"FMIImport.fmi2IsModelExchange","text":"fmi2IsModelExchange(md::fmi2ModelDescription)\n\nReturns true, if the FMU supports model exchange\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU supports model exchange\n\n\n\n\n\nfmi2IsModelExchange(fmu::FMU2)\n\nReturns true, if the FMU supports model exchange\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\n::Bool: Returns true, if the FMU supports model exchange\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetGenerationTool","page":"Working with the FMI model description","title":"FMIImport.fmi2GetGenerationTool","text":"fmi2GetGenerationTool(md::fmi2ModelDescription)\n\nReturns the tag 'generationtool' from the model description.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.generationTool::Union{String, Nothing}: Returns the tag 'generationtool' from the model description.\n\n\n\n\n\nfmi2GetGenerationTool(fmu::FMU2)\n\nReturns the tag 'generationtool' from the model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nfmu.modelDescription.generationTool::Union{String, Nothing}: Returns the tag 'generationtool' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetGenerationDateAndTime","page":"Working with the FMI model description","title":"FMIImport.fmi2GetGenerationDateAndTime","text":"fmi2GetGenerationDateAndTime(md::fmi2ModelDescription)\n\nReturns the tag 'generationdateandtime' from the model description.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.generationDateAndTime::DateTime: Returns the tag 'generationdateandtime' from the model description.\n\n\n\n\n\nfmi2GetGenerationDateAndTime(fmu::FMU2)\n\nReturns the tag 'generationdateandtime' from the model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nfmu.modelDescription.generationDateAndTime::DateTime: Returns the tag 'generationdateandtime' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#tecnical-information-about-the-FMU","page":"Working with the FMI model description","title":"tecnical information about the FMU","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetModelIdentifier\nfmi2GetVariableNamingConvention\nfmi2GetVersion\nfmi2GetTypesPlatform\n\nfmi2GetNumberOfEventIndicators","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetModelIdentifier","page":"Working with the FMI model description","title":"FMIImport.fmi2GetModelIdentifier","text":"fmi2GetModelIdentifier(md::fmi2ModelDescription; type=nothing)\n\nReturns the tag 'modelIdentifier' from CS or ME section.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\ntype=nothing: Defines whether a Co-Simulation or Model Exchange is present. (default = nothing)\n\nReturns\n\nmd.modelExchange.modelIdentifier::String: Returns the tag modelIdentifier from ModelExchange section.\nmd.coSimulation.modelIdentifier::String: Returns the tag modelIdentifier from CoSimulation section.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetVariableNamingConvention","page":"Working with the FMI model description","title":"FMIImport.fmi2GetVariableNamingConvention","text":"fmi2GetVariableNamingConvention(md::fmi2ModelDescription)\n\nReturns the tag 'varaiblenamingconvention' from the model description.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.variableNamingConvention::Union{fmi2VariableNamingConvention, Nothing}: Returns the tag 'variableNamingConvention' from the model description.\n\n\n\n\n\nfmi2GetVariableNamingConvention(fmu::FMU2)\n\nReturns the tag 'varaiblenamingconvention' from the model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nfmu.modelDescription.variableNamingConvention::Union{fmi2VariableNamingConvention, Nothing}: Returns the tag 'variableNamingConvention' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMICore.fmi2GetVersion","page":"Working with the FMI model description","title":"FMICore.fmi2GetVersion","text":"fmi2GetVersion(fmu::FMU2)\n\nReturns the version of the “fmi2Functions.h” header file which was used to compile the functions of the FMU.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a string from the address of a C-style (NUL-terminated) string. The string represents the version of the “fmi2Functions.h” header file which was used to compile the functions of the FMU. The function returns “fmiVersion” which is defined in this header file. The standard header file as documented in this specification has version “2.0”\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\n\n\n\n\nfmi2GetVersion(c::FMU2Component)\n\nReturns the version of the “fmi2Functions.h” header file which was used to compile the functions of the FMU.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a string from the address of a C-style (NUL-terminated) string. The string represents the version of the “fmi2Functions.h” header file which was used to compile the functions of the FMU. The function returns “fmiVersion” which is defined in this header file. The standard header file as documented in this specification has version “2.0”\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\n\n\n\n\nSource: FMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\n\nReturns the version of the “fmi2Functions.h” header file which was used to compile the functions of the FMU. The function returns “fmiVersion” which is defined in this header file. The standard header file as documented in this specification has version “2.0”\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMICore.fmi2GetTypesPlatform","page":"Working with the FMI model description","title":"FMICore.fmi2GetTypesPlatform","text":"fmi2GetTypesPlatform(fmu::FMU2)\n\nReturns the string to uniquely identify the “fmi2TypesPlatform.h” header file used for compilation of the functions of the FMU. The standard header file, as documented in this specification, has fmi2TypesPlatform set to “default” (so this function usually returns “default”).\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns the string to uniquely identify the “fmi2TypesPlatform.h” header file used for compilation of the functions of the FMU.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\n\n\n\n\nfmi2GetTypesPlatform(c::FMU2Component)\n\nReturns the string to uniquely identify the “fmi2TypesPlatform.h” header file used for compilation of the functions of the FMU. The standard header file, as documented in this specification, has fmi2TypesPlatform set to “default” (so this function usually returns “default”).\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns the string to uniquely identify the “fmi2TypesPlatform.h” header file used for compilation of the functions of the FMU.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\n\n\n\n\nSource: FMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\n\nReturns the string to uniquely identify the “fmi2TypesPlatform.h” header file used for compilation of the functions of the FMU. The standard header file, as documented in this specification, has fmi2TypesPlatform set to “default” (so this function usually returns “default”).\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetNumberOfEventIndicators","page":"Working with the FMI model description","title":"FMIImport.fmi2GetNumberOfEventIndicators","text":"fmi2GetNumberOfEventIndicators(md::fmi2ModelDescription)\n\nReturns the tag 'numberOfEventIndicators' from the model description.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.numberOfEventIndicators::Union{UInt, Nothing}: Returns the tag 'numberOfEventIndicators' from the model description.\n\n\n\n\n\nfmi2GetNumberOfEventIndicators(fmu::FMU2)\n\nReturns the tag 'numberOfEventIndicators' from the model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nfmu.modelDescription.numberOfEventIndicators::Union{UInt, Nothing}: Returns the tag 'numberOfEventIndicators' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#default-experiment-settings","page":"Working with the FMI model description","title":"default experiment settings","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetDefaultStartTime\nfmi2GetDefaultStopTime\nfmi2GetDefaultTolerance\nfmi2GetDefaultStepSize","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetDefaultStartTime","page":"Working with the FMI model description","title":"FMIImport.fmi2GetDefaultStartTime","text":"fmi2GetDefaultStartTime(md::fmi2ModelDescription)\n\nReturns startTime from DefaultExperiment if defined else defaults to nothing.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.defaultExperiment.startTime::Union{Real,Nothing}: Returns a real value startTime from the DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetDefaultStopTime","page":"Working with the FMI model description","title":"FMIImport.fmi2GetDefaultStopTime","text":"fmi2GetDefaultStopTime(md::fmi2ModelDescription)\n\nReturns stopTime from DefaultExperiment if defined else defaults to nothing.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.defaultExperiment.stopTime::Union{Real,Nothing}: Returns a real value stopTime from the DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetDefaultTolerance","page":"Working with the FMI model description","title":"FMIImport.fmi2GetDefaultTolerance","text":"fmi2GetDefaultTolerance(md::fmi2ModelDescription)\n\nReturns tolerance from DefaultExperiment if defined else defaults to nothing.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.defaultExperiment.tolerance::Union{Real,Nothing}: Returns a real value tolerance from the DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetDefaultStepSize","page":"Working with the FMI model description","title":"FMIImport.fmi2GetDefaultStepSize","text":"fmi2GetDefaultStepSize(md::fmi2ModelDescription)\n\nReturns stepSize from DefaultExperiment if defined else defaults to nothing.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nmd.defaultExperiment.stepSize::Union{Real,Nothing}: Returns a real value setpSize from the DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMU-capabilities","page":"Working with the FMI model description","title":"FMU capabilities","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2DependenciesSupported\nfmi2DerivativeDependenciesSupported\nfmi2CanGetSetState\nfmi2CanSerializeFMUstate\nfmi2ProvidesDirectionalDerivative","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2DependenciesSupported","page":"Working with the FMI model description","title":"FMIImport.fmi2DependenciesSupported","text":"fmi2DependenciesSupported(md::fmi2ModelDescription)\n\nReturns true if the FMU model description contains dependency information.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU model description contains dependency information.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2DerivativeDependenciesSupported","page":"Working with the FMI model description","title":"FMIImport.fmi2DerivativeDependenciesSupported","text":"fmi2DerivativeDependenciesSupported(md::fmi2ModelDescription)\n\nReturns if the FMU model description contains dependency information for derivatives.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU model description contains dependency information for derivatives.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2CanGetSetState","page":"Working with the FMI model description","title":"FMIImport.fmi2CanGetSetState","text":"fmi2CanGetSetState(md::fmi2ModelDescription)\n\nReturns true, if the FMU supports the getting/setting of states\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU supports the getting/setting of states.\n\n\n\n\n\nfmi2CanGetSetState(fmu::FMU2)\n\nReturns true, if the FMU supports the getting/setting of states\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\n::Bool: Returns true, if the FMU supports the getting/setting of states.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2CanSerializeFMUstate","page":"Working with the FMI model description","title":"FMIImport.fmi2CanSerializeFMUstate","text":"fmi2CanSerializeFMUstate(md::fmi2ModelDescription)\n\nReturns true, if the FMU state can be serialized\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU state can be serialized\n\n\n\n\n\nfmi2CanSerializeFMUstate(fmu::FMU2)\n\nReturns true, if the FMU state can be serialized\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\n::Bool: Returns true, if the FMU state can be serialized\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2ProvidesDirectionalDerivative","page":"Working with the FMI model description","title":"FMIImport.fmi2ProvidesDirectionalDerivative","text":"fmi2ProvidesDirectionalDerivative(md::fmi2ModelDescription)\n\nReturns true, if the FMU provides directional derivatives\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\n::Bool: Returns true, if the FMU provides directional derivatives\n\n\n\n\n\nfmi2ProvidesDirectionalDerivative(fmu::FMU2)\n\nReturns true, if the FMU provides directional derivatives\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\n::Bool: Returns true, if the FMU provides directional derivatives\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#value-references","page":"Working with the FMI model description","title":"value references","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetValueReferencesAndNames\nfmi2GetNames\nfmi2GetModelVariableIndices\nfmi2DataTypeForValueReference","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetValueReferencesAndNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetValueReferencesAndNames","text":"fmi2GetValueReferencesAndNames(md::fmi2ModelDescription; vrs=md.valueReferences)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of value references and their corresponding names.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.valueReferences: Additional attribute valueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.valueReferences::Array{fmi2ValueReference})\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}.\n\n\n\n\n\nfmi2GetValueReferencesAndNames(fmu::FMU2)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of value references and their corresponding names.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetNames","text":"fmi2GetNames(md::fmi2ModelDescription; vrs=md.valueReferences, mode=:first)\n\nReturns a array of names corresponding to value references vrs.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.valueReferences: Additional attribute valueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.valueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to value references vrs\n\n\n\n\n\nfmi2GetNames(fmu::FMU2; vrs=md.valueReferences, mode=:first)\n\nReturns a array of names corresponding to value references vrs.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\nvrs=md.valueReferences: Additional attribute valueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.valueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetModelVariableIndices","page":"Working with the FMI model description","title":"FMIImport.fmi2GetModelVariableIndices","text":"fmi2GetModelVariableIndices(md::fmi2ModelDescription; vrs=md.valueReferences)\n\nReturns a array of indices corresponding to value references vrs\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.valueReferences: Additional attribute valueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.valueReferences::Array{fmi2ValueReference})\n\nReturns\n\nnames::Array{Integer}: Returns a array of indices corresponding to value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2DataTypeForValueReference","page":"Working with the FMI model description","title":"FMIImport.fmi2DataTypeForValueReference","text":"fmi2DataTypeForValueReference(md::fmi2ModelDescription, vr::fmi2ValueReference)\n\nReturns the fmi2DataType (fmi2Real, fmi2Integer, fmi2Boolean, fmi2String) for a given Valuereference vr of a given FMU-ModelDescription md\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#In-/Outputs","page":"Working with the FMI model description","title":"In-/Outputs","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetInputValueReferencesAndNames\nfmi2GetInputNames\nfmi2GetOutputValueReferencesAndNames\nfmi2GetOutputNames","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetInputValueReferencesAndNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetInputValueReferencesAndNames","text":"fmi2GetInputValueReferencesAndNames(md::fmi2ModelDescription)\n\nReturns a dict with (vrs, names of inputs).\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of inputs)\n\n\n\n\n\nfmi2GetInputValueReferencesAndNames(fmu::FMU2)\n\nReturns a dict with (vrs, names of inputs).\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of inputs)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetInputNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetInputNames","text":"fmi2GetInputNames(md::fmi2ModelDescription; vrs=md.inputvalueReferences, mode=:first)\n\nReturns names of inputs.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.inputvalueReferences: Additional attribute inputvalueReferences::Array{fmi2ValueReference} of the Model Description that is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.valueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to value references vrs\n\n\n\n\n\nfmi2GetInputNames(fmu::FMU2; vrs=md.inputValueReferences, mode=:first)\n\nReturns names of inputs.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\nvrs=md.inputvalueReferences: Additional attribute inputvalueReferences::Array{fmi2ValueReference} of the Model Description that is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.valueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetOutputValueReferencesAndNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetOutputValueReferencesAndNames","text":"fmi2GetOutputValueReferencesAndNames(md::fmi2ModelDescription)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of value references and their corresponding names.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.outputvalueReferences: Additional attribute outputvalueReferences::Array{fmi2ValueReference} of the Model Description that is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.outputvalueReferences::Array{fmi2ValueReference})\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}.So returns a dict with (vrs, names of outputs)\n\n\n\n\n\nfmi2GetOutputValueReferencesAndNames(md::fmi2ModelDescription)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of value references and their corresponding names.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}.So returns a dict with (vrs, names of outputs)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetOutputNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetOutputNames","text":"fmi2GetOutputNames(md::fmi2ModelDescription; vrs=md.outputvalueReferences, mode=:first)\n\nReturns names of outputs.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.outputvalueReferences: Additional attribute outputvalueReferences::Array{fmi2ValueReference} of the Model Description that is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.outputvalueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to value references vrs\n\n\n\n\n\nfmi2GetOutputNames(fmu::FMU2; vrs=md.outputvalueReferences, mode=:first)\n\nReturns names of outputs.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\nvrs=md.outputvalueReferences: Additional attribute outputvalueReferences::Array{fmi2ValueReference} of the Model Description that is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.outputvalueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#Parameters","page":"Working with the FMI model description","title":"Parameters","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetParameterValueReferencesAndNames\nfmi2GetParameterNames","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetParameterValueReferencesAndNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetParameterValueReferencesAndNames","text":"fmi2GetParameterValueReferencesAndNames(md::fmi2ModelDescription)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of parameterValueReferences and their corresponding names.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of parameters).\n\nSee also fmi2GetValueReferencesAndNames.\n\n\n\n\n\nfmi2GetParameterValueReferencesAndNames(fmu::FMU2)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of parameterValueReferences and their corresponding names.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of parameters).\n\nSee also fmi2GetValueReferencesAndNames.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetParameterNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetParameterNames","text":"fmi2GetParameterNames(md::fmi2ModelDescription; vrs=md.parameterValueReferences, mode=:first)\n\nReturns names of parameters.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.parameterValueReferences: Additional attribute parameterValueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.parameterValueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to parameter value references vrs\n\n\n\n\n\nfmi2GetParameterNames(fmu::FMU2; vrs=md.parameterValueReferences, mode=:first)\n\nReturns names of parameters.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\nvrs=md.parameterValueReferences: Additional attribute parameterValueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.parameterValueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to parameter value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#States","page":"Working with the FMI model description","title":"States","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetNumberOfStates\nfmi2GetStateValueReferencesAndNames\nfmi2GetStateNames","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetNumberOfStates","page":"Working with the FMI model description","title":"FMIImport.fmi2GetNumberOfStates","text":"fmi2GetNumberOfStates(md::fmi2ModelDescription)\n\nReturns the number of states of the FMU.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\nReturns the length of the md.valueReferences::Array{fmi2ValueReference} corresponding to the number of states of the FMU.\n\n\n\n\n\nfmi2GetNumberOfStates(fmu::FMU2)\n\nReturns the number of states of the FMU.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns the length of the fmu.modelDescription.valueReferences::Array{fmi2ValueReference} corresponding to the number of states of the FMU.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetStateValueReferencesAndNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetStateValueReferencesAndNames","text":"fmi2GetStateValueReferencesAndNames(md::fmi2ModelDescription)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of state value references and their corresponding names.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of states)\n\n\n\n\n\nfmi2GetStateValueReferencesAndNames(fmu::FMU2)\n\nReturns dict(vrs, names of states).\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of state value references and their corresponding names.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of states)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetStateNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetStateNames","text":"fmi2GetStateNames(fmu::FMU2; vrs=md.stateValueReferences, mode=:first)\n\nReturns names of states.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.stateValueReferences: Additional attribute parameterValueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.stateValueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to parameter value references vrs\n\n\n\n\n\nfmi2GetStateNames(fmu::FMU2; vrs=md.stateValueReferences, mode=:first)\n\nReturns names of states.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\nvrs=md.stateValueReferences: Additional attribute parameterValueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.stateValueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to parameter value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#Derivatives","page":"Working with the FMI model description","title":"Derivatives","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetDerivateValueReferencesAndNames\nfmi2GetDerivativeNames","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetDerivateValueReferencesAndNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetDerivateValueReferencesAndNames","text":"fmi2GetDerivateValueReferencesAndNames(md::fmi2ModelDescription)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of derivative value references and their corresponding names.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of derivatives)\n\nSee also fmi2GetValueReferencesAndNames\n\n\n\n\n\nfmi2GetDerivateValueReferencesAndNames(fmu::FMU2)\n\nReturns a dictionary Dict(fmi2ValueReference, Array{String}) of derivative value references and their corresponding names.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{fmi2ValueReference, Array{String}}: Returns a dictionary that constructs a hash table with keys of type fmi2ValueReference and values of type Array{String}. So returns a dict with (vrs, names of derivatives)\n\nSee also fmi2GetValueReferencesAndNames\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetDerivativeNames","page":"Working with the FMI model description","title":"FMIImport.fmi2GetDerivativeNames","text":"fmi2GetDerivativeNames(md::fmi2ModelDescription; vrs=md.derivativeValueReferences, mode=:first)\n\nReturns names of derivatives.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nKeywords\n\nvrs=md.derivativeValueReferences: Additional attribute derivativeValueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.derivativeValueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to parameter value references vrs\n\n\n\n\n\nfmi2GetDerivativeNames(fmu::FMU2; vrs=md.derivativeValueReferences, mode=:first)\n\nReturns names of derivatives.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\nvrs=md.derivativeValueReferences: Additional attribute derivativeValueReferences::Array{fmi2ValueReference} of the Model Description that  is a handle to a (base type) variable value. Handle and base type uniquely identify the value of a variable. (default = md.derivativeValueReferences::Array{fmi2ValueReference})\nmode=:first: If there are multiple names per value reference, availabel modes are :first (default, pick only the first one), :group (pick all and group them into an array) and :flat (pick all, but flat them out into a 1D-array together with all other names)\n\nReturns\n\nnames::Array{String}: Returns a array of names corresponding to parameter value references vrs\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#Variables","page":"Working with the FMI model description","title":"Variables","text":"","category":"section"},{"location":"fmi2_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi2GetNamesAndDescriptions\nfmi2GetNamesAndUnits\nfmi2GetNamesAndInitials\nfmi2GetInputNamesAndStarts","category":"page"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetNamesAndDescriptions","page":"Working with the FMI model description","title":"FMIImport.fmi2GetNamesAndDescriptions","text":"fmi2GetNamesAndDescriptions(md::fmi2ModelDescription)\n\nReturns a dictionary of variables with their descriptions.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{String, String}: Returns a dictionary that constructs a hash table with keys of type String and values of type String. So returns a dict with ( md.modelVariables[i].name::String, md.modelVariables[i].description::Union{String, Nothing}). (Creates a tuple (name, description) for each i in 1:length(md.modelVariables))\n\n\n\n\n\nfmi2GetNamesAndDescriptions(fmu::FMU2)\n\nReturns a dictionary of variables with their descriptions.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{String, String}: Returns a dictionary that constructs a hash table with keys of type String and values of type String. So returns a dict with ( md.modelVariables[i].name::String, md.modelVariables[i].description::Union{String, Nothing}). (Creates a tuple (name, description) for each i in 1:length(md.modelVariables))\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetNamesAndUnits","page":"Working with the FMI model description","title":"FMIImport.fmi2GetNamesAndUnits","text":"fmi2GetNamesAndUnits(md::fmi2ModelDescription)\n\nReturns a dictionary of variables with their units.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{String, String}: Returns a dictionary that constructs a hash table with keys of type String and values of type String. So returns a dict with ( md.modelVariables[i].name::String, md.modelVariables[i]._Real.unit::Union{String, Nothing}). (Creates a tuple (name, unit) for each i in 1:length(md.modelVariables))\n\nSee also fmi2GetUnit.\n\n\n\n\n\nfmi2GetNamesAndUnits(fmu::FMU2)\n\nReturns a dictionary of variables with their units.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{String, String}: Returns a dictionary that constructs a hash table with keys of type String and values of type String. So returns a dict with ( md.modelVariables[i].name::String, md.modelVariables[i]._Real.unit::Union{String, Nothing}). (Creates a tuple (name, unit) for each i in 1:length(md.modelVariables))\n\nSee also fmi2GetUnit.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetNamesAndInitials","page":"Working with the FMI model description","title":"FMIImport.fmi2GetNamesAndInitials","text":"fmi2GetNamesAndInitials(md::fmi2ModelDescription)\n\nReturns a dictionary of variables with their initials.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{String, Cuint}: Returns a dictionary that constructs a hash table with keys of type String and values of type Cuint. So returns a dict with ( md.modelVariables[i].name::String, md.modelVariables[i].inital::Union{fmi2Initial, Nothing}). (Creates a tuple (name,initial) for each i in 1:length(md.modelVariables))\n\nSee also fmi2GetInitial.\n\n\n\n\n\nfmi2GetNamesAndInitials(fmu::FMU2)\n\nReturns a dictionary of variables with their initials.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{String, Cuint}: Returns a dictionary that constructs a hash table with keys of type String and values of type Cuint. So returns a dict with ( md.modelVariables[i].name::String, md.modelVariables[i].inital::Union{fmi2Initial, Nothing}). (Creates a tuple (name,initial) for each i in 1:length(md.modelVariables))\n\nSee also fmi2GetInitial.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_modeldescription_functions/#FMIImport.fmi2GetInputNamesAndStarts","page":"Working with the FMI model description","title":"FMIImport.fmi2GetInputNamesAndStarts","text":"fmi2GetInputNamesAndStarts(md::fmi2ModelDescription)\n\nReturns a dictionary of input variables with their starting values.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\n\nReturns\n\ndict::Dict{String, Array{fmi2ValueReferenceFormat}}: Returns a dictionary that constructs a hash table with keys of type String and values of type fmi2ValueReferenceFormat. So returns a dict with ( md.modelVariables[i].name::String, starts:: Array{fmi2ValueReferenceFormat} ). (Creates a tuple (name, starts) for each i in inputIndices)\n\nSee also fmi2GetStartValue.\n\n\n\n\n\nfmi2GetInputNamesAndStarts(fmu::FMU2)\n\nReturns a dictionary of input variables with their starting values.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nReturns\n\ndict::Dict{String, Array{fmi2ValueReferenceFormat}}: Returns a dictionary that constructs a hash table with keys of type String and values of type fmi2ValueReferenceFormat. So returns a dict with ( md.modelVariables[i].name::String, starts:: Array{fmi2ValueReferenceFormat} ). (Creates a tuple (name, starts) for each i in inputIndices)\n\nSee also fmi2GetStartValue.\n\n\n\n\n\n","category":"function"},{"location":"contents/","page":"Contents","title":"Contents","text":"Depth = 2","category":"page"},{"location":"fmi3_lowlevel_SE_functions/#FMI-for-Scheduled-Execution","page":"FMI for Scheduled Execution","title":"FMI for Scheduled Execution","text":"","category":"section"},{"location":"fmi_lowlevel_library_constants/#Constants-in-FMI-Import/Core-.jl","page":"Constants in FMI Import/Core .jl","title":"Constants in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi_lowlevel_library_constants/","page":"Constants in FMI Import/Core .jl","title":"Constants in FMI Import/Core .jl","text":"","category":"page"},{"location":"fmi2_lowlevel_CS_functions/#FMI-for-Co-Simulation","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"","category":"section"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"This chapter defines the Functional Mock-up Interface (FMI) for the coupling of two or more simulation models in a Co-Simulation environment (FMI for Co-Simulation). Co-Simulation is a rather general approach to the simulation of coupled technical systems and coupled physical phenomena in engineering with focus on instationary (time-dependent) problems.","category":"page"},{"location":"fmi2_lowlevel_CS_functions/#Transfer-of-Input-/-Output-Values-and-Parameters","page":"FMI for Co-Simulation","title":"Transfer of Input / Output Values and Parameters","text":"","category":"section"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"In order to enable the slave to interpolate the continuous real inputs between communication steps, the derivatives of the inputs with respect to time can be provided. Also, higher derivatives can be set to allow higher order interpolation.","category":"page"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"fmi2GetRealOutputDerivatives","category":"page"},{"location":"fmi2_lowlevel_CS_functions/#FMIImport.fmi2GetRealOutputDerivatives","page":"FMI for Co-Simulation","title":"FMIImport.fmi2GetRealOutputDerivatives","text":"fmi2GetRealOutputDerivatives(c::FMU2Component, vr::fmi2ValueReferenceFormat, order::AbstractArray{fmi2Integer})\n\nSets the n-th time derivative of real input variables.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that t define the variables whose derivatives shall be set.\norder::Array{fmi2Integer}: Argument order is an array of fmi2Integer values witch specifys the corresponding order of derivative of the real input variable.\n\nReturns\n\nvalue::AbstactArray{fmi2Integer}: Return value is an array which represents a vector with the values of the derivatives.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\n\n\n\n\nfmi2GetRealOutputDerivatives(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetRealOutputDerivatives(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#Computation","page":"FMI for Co-Simulation","title":"Computation","text":"","category":"section"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"The computation of time steps is controlled by the following function.","category":"page"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"fmi2DoStep\nfmi2CancelStep","category":"page"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2DoStep","page":"FMI for Co-Simulation","title":"FMICore.fmi2DoStep","text":"fmi2DoStep(c::FMU2Component, \n                currentCommunicationPoint::fmi2Real, \n                communicationStepSize::fmi2Real, \n                noSetFMUStatePriorToCurrentPoint::fmi2Boolean)\n\nThe computation of a time step is started.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ncurrentCommunicationPoint::fmi2Real:  Argument currentCommunicationPoint contains a value of type fmi2Real which is a identifier for a variable value . currentCommunicationPoint defines the current communication point of the master.\ncommunicationStepSize::fmi2Real: Argument communicationStepSize contains a value of type fmi2Real which is a identifier for a variable value. communicationStepSize defines the communiction step size.\n\nnoSetFMUStatePriorToCurrentPoint::Bool = true: Argument noSetFMUStatePriorToCurrentPoint contains a value of type Boolean. If no argument is passed the default value true is used. noSetFMUStatePriorToCurrentPoint indicates whether fmi2SetFMUState is no longer called for times before the currentCommunicationPoint in this simulation run Simulation run.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.2 Computation\n\nSee also fmi2DoStep.\n\n\n\n\n\nfmi2DoStep(c::FMU2Component, \n                communicationStepSize::Union{Real, Nothing} = nothing; \n                currentCommunicationPoint::Union{Real, Nothing} = nothing,\n                noSetFMUStatePriorToCurrentPoint::Bool = true)\n\nDoes one step in the CoSimulation FMU\n\nArguments\n\nC::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ncommunicationStepSize::Union{Real, Nothing} = nothing: Argument communicationStepSize contains a value of type Real or Nothing , if no argument is passed the default value nothing is used. communicationStepSize defines the communiction step size.\n\nKeywords\n\ncurrentCommunicationPoint::Union{Real, Nothing} = nothing: Argument currentCommunicationPoint contains a value of type Real or type Nothing. If no argument is passed the default value nothing is used. currentCommunicationPoint defines the current communication point of the master.\nnoSetFMUStatePriorToCurrentPoint::Bool = true: Argument noSetFMUStatePriorToCurrentPoint contains a value of type Boolean. If no argument is passed the default value true is used. noSetFMUStatePriorToCurrentPoint indicates whether fmi2SetFMUState is no longer called for times before the currentCommunicationPoint in this simulation run Simulation run.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.2 Computation\n\nSee also fmi2DoStep.\n\n\n\n\n\nSource: FMISpec2.0.2[p.104]: 4.2.2 Computation\n\nThe computation of a time step is started.\n\n\n\n\n\nfmi2DoStep(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2DoStep(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2CancelStep","page":"FMI for Co-Simulation","title":"FMICore.fmi2CancelStep","text":"fmi2CancelStep(c::FMU2Component)\n\nCan be called if fmi2DoStep returned fmi2Pending in order to stop the current asynchronous execution.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.2 Computation\n\nSee also fmi2DoStep.\n\n\n\n\n\nSource: FMISpec2.0.2[p.105]: 4.2.2 Computation\n\nCan be called if fmi2DoStep returned fmi2Pending in order to stop the current asynchronous execution.\n\n\n\n\n\nfmi2CancelStep(fmu::FMU2)\n\nWrapper for fmi2CancelStep(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#Retrieving-Status-Information-from-the-Slave","page":"FMI for Co-Simulation","title":"Retrieving Status Information from the Slave","text":"","category":"section"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"Status information is retrieved from the slave by the following functions:","category":"page"},{"location":"fmi2_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"fmi2GetStatus!\nfmi2GetRealStatus!\nfmi2GetIntegerStatus!\nfmi2GetBooleanStatus!\nfmi2GetStringStatus!","category":"page"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2GetStatus!","page":"FMI for Co-Simulation","title":"FMICore.fmi2GetStatus!","text":"fmi2GetStatus!(c::FMU2Component, \n                    s::fmi2StatusKind, \n                    value::Ref{fmi2Status})\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ns::fmi2StatusKind: Argument s defines which status information is to be returned. fmi2StatusKind is an enumeration that defines which status is inquired.\n\nThe following status information can be retrieved from a slave:\n\nfmi2DoStepStatus::fmi2Status: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers fmi2Pending if the computation is not finished. Otherwise the function returns the result of the asynchronously executed fmi2DoStep call.\nfmi2PendingStatus::fmi2String: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers a string which informs about the status of the currently running asynchronous fmi2DoStep computation\nfmi2LastSuccessfulTime:: fmi2Real: Returns the end time of the last successfully completed communication step. Can be called after fmi2DoStep(..) returned fmi2Discard.\nfmi2Terminated::fmi2Boolean: Returns fmi2True, if the slave wants to terminate the simulation. Can be called after fmi2DoStep(..) returned fmi2Discard. Use fmi2LastSuccessfulTime to determine the time instant at which the slave terminated.\nvalue::Ref{fmi2Status}: The value argument points to a status flag that was requested.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nSee also fmi2GetStatus!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2GetRealStatus!","page":"FMI for Co-Simulation","title":"FMICore.fmi2GetRealStatus!","text":"fmi2GetRealStatus!(c::FMU2Component, \n                        s::fmi2StatusKind, \n                        value::Ref{fmi2Real})\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ns::fmi2StatusKind: Argument s defines which status information is to be returned. fmi2StatusKind is an enumeration that defines which status is inquired.\n\nThe following status information can be retrieved from a slave:\n\nfmi2DoStepStatus::fmi2Status: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers fmi2Pending if the computation is not finished. Otherwise the function returns the result of the asynchronously executed fmi2DoStep call.\nfmi2PendingStatus::fmi2String: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers a string which informs about the status of the currently running asynchronous fmi2DoStep computation\nfmi2LastSuccessfulTime:: fmi2Real: Returns the end time of the last successfully completed communication step. Can be called after fmi2DoStep(..) returned fmi2Discard.\nfmi2Terminated::fmi2Boolean: Returns fmi2True, if the slave wants to terminate the simulation. Can be called after fmi2DoStep(..) returned fmi2Discard. Use fmi2LastSuccessfulTime to determine the time instant at which the slave terminated.\nvalue::Ref{fmi2Real}: Argument value points to the return value (fmi2Real) which was requested. fmi2Real is a alias type for Real data type.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nSee also fmi2GetRealStatus!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2GetIntegerStatus!","page":"FMI for Co-Simulation","title":"FMICore.fmi2GetIntegerStatus!","text":"fmi2GetIntegerStatus!(c::FMU2Component, \n                            s::fmi2StatusKind, \n                            value::Ref{fmi2Integer})\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ns::fmi2StatusKind: Argument s defines which status information is to be returned. fmi2StatusKind is an enumeration that defines which status is inquired.\n\nThe following status information can be retrieved from a slave:\n\nfmi2DoStepStatus::fmi2Status: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers fmi2Pending if the computation is not finished. Otherwise the function returns the result of the asynchronously executed fmi2DoStep call.\nfmi2PendingStatus::fmi2String: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers a string which informs about the status of the currently running asynchronous fmi2DoStep computation\nfmi2LastSuccessfulTime:: fmi2Real: Returns the end time of the last successfully completed communication step. Can be called after fmi2DoStep(..) returned fmi2Discard.\nfmi2Terminated::fmi2Boolean: Returns fmi2True, if the slave wants to terminate the simulation. Can be called after fmi2DoStep(..) returned fmi2Discard. Use fmi2LastSuccessfulTime to determine the time instant at which the slave terminated.\nvalue::Ref{fmi2Integer}: Argument value points to the return value (fmi2Integer) which was requested. fmi2Integer is a alias type for Integer data type.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nSee also fmi2GetIntegerStatus!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2GetBooleanStatus!","page":"FMI for Co-Simulation","title":"FMICore.fmi2GetBooleanStatus!","text":"fmi2GetBooleanStatus!(c::FMU2Component, \n                        s::fmi2StatusKind, \n                        value::Ref{fmi2Boolean})\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ns::fmi2StatusKind: Argument s defines which status information is to be returned. fmi2StatusKind is an enumeration that defines which status is inquired.\n\nThe following status information can be retrieved from a slave:\n\nfmi2DoStepStatus::fmi2Status: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers fmi2Pending if the computation is not finished. Otherwise the function returns the result of the asynchronously executed fmi2DoStep call.\nfmi2PendingStatus::fmi2String: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers a string which informs about the status of the currently running asynchronous fmi2DoStep computation\nfmi2LastSuccessfulTime:: fmi2Real: Returns the end time of the last successfully completed communication step. Can be called after fmi2DoStep(..) returned fmi2Discard.\nfmi2Terminated::fmi2Boolean: Returns fmi2True, if the slave wants to terminate the simulation. Can be called after fmi2DoStep(..) returned fmi2Discard. Use fmi2LastSuccessfulTime to determine the time instant at which the slave terminated.\nvalue::Ref{fmi2Boolean}: Argument value points to the return value (fmi2Boolean) which was requested. fmi2Boolean is a alias type for Boolean data type.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nSee also fmi2GetBooleanStatus!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_CS_functions/#FMICore.fmi2GetStringStatus!","page":"FMI for Co-Simulation","title":"FMICore.fmi2GetStringStatus!","text":"fmi2GetStringStatus!(c::FMU2Component, \n                        s::fmi2StatusKind, \n                        value::Ref{fmi2String})\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ns::fmi2StatusKind: Argument s defines which status information is to be returned. fmi2StatusKind is an enumeration that defines which status is inquired.\n\nThe following status information can be retrieved from a slave:\n\nfmi2DoStepStatus::fmi2Status: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers fmi2Pending if the computation is not finished. Otherwise the function returns the result of the asynchronously executed fmi2DoStep call.\nfmi2PendingStatus::fmi2String: Can be called when the fmi2DoStep function returned fmi2Pending. The function delivers a string which informs about the status of the currently running asynchronous fmi2DoStep computation\nfmi2LastSuccessfulTime:: fmi2Real: Returns the end time of the last successfully completed communication step. Can be called after fmi2DoStep(..) returned fmi2Discard.\nfmi2Terminated::fmi2Boolean: Returns fmi2True, if the slave wants to terminate the simulation. Can be called after fmi2DoStep(..) returned fmi2Discard. Use fmi2LastSuccessfulTime to determine the time instant at which the slave terminated.\nvalue:Ref{fmi2String}: Argument value points to the return value (fmi2String) which was requested. fmi2String is a alias type for String data type.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nSee also fmi2GetStringStatus!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nInforms the master about the actual status of the simulation run. Which status information is to be returned is specified by the argument fmi2StatusKind.\n\n\n\n\n\n","category":"function"},{"location":"examples/manipulation/#Manipulate-a-function","page":"Manipulation","title":"Manipulate a function","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Tutorial by Tobias Thummerer, Johannes Stoljar","category":"page"},{"location":"examples/manipulation/#License","page":"Manipulation","title":"License","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/manipulation/#Introduction-to-the-example","page":"Manipulation","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"This example shows how to overwrite a FMI function with a custom C-function. For this the FMU model is simulated first without changes. Then the function fmi2GetReal() is overwritten and simulated again. Both simulations are displayed in a graph to show the change caused by overwriting the function. The model used is a one-dimensional spring pendulum with friction. The object-orientated structure of the SpringFrictionPendulum1D can be seen in the following graphic.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"(Image: svg)  ","category":"page"},{"location":"examples/manipulation/#Other-formats","page":"Manipulation","title":"Other formats","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/manipulation/#Code-section","page":"Manipulation","title":"Code section","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"# imports\nusing FMI\nusing FMI: fmiSetFctGetReal\nusing FMIZoo\nusing FMICore\nusing Plots","category":"page"},{"location":"examples/manipulation/#Simulation-setup","page":"Manipulation","title":"Simulation setup","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Next, the start time and end time of the simulation are set.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"tStart = 0.0\ntStop = 8.0","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"8.0","category":"page"},{"location":"examples/manipulation/#Import-FMU","page":"Manipulation","title":"Import FMU","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Next, the FMU model from FMIZoo.jl is loaded.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"# we use an FMU from the FMIZoo.jl\nfmu = fmiLoad(\"SpringFrictionPendulum1D\", \"Dymola\", \"2022x\"; type=:ME)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Model name:\tSpringFrictionPendulum1D\nType:\t\t0","category":"page"},{"location":"examples/manipulation/#Simulate-FMU","page":"Manipulation","title":"Simulate FMU","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"In the next steps the recorded value is defined. The recorded value is the position of the mass. In the function fmiSimulateME() the FMU is simulated in model-exchange mode (ME) with an adaptive step size. In addition, the start and end time and the recorded variables are specified.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"# an array of value references... or just one\nvrs = [\"mass.s\"]\n\nsimData = fmiSimulate(fmu, (tStart, tStop); recordValues=vrs)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"\u001b[34mSimulating ME-FMU ... 100%|██████████████████████████████| Time: 0:00:10\u001b[39m\n\n\n\n\n\nModel name:\n\tSpringFrictionPendulum1D\nSuccess:\n\ttrue\nf(x)-Evaluations:\n\tIn-place: 1377\n\tOut-of-place: 0\nJacobian-Evaluations:\n\t∂ẋ_∂x: 0\n\t∂ẋ_∂u: 0\n\t∂y_∂x: 0\n\t∂y_∂u: 0\n\t∂e_∂x: 0\n\t∂e_∂u: 0\nGradient-Evaluations:\n\t∂ẋ_∂t: 0\n\t∂y_∂t: 0\n\t∂e_∂t: 0\nCallback-Evaluations:\n\tCondition (event-indicators): 1717\n\tTime-Choice (event-instances): 0\n\tAffect (event-handling): 6\n\tSave values: 131\n\tSteps completed: 131\nStates [131]:\n\t0.0\t[0.5, 0.0]\n\t2.352941176471972e-11\t[0.5, 1.0e-10]\n\t0.002306805098500577\t[0.50001131604032, 0.009814511243552598]\n\t0.01777270244764722\t[0.5006746897285066, 0.0761020888387732]\n\t0.05358198534179392\t[0.5061791781920479, 0.231641032514133]\n\t0.11852691526990361\t[0.5303834643745903, 0.5124206161359472]\n\t0.1848828094709355\t[0.573492996354974, 0.7828256191561919]\n\t0.2648828094709355\t[0.6478174725986621, 1.0657732960206507]\n\t0.3448828094709355\t[0.7422425202486511, 1.2823803113750607]\n\t...\n\t8.0\t[1.0666322778272936, -7.60398591662422e-5]\nValues [131]:\n\t0.0\t(0.5,)\n\t2.352941176471972e-11\t(0.5,)\n\t0.002306805098500577\t(0.50001131604032,)\n\t0.01777270244764722\t(0.5006746897285066,)\n\t0.05358198534179392\t(0.5061791781920479,)\n\t0.11852691526990361\t(0.5303834643745903,)\n\t0.1848828094709355\t(0.573492996354974,)\n\t0.2648828094709355\t(0.6478174725986621,)\n\t0.3448828094709355\t(0.7422425202486511,)\n\t...\n\t8.0\t(1.0666322778272936,)\nEvents [6]:\n\tState-Event #11 @ 0.0s\n\tState-Event #11 @ 0.994s\n\tState-Event #19 @ 1.9883s\n\tState-Event #11 @ 2.9831s\n\tState-Event #19 @ 3.9789s\n\tState-Event #11 @ 4.977s","category":"page"},{"location":"examples/manipulation/#Plotting-FMU","page":"Manipulation","title":"Plotting FMU","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"After the simulation is finished, the result of the FMU for the model-exchange mode can be plotted. In the plot for the FMU it can be seen that the oscillation continues to decrease due to the effect of the friction. If you simulate long enough, the oscillation comes to a standstill in a certain time.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"fig = plot(simData, states=false)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"(Image: svg)","category":"page"},{"location":"examples/manipulation/#Override-Function","page":"Manipulation","title":"Override Function","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"After overwriting a function, the previous one is no longer accessible. The original function fmi2GetReal() is cached by storing the address of the pointer. The addresses of the pointers are kept in the FMU and are thus accessible.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"# save, where the original `fmi2GetReal` function was stored, so we can access it in our new function\noriginalGetReal = fmu.cGetReal","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Ptr{Nothing} @0x000000018008da60","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"To overwrite the function fmi2GetReal!(), the function header of the new custom function must be identical to the previous one. The function header looks like fmi2GetReal!(cfunc::Ptr{Nothing}, c::fmi2Component, vr::Union{Array{fmi2ValueReference}, Ptr{fmi2ValueReference}}, nvr::Csize_t, value::Union{Array{fmi2Real}, Ptr{fmi2Real}})::fmi2Status. The information how the FMI2 function are structured can be seen from FMICore.jl, the api of fmi2GetReal! or the FMI2.0.3-specification.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"In the new implementation the original function is called by the previously stored pointer. Next there is a special handling if value is a pointer to an array. In this case the pointer is treated as an array, so that the entries are accessible. Otherwise, each value in value is multiplied by two. Finally, the original state of the original function is output.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"function myGetReal!(c::fmi2Component, vr::Union{Array{fmi2ValueReference}, Ptr{fmi2ValueReference}}, \n                    nvr::Csize_t, value::Union{Array{fmi2Real}, Ptr{fmi2Real}})\n    # first, we do what the original function does\n    status = fmi2GetReal!(originalGetReal, c, vr, nvr, value)\n\n    # if we have a pointer to an array, we must interprete it as array to access elements\n    if isa(value, Ptr{fmi2Real})\n        value = unsafe_wrap(Array{fmi2Real}, value, nvr, own=false)\n    end\n\n    # now, we multiply every value by two (just for fun!)\n    for i in 1:nvr \n        value[i] *= 2.0 \n    end \n\n    # return the original status\n    return status\nend","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"myGetReal! (generic function with 1 method)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"In the next command the original function is overwritten with the new defined function, for which the command fmiSetFctGetReal() is called.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"# no we overwrite the original function\nfmiSetFctGetReal(fmu, myGetReal!)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"Ptr{Nothing} @0x000001b014240fc0","category":"page"},{"location":"examples/manipulation/#Simulate-and-Plot-FMU-with-modified-function","page":"Manipulation","title":"Simulate and Plot FMU with modified function","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"As before, the identical command is called here for simulation. This is also a model exchange simulation. Immediately afterwards, the results are added to the previous graph as a dashed line.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"simData = fmiSimulate(fmu, (tStart, tStop); recordValues=vrs)\nplot!(fig, simData; states=false, style=:dash)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"(Image: svg)","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"As expected by overwriting the function, all values are doubled.","category":"page"},{"location":"examples/manipulation/#Unload-FMU","page":"Manipulation","title":"Unload FMU","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"After plotting the data, the FMU is unloaded and all unpacked data on disc is removed.","category":"page"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"fmiUnload(fmu)","category":"page"},{"location":"examples/manipulation/#Summary","page":"Manipulation","title":"Summary","text":"","category":"section"},{"location":"examples/manipulation/","page":"Manipulation","title":"Manipulation","text":"In this tutorial it is shown how an existing function of the library can be replaced by an own implementation.","category":"page"},{"location":"library/#FMI.jl-Library-Functions","page":"User Level API - FMI.jl","title":"FMI.jl Library Functions","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"Many of the functions in this library are based on already defined functions of the FMIImport.jl library. ","category":"page"},{"location":"library/#Simulate-FMUs","page":"User Level API - FMI.jl","title":"Simulate FMUs","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmiLoad\nfmiSimulate\nfmiSimulateCS\nfmiSimulateME\nfmiUnload\nfmiReload","category":"page"},{"location":"library/#FMI.fmiLoad","page":"User Level API - FMI.jl","title":"FMI.fmiLoad","text":"fmiLoad(pathToFMU::String; unpackPath=nothing, type=nothing)\n\nLoad FMUs independent of the FMI version, currently supporting version 2.0.X and 3.0.\n\nArguments\n\npathToFMU::String: String that contains the paths of ziped and unziped FMU folders.\n\nKeywords\n\nunpackPath=nothing: Via optional argument unpackPath, a path to unpack the FMU can be specified (default: system temporary directory).\ntype::Union{CS, ME, SE} = nothing:  Via type, a FMU type can be selected. If none of the unified type set is used, the default value type = nothing will be used.\n\nReturns\n\nReturns the instance of the FMU struct.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2Load, fmi3Load.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSimulate","page":"User Level API - FMI.jl","title":"FMI.fmiSimulate","text":"fmiSimulate(str::fmi2Struct, args...; kwargs...)\n\nStart a simulation of the FMU instance str for the matching FMU version and type.\n\nWrapper for fmi2Simulate.\n\n\n\n\n\nfmiSimulate(str::fmi3Struct, args...; kwargs...)\n\nStart a simulation of the FMU instance str for the matching FMU version and type.\n\nWrapper for fmi3Simulate.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSimulateCS","page":"User Level API - FMI.jl","title":"FMI.fmiSimulateCS","text":"fmiSimulateCS(str::fmi2Struct, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing, args...; kwargs...)\n\nStart a simulation of the Co-Simulation FMU instance str.\n\nWrapper for fmi2SimulateCS.\n\n\n\n\n\nfmiSimulateCS(str::fmi3Struct, args...; kwargs...)\n\nStart a simulation of the Co-Simulation FMU instance str.\n\nWrapper for fmi3SimulateCS.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSimulateME","page":"User Level API - FMI.jl","title":"FMI.fmiSimulateME","text":"fmiSimulateME(str::Union{fmi2Struct,fmi3Struct}, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing;\n                tolerance::Union{Real, Nothing} = nothing,\n                dt::Union{Real, Nothing} = nothing,\n                solver = nothing,\n                customFx = nothing,\n                recordValues::fmi2ValueReferenceFormat = nothing,\n                saveat = nothing,\n                x0::Union{AbstractArray{<:Real}, Nothing} = nothing,\n                setup::Union{Bool, Nothing} = nothing,\n                reset::Union{Bool, Nothing} = nothing,\n                instantiate::Union{Bool, Nothing} = nothing,\n                freeInstance::Union{Bool, Nothing} = nothing,\n                terminate::Union{Bool, Nothing} = nothing,\n                inputValueReferences::fmi2ValueReferenceFormat = nothing,\n                inputFunction = nothing,\n                parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing,\n                dtmax::Union{Real, Nothing} = nothing,\n                callbacks = [],\n                showProgress::Bool = true,\n                kwargs...)\n\nSimulates a FMU instance for the given simulation time interval.\n\nArguments\n\nstr::Union{fmi2StructMD, fmi3StructMD}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component} More detailed: fmi3Struct = Union{FMU3, FMU3Instance}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\ntspan::Union{Tuple{Float64, Float64}, Nothing}=nothing: Sets the time span as a tuple or the default value from the model description is used. \n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: Real number to set the tolerance for any OED-solver\ndt::Union{Real, Nothing} = nothing: Real number to set the step size of the OED-solver. Defaults to an automatic choice if the method is adaptive. More Info: DifferentialEquations.jl Documentation\nsolver = nothing: Any Julia-supported OED-solver  (default is Tsit5). More Info: DifferentialEquations.jl Documentation\ncustomFx = nothing: [deperecated] Ability to give a custom state derivative function ẋ=f(x,t)\nrecordValues::fmi2ValueReferenceFormat = nothing: AbstractArray of variables (strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = nothing: Time points to save values at (interpolated). More Info: DifferentialEquations.jl Documentation\nx0::Union{AbstractArray{<:Real}, Nothing} = nothing: Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). And is therefore passed within prepareSolveFMU to fmi2Set , to set the start state.\nsetup::Bool = true: Boolean, if FMU should be setup (default: setup=true)\nreset::Union{Bool, Nothing} = nothing: Boolean, if FMU should be reset before simulation (default: reset:=auto)\ninstantiate::Union{Bool, Nothing} = nothing: Boolean value that decides whether to create a new instance of the specified fmu.\nfreeInstance::Union{Bool, Nothing} = nothing: Boolean value that determines whether to dispose of the given instance, unload the loaded model, and free the allocated memory and other resources allocated by the FMU interface functions.\nterminate::Union{Bool, Nothing} = nothing: Boolean value that tells the FMU that the simulation run will be aborted.\ninputValueReferences::fmi2ValueReferenceFormat = nothing: AbstractArray of input variables (strings or variableIdentifiers) to set at every simulation step\ninputFunction = nothing: Function to retrieve the values to set the inputs to\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dictionary of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\ndtmax::Union{Real, Nothing} = nothing: Real number for setting maximum dt for adaptive timestepping for the ODE solver. The default values are package dependent. More Info: DifferentialEquations.jl Documentation\ncallbacks = []: custom callbacks to add.\nshowProgress::Bool = true: Boolean value that determines whether a progress bar is generated for a task\nkwargs...: Further parameters of already defined functions solve(args..., kwargs...) from the library DifferentialEquations.jl\n\nReturns\n\nIf keyword recordValues is not set, a struct of type ODESolution.\nIf keyword recordValues is set, a tuple of type (ODESolution, DiffEqCallbacks.SavedValues).\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2SimulateME fmi2SimulateCS, fmi2Simulate, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiUnload","page":"User Level API - FMI.jl","title":"FMI.fmiUnload","text":"fmiUnload(fmu::Union{FMU2, FMU3})\n\nUnloads the FMU and all its instances and frees the allocated memory.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2Unload, fmi3Unload.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiReload","page":"User Level API - FMI.jl","title":"FMI.fmiReload","text":"fmiReload(fmu::Union{FMU2, FMU3})\n\nReloads the FMU-binary. This is useful, if the FMU does not support a clean reset implementation.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nfmu::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2Reload, fmi3Reload.\n\n\n\n\n\n","category":"function"},{"location":"library/#Handling-Value-References","page":"User Level API - FMI.jl","title":"Handling Value References","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmiStringToValueReference\nfmiGetStartValue","category":"page"},{"location":"library/#FMI.fmiStringToValueReference","page":"User Level API - FMI.jl","title":"FMI.fmiStringToValueReference","text":"fmiStringToValueReference(dataStruct::Union{FMU2, fmi2ModelDescription}, identifier::Union{String, AbstractArray{String}})\n\nWrapper for fmi2StringToValueReference.\n\nSee also fmi2ValueReferenceToString.\n\n\n\n\n\nfmiStringToValueReference(dataStruct::Union{FMU3, fmi3ModelDescription}, identifier::Union{String, AbstractArray{String}})\n\nWrapper for fmi3StringToValueReference.\n\nSee also fmi3ValueReferenceToString.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGetStartValue","page":"User Level API - FMI.jl","title":"FMI.fmiGetStartValue","text":"fmiGetStartValue(s::fmi2Struct, vr::fmi2ValueReferenceFormat)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\nvrs::fmi2ValueReferenceFormat = md.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nstarts::Array{fmi2ValueReferenceFormat}: start/default value for a given value reference\n\n\n\n\n\n","category":"function"},{"location":"library/#External/additional-functions","page":"User Level API - FMI.jl","title":"External/additional functions","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmiInfo\nfmiSet\nfmiGet\nfmiGet!\nfmiGetNumberOfStates\nfmiCanGetSetState\nfmiGetState\nfmiSetState\nfmiFreeState!\nfmiGetDependencies\nfmiProvidesDirectionalDerivative\nfmiGetModelName\nfmiGetGUID\nfmiIsCoSimulation\nfmiIsModelExchange\nfmiIsScheduledExecution","category":"page"},{"location":"library/#FMI.fmiInfo","page":"User Level API - FMI.jl","title":"FMI.fmiInfo","text":"fmiInfo(str::fmi2Struct)\n\nPrints FMU-specific information into the REPL.\n\nArguments\n\nstr::Union{fmi2Struct, fmi3Struct}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component} More detailed: fmi3StructMD = Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\n\nReturns\n\nPrints FMU related information.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec3.0 Link: https://fmi-standard.org/\n\nSee also fmi2Info, fmi2Struct, FMU2, FMU2Component, fmi3Info, fmi3Struct, FMU3, FMU3Instance.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSet","page":"User Level API - FMI.jl","title":"FMI.fmiSet","text":"fmiSet(str::fmi2Struct, comp::FMU2Component, vrs::fmi2ValueReferenceFormat, srcArray::AbstractArray; filter=nothing)\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nsrcArray::AbstractArray: Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). srcArray has the same length as vrs.\n\nKeywords\n\nfilter=nothing: whether the individual values of \"fmi2ScalarVariable\" are to be stored\n\nReturns\n\nretcodes::Array{fmi2Status}: Returns an array of length length(vrs) with Type fmi2Status. Type fmi2Status is an enumeration and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGet","page":"User Level API - FMI.jl","title":"FMI.fmiGet","text":"fmiGet(str::fmi2Struct, comp::FMU2Component, vrs::fmi2ValueReferenceFormat)\n\nReturns the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference in an array.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvrs::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\ndstArray::Array{Any,1}(undef, length(vrs)): Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). dstArray is a 1-Dimensional Array that has the same length as vrs.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGet!","page":"User Level API - FMI.jl","title":"FMI.fmiGet!","text":"fmiGet!(str::fmi2Struct, comp::FMU2Component, vrs::fmi2ValueReferenceFormat, dstArray::AbstractArray)\n\nStors the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference in an array.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ndstArray::AbstractArray: Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). dstArray has the same length as vrs.\n\nReturns\n\nretcodes::Array{fmi2Status}: Returns an array of length length(vrs) with Type fmi2Status. Type fmi2Status is an enumeration and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGetNumberOfStates","page":"User Level API - FMI.jl","title":"FMI.fmiGetNumberOfStates","text":"fmiGetNumberOfStates(str::Union{fmi2Struct, fmi3Struct})\n\nReturns the number of states of the FMU.\n\nArguments\n\nstr::Union{fmi2Struct, fmi3Struct}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component} More detailed: fmi3StructMD = Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\n\nReturns\n\nReturns the length of the md.valueReferences::Array{fmi2ValueReference} corresponding to the number of states of the FMU.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2GetNumberOfStates, fmi2Struct, FMU2, FMU2Component, , fmi3Struct, FMU3, FMU3Instance.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiCanGetSetState","page":"User Level API - FMI.jl","title":"FMI.fmiCanGetSetState","text":"fmiCanGetSetState(str::Union{fmi2StructMD, fmi3StructMD})\n\nReturns true, if the FMU supports the getting/setting of states\n\nArguments\n\nstr::Union{fmi2StructMD, fmi3StructMD}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription} More detailed: fmi3StructMD =  Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\nstr::fmi3ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2CanGetSetState returns True, if the FMU supports the getting/setting of states.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2CanGetSetState, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription, fmi3CanGetSetState, fmi3StructMD, FMU3, FMU3Instance, fmi3ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGetState","page":"User Level API - FMI.jl","title":"FMI.fmiGetState","text":"fmiGetState(str::fmi2Struct)\n\nWrapper for fmi2GetFMUstate.\n\nSee also fmiSetState, fmiFreeState!.\n\n\n\n\n\nfmiGetState(str::fmi3Struct)\n\nWrapper for fmi3GetFMUState.\n\nSee also fmiSetState, fmiFreeState!.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSetState","page":"User Level API - FMI.jl","title":"FMI.fmiSetState","text":"fmiSetState(str::fmi2Struct, args...; kwargs...)\n\nWrapper for fmi2SetFMUstate.\n\nSee also fmiGetState, fmiFreeState!.\n\n\n\n\n\nfmiSetState(str::fmi3Struct, args...; kwargs...)\n\nWrapper for fmi3SetFMUState.\n\nSee also fmiGetState, fmiFreeState!.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiFreeState!","page":"User Level API - FMI.jl","title":"FMI.fmiFreeState!","text":"fmiFreeState!(str::fmi2Struct, args...; kwargs...)\n\nWrapper for fmi2FreeFMUstate!.\n\nSee also fmiSetState, fmiGetState.\n\n\n\n\n\nfmiFreeState!(str::fmi3Struct, args...; kwargs...)\n\nWrapper for fmi3FreeFMUState!.\n\nSee also fmiSetState, fmiGetState.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGetDependencies","page":"User Level API - FMI.jl","title":"FMI.fmiGetDependencies","text":"fmiGetDependencies(fmu::FMU2)\n\nWrapper for fmi2GetDependencies.\n\n\n\n\n\nfmiGetDependencies(fmu::FMU3)\n\nWrapper for fmi3GetDependencies.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiProvidesDirectionalDerivative","page":"User Level API - FMI.jl","title":"FMI.fmiProvidesDirectionalDerivative","text":"fmiProvidesDirectionalDerivative(str::Union{fmi2StructMD, fmi3StructMD})\n\nReturns true, if the FMU provides directional derivatives\n\nArguments\n\nstr::Union{fmi2StructMD, fmi3StructMD}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription} More detailed: fmi3StructMD =  Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\nstr::fmi3ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2ProvidesDirectionalDerivative returns True, if the FMU provides directional derivatives.\n\nSee also fmi2ProvidesDirectionalDerivative, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription, fmi3ProvidesDirectionalDerivatives, fmi3StructMD, FMU3, FMU3Instance, fmi3ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGetModelName","page":"User Level API - FMI.jl","title":"FMI.fmiGetModelName","text":"fmiGetModelName(str::fmi2StructMD)\n\nReturn the modelName from str's model description.\n\nWrapper for fmi2GetModelName.\n\n\n\n\n\nfmiGetModelName(str::fmi3StructMD)\n\nReturn the modelName from str's model description.\n\nWrapper for fmi3GetModelName.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiGetGUID","page":"User Level API - FMI.jl","title":"FMI.fmiGetGUID","text":"fmiGetGUID(str::fmi2StructMD)\n\nReturn the guid from str's model description.\n\nWrapper for fmi2GetGUID.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiIsCoSimulation","page":"User Level API - FMI.jl","title":"FMI.fmiIsCoSimulation","text":"fmiIsCoSimulation(str::Union{fmi2StructMD, fmi3StructMD})\n\nReturns true, if the FMU supports co simulation\n\nArguments\n\nstr::Union{fmi2StructMD, fmi3StructMD}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2StructMD = Union{FMU2, FMU2Component, fmi2ModelDescription} More detailed: fmi3StructMD =  Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\nstr::fmi3ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2IsCoSimulation returns True, if the FMU supports co simulation\n\nSee also fmi2IsCoSimulation, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription, fmi3IsCoSimulation, fmi3StructMD, FMU3, FMU3Instance, fmi3ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiIsModelExchange","page":"User Level API - FMI.jl","title":"FMI.fmiIsModelExchange","text":"fmiIsModelExchange(str::Union{fmi2StructMD, fmi3StructMD})\n\nReturns true, if the FMU supports model exchange\n\nArguments\n\nstr::Union{fmi2StructMD, fmi3StructMD}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi2StructMD = Union{FMU2, FMU2Component, fmi2ModelDescription} More detailed: fmi3StructMD = Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\nstr::fmi3ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2IsModelExchange returns True, if the FMU supports model exchange.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2IsModelExchange, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription, fmi3IsModelExchange, fmi3StructMD, FMU3, FMU3Instance, fmi3ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiIsScheduledExecution","page":"User Level API - FMI.jl","title":"FMI.fmiIsScheduledExecution","text":"fmiIsScheduledExecution(str::fmi3StructMD)\n\nReturns true, if the FMU supports scheduled execution\n\nArguments\n\nstr::fmi3StructMD:  Representative for an FMU in the FMI 3.0 Standard. Other notation:\n\nMore detailed: fmi3StructMD =  Union{FMU3, FMU3Instance, fmi3ModelDescription}\n\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Instance:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\nstr::fmi3ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi3IsScheduledExecution returns True, if the FMU supports scheduled execution.\n\nSee also fmi3IsScheduledExecution, fmi3StructMD, FMU3, FMU3Instance, fmi3ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/#Visualize-simulation-results","page":"User Level API - FMI.jl","title":"Visualize simulation results","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmiPlot\nfmiPlot!\nPlots.plot","category":"page"},{"location":"library/#FMI.fmiPlot","page":"User Level API - FMI.jl","title":"FMI.fmiPlot","text":"fmiPlot(solution::FMUSolution; kwargs...)\n\nCreate a figure and fmiPlot!'s the solution of a FMU simulation with the kwargs into it and returns the figure.  (requires Package Plots in Julia Environment)\n\nSee also fmiPlot!\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiPlot!","page":"User Level API - FMI.jl","title":"FMI.fmiPlot!","text":"fmiPlot!(fig::Plots.Plot, solution::FMUSolution; \n            [states::Union{Bool, Nothing}=nothing,\n            values::Union{Bool, Nothing}=nothing,\n            stateEvents::Union{Bool, Nothing}=nothing,\n            timeEvents::Union{Bool, Nothing}=nothing,\n            stateIndices=nothing,\n            valueIndices=nothing,\n            maxLabelLength=64,\n            plotkwargs...])\n\nPlot the solution of a FMU simulation into fig and return the figure.\n\nArguments\n\nfig::Plots.Plot: Figure to plot into\nsolution::FMUSolution: Struct containing information about the solutions values, success, states and events of a specific FMU simulation.\nstates::Union{Bool, Nothing}=nothing: controls if states should be plotted (default = nothing: plot states from solution, as long as they exist)\nvalues::Union{Bool, Nothing}=nothing: controls if values should be plotted (default = nothing: plot values from solution, as long as they exist)\nstateEvents::Union{Bool, Nothing}=nothing: controls if stateEvents should be plotted (default = nothing: plot stateEvents from solution, if at least one and at most 100 exist)\ntimeEvents::Union{Bool, Nothing}=nothing: controls if timeEvents should be plotted (default = nothing: plot timeEvents from solution, if at least one and at most 100 exist)\nstateIndices=nothing: controls which states will be plotted by index in state vector (default = nothing: plot all states)\nvalueIndices=nothing: controls which values will be plotted by index (default = nothing: plot all values)\nmaxLabelLength=64: controls the maximum length for legend labels (too long labels are cut from front)\nplotkwargs...: Arguments, that are passed on to Plots.plot!\n\nSee also fmiPlot\n\n\n\n\n\n","category":"function"},{"location":"library/#RecipesBase.plot","page":"User Level API - FMI.jl","title":"RecipesBase.plot","text":"Plots.plot(solution::FMUSolution; kwargs...)\nPlots.plot!(fig::Plots.Plot, solution::FMUSolution; kwargs...)\n\nPlot FMUs using the original plot-command from Plots.\n\nSee also fmiPlot, fmiPlot!.\n\n\n\n\n\n","category":"function"},{"location":"library/#Save/load-simulation-results","page":"User Level API - FMI.jl","title":"Save/load simulation results","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmiSaveSolution\nfmiSaveSolutionJLD2\nfmiSaveSolutionMAT\nfmiSaveSolutionCSV\nfmiLoadSolution\nfmiLoadSolutionJLD2","category":"page"},{"location":"library/#FMI.fmiSaveSolution","page":"User Level API - FMI.jl","title":"FMI.fmiSaveSolution","text":"fmiSaveSolution(solution::FMUSolution, filepath::AbstractString [; keyword=\"solution\"])\n\nSave a solution of an FMU simulation at filepath.\n\nCurrently .mat, .jld2 and .csv are supported for saving and selected by the ending of filepath. For JLD2 the keyword is used as key. Loading a FMUSolution into FMI.jl is currently only possible for .jld2 files.\n\nSee also fmiSaveSolutionCSV, fmiSaveSolutionMAT, fmiSaveSolutionJLD2, fmiLoadSolutionJLD2.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSaveSolutionJLD2","page":"User Level API - FMI.jl","title":"FMI.fmiSaveSolutionJLD2","text":"fmiSaveSolutionJLD2(solution::FMUSolution, filepath::AbstractString; keyword=\"solution\")\n\nSave a solution of an FMU simulation under keyword in a jld2 file at filepath.  (requires Package JLD2 in Julia Environment)\n\nSee also fmiSaveSolutionCSV, fmiSaveSolutionMAT, fmiLoadSolutionJLD2.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSaveSolutionMAT","page":"User Level API - FMI.jl","title":"FMI.fmiSaveSolutionMAT","text":"fmiSaveSolutionMAT(solution::FMUSolution, filepath::AbstractString)\n\nSave a solution of an FMU simulation as mat file at filepath.  (requires Package MAT in Julia Environment)\n\nSee also fmiSaveSolutionCSV, fmiSaveSolutionJLD2, fmiLoadSolutionJLD2.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiSaveSolutionCSV","page":"User Level API - FMI.jl","title":"FMI.fmiSaveSolutionCSV","text":"fmiSaveSolutionCSV(solution::FMUSolution, filepath::AbstractString)\n\nSave a solution of an FMU simulation as csv file at filepath.  (requires Package CSV in Julia Environment)\n\nSee also fmiSaveSolutionMAT, fmiSaveSolutionJLD2, fmiLoadSolutionJLD2.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiLoadSolution","page":"User Level API - FMI.jl","title":"FMI.fmiLoadSolution","text":"fmiLoadSolution(filepath::AbstractString; keyword=\"solution\")\n\nWrapper for fmiLoadSolutionJLD2.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmiLoadSolutionJLD2","page":"User Level API - FMI.jl","title":"FMI.fmiLoadSolutionJLD2","text":"fmiLoadSolutionJLD2(filepath::AbstractString; keyword=\"solution\")\n\nLoad a FMUSolution from jld2 file at filepath using keyword as jld2 keyword.  (requires Package JLD2 in Julia Environment)\n\nSee also fmiSaveSolutionCSV, fmiSaveSolutionMAT, fmiSaveSolutionJLD2.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI2-specific","page":"User Level API - FMI.jl","title":"FMI2 specific","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmi2Info\nfmi2Simulate\nfmi2SimulateME\nfmi2SimulateCS\nfmi2VariableDependsOnVariable\nfmi2GetDependencies\nfmi2PrintDependencies","category":"page"},{"location":"library/#FMI.fmi2Info","page":"User Level API - FMI.jl","title":"FMI.fmi2Info","text":" fmi2Info(fmu::FMU2)\n\nPrint information about the fmu.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi2Simulate","page":"User Level API - FMI.jl","title":"FMI.fmi2Simulate","text":"fmi2Simulate(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2Simulate(fmu::FMU2, c::Union{FMU2Component, Nothing}, args...; kwargs...) without a provided FMU2Component. (Component c gets passed as nothing)\n\n\n\n\n\nfmi2Simulate(c::FMU2Component, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing; kwargs...)\n\nWrapper for fmi2Simulate(fmu::FMU2, c::Union{FMU2Component, Nothing}, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing; kwargs...) without a provided FMU2. (FMU2 fmu is taken from c)\n\n\n\n\n\nfmi2Simulate(args...)\n\nStarts a simulation of the FMU2 for the matching type (fmi2SimulateCS(args...) or fmi2SimulateME(args...)); if both types are available, CS is preferred.\n\nSee also fmi2SimulateCS, fmi2SimulateME.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi2SimulateME","page":"User Level API - FMI.jl","title":"FMI.fmi2SimulateME","text":"fmi2SimulateME(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SimulateME(fmu::FMU2, c::Union{FMU2Component, Nothing}, args...; kwargs...) without a provided FMU2Component. (Component c gets passed as nothing)\n\n\n\n\n\nfmi2SimulateME(c::FMU2Component, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing; kwargs...)\n\nWrapper for fmi2SimulateME(fmu::FMU2, c::Union{FMU2Component, Nothing}, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing; kwargs...) without a provided FMU2. (FMU2 fmu is taken from c)\n\n\n\n\n\nfmi2SimulateME(fmu::FMU2, \n            c::Union{FMU2Component, Nothing}=nothing, \n            tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing;\n            [tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            solver = nothing,\n            customFx = nothing,\n            recordValues::fmi2ValueReferenceFormat = nothing,\n            recordEventIndicators::Union{AbstractArray{<:Integer, 1}, UnitRange{<:Integer}, Nothing} = nothing,\n            recordEigenvalues::Bool=false,\n            saveat = nothing,\n            x0::Union{AbstractArray{<:Real}, Nothing} = nothing,\n            setup::Union{Bool, Nothing} = nothing,\n            reset::Union{Bool, Nothing} = nothing,\n            instantiate::Union{Bool, Nothing} = nothing,\n            freeInstance::Union{Bool, Nothing} = nothing,\n            terminate::Union{Bool, Nothing} = nothing,\n            inputValueReferences::fmi2ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing,\n            dtmax::Union{Real, Nothing} = nothing,\n            callbacksBefore = [],\n            callbacksAfter = [],\n            showProgress::Bool = true,\n            kwargs...])\n\nSimulate ME-FMU for the given simulation time interval.\n\nState- and Time-Events are handled correctly.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances.\nc::Union{FMU2Component, Nothing}=nothing: Mutable struct representing an instantiated instance of a FMU.\ntspan::Union{Tuple{Float64, Float64}, Nothing}=nothing: Simulation-time-span as tuple (default = nothing: use default value from fmu's model description or (0.0, 1.0))\ntolerance::Union{Real, Nothing} = nothing: tolerance for the solver (default = nothing: use default value from fmu's model description or -if not available- default from DifferentialEquations.jl)\ndt::Union{Real, Nothing} = nothing: stepszie for the solver (default = nothing: use default value from fmu's model description or -if not available- default from DifferentialEquations.jl)\nsolver = nothing: Any Julia-supported ODE-solver (default = nothing: use DifferentialEquations.jl default solver)\ncustomFx: [deprecated] custom state derivative function ẋ=f(x,t)\nrecordValues::fmi2ValueReferenceFormat = nothing: Array of variables (Strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nrecordEventIndicators::Union{AbstractArray{<:Integer, 1}, UnitRange{<:Integer}, Nothing} = nothing: Array or Range of event indicators to record\nrecordEigenvalues::Bool=false: compute and record eigenvalues\nsaveat = nothing: Time points to save (interpolated) values at (default = nothing: save at each solver timestep)\nx0::Union{AbstractArray{<:Real}, Nothing} = nothing: inital fmu State (default = nothing: use current or default-inital fmu state)\nsetup::Union{Bool, Nothing} = nothing: call fmi2SetupExperiment, fmi2EnterInitializationMode and fmi2ExitInitializationMode before each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\nreset::Union{Bool, Nothing} = nothing: call fmi2Reset before each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\ninstantiate::Union{Bool, Nothing} = nothing: call fmi2Instantiate! before each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\nfreeInstance::Union{Bool, Nothing} = nothing: call fmi2FreeInstance after each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\nterminate::Union{Bool, Nothing} = nothing: call fmi2Terminate after each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\ninputValueReferences::fmi2ValueReferenceFormat = nothing: Input variables (Strings or variableIdentifiers) to set at each simulation step \ninputFunction = nothing: Function to get values for the input variables at each simulation step. \nPattern [c: current component, u: current state ,t: current time, returning array of values to be passed to fmi2SetReal(..., inputValueReferences, inputFunction(...))]:\ninputFunction(t::fmi2Real)\ninputFunction(c::FMU2Component, t::fmi2Real)\ninputFunction(c::FMU2Component, u::Union{AbstractArray{fmi2Real,1}, Nothing})\ninputFunction(u::Union{AbstractArray{fmi2Real,1}, Nothing}, t::fmi2Real)\ninputFunction(c::FMU2Component, u::Union{AbstractArray{fmi2Real,1}, Nothing}, t::fmi2Real)\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dict of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\ndtmax::Union{Real, Nothing} = nothing: sets the maximum stepszie for the solver (default = nothing: use (Simulation-time-span-length)/100.0)\ncallbacksBefore = [], callbacksAfter = []: functions that are to be called before and after internal time-event-, state-event- and step-event-callbacks are called\nshowProgress::Bool = true: print simulation progressmeter in REPL\nkwargs...: keyword arguments that get passed onto the solvers solve call\n\nReturns:\n\nIf keyword recordValues has value nothing, a struct of type ODESolution.\nIf keyword recordValues is set, a tuple of type (ODESolution, DiffEqCallbacks.SavedValues).\n\nSee also fmi2Simulate, fmi2SimulateCS.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi2SimulateCS","page":"User Level API - FMI.jl","title":"FMI.fmi2SimulateCS","text":"fmi2SimulateCS(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SimulateCS(fmu::FMU2, c::Union{FMU2Component, Nothing}, args...; kwargs...) without a provided FMU2Component. (Component c gets passed as nothing)\n\n\n\n\n\nfmi2SimulateCS(c::FMU2Component, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing; kwargs...)\n\nWrapper for fmi2SimulateCS(fmu::FMU2, c::Union{FMU2Component, Nothing}, tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing; kwargs...) without a provided FMU2. (FMU2 fmu is taken from c)\n\n\n\n\n\nfmi2SimulateCS(fmu::FMU2, \n            c::Union{FMU2Component, Nothing}=nothing, \n            tspan::Union{Tuple{Float64, Float64}, Nothing}=nothing;\n            [tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            recordValues::fmi2ValueReferenceFormat = nothing,\n            saveat = [],\n            setup::Union{Bool, Nothing} = nothing,\n            reset::Union{Bool, Nothing} = nothing,\n            instantiate::Union{Bool, Nothing} = nothing,\n            freeInstance::Union{Bool, Nothing} = nothing,\n            terminate::Union{Bool, Nothing} = nothing,\n            inputValueReferences::fmi2ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            showProgress::Bool=true,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing])\n\nSimulate CS-FMU for the given simulation time interval.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances.\nc::Union{FMU2Component, Nothing}=nothing: Mutable struct representing an instantiated instance of a FMU.\ntspan::Union{Tuple{Float64, Float64}, Nothing}=nothing: Simulation-time-span as tuple (default = nothing: use default value from fmu's model description or (0.0, 1.0))\ntolerance::Union{Real, Nothing} = nothing: tolerance for the solver (default = nothing: use default value from fmu's model description or 0.0)\ndt::Union{Real, Nothing} = nothing: stepszie for the solver (default = nothing: use default value from fmu's model description or 1e-3)\nrecordValues::fmi2ValueReferenceFormat = nothing: Array of variables (Strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = nothing: Time points to save values at (default = nothing: save at each communication timestep)\nsetup::Union{Bool, Nothing} = nothing: call fmi2SetupExperiment, fmi2EnterInitializationMode and fmi2ExitInitializationMode before each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\nreset::Union{Bool, Nothing} = nothing: call fmi2Reset before each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\ninstantiate::Union{Bool, Nothing} = nothing: call fmi2Reset before each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\nfreeInstance::Union{Bool, Nothing} = nothing: call fmi2FreeInstance after each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\nterminate::Union{Bool, Nothing} = nothing: call fmi2Terminate after each step (default = nothing: use value from fmu's FMU2ExecutionConfiguration)\ninputValueReferences::fmi2ValueReferenceFormat = nothing: Input variables (Strings or variableIdentifiers) to set at each communication step \ninputFunction = nothing: Function to get values for the input variables at each communication step. \nPattern [c: current component, t: current time, returning array of values to be passed to fmi2SetReal(..., inputValueReferences, inputFunction(...))]:\ninputFunction(t::fmi2Real)\ninputFunction(c::FMU2Component, t::fmi2Real)\nshowProgress::Bool = true: print simulation progressmeter in REPL\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dict of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\n\nReturns:\n\nfmusol::FMU2Solution, containing bool fmusol.success and if keyword recordValues is set, the saved values as fmusol.values.\n\nSee also fmi2Simulate, fmi2SimulateME.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi2VariableDependsOnVariable","page":"User Level API - FMI.jl","title":"FMI.fmi2VariableDependsOnVariable","text":"fmi2VariableDependsOnVariable(fmu::FMU2, vr1::fmi2ValueReference, vr2::fmi2ValueReference)\n\nReturn the dependence of the variable described by vr1 on another variable described by vr2 based on the model description of the fmu.\n\nSee also fmi2GetDependencies.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi2GetDependencies","page":"User Level API - FMI.jl","title":"FMI.fmi2GetDependencies","text":"fmi2GetDependencies(fmu::FMU2)\n\nBuild dependency Matrix{Union{fmi2DependencyKind, Nothing}} of dimension n x n for fast look-ups on dependencies between value references (n is number of states of the fmu).\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2PrintDependencies, fmi2VariableDependsOnVariable.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi2PrintDependencies","page":"User Level API - FMI.jl","title":"FMI.fmi2PrintDependencies","text":"fmi2PrintDependencies(fmu::FMU2)\n\nPrint the dependency matrix for fmu as returned by fmi2GetDependencies.\n\nSee also fmi2GetDependencies.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI3-specific","page":"User Level API - FMI.jl","title":"FMI3 specific","text":"","category":"section"},{"location":"library/","page":"User Level API - FMI.jl","title":"User Level API - FMI.jl","text":"fmi3Info\nfmi3Simulate\nfmi3SimulateME\nfmi3SimulateSE\nfmi3SimulateCS\nfmi3VariableDependsOnVariable\nfmi3GetDependencies\nfmi3PrintDependencies","category":"page"},{"location":"library/#FMI.fmi3Info","page":"User Level API - FMI.jl","title":"FMI.fmi3Info","text":" fmi3Info(fmu::FMU3)\n\nPrint information about the fmu.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3Simulate","page":"User Level API - FMI.jl","title":"FMI.fmi3Simulate","text":"fmi3Simulate(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3Simulate(fmu::FMU3, c::Union{FMU3Instance, Nothing}, args...; kwargs...) without a provided FMU3Instance. (Instance c gets passed as nothing)\n\n\n\n\n\nfmi3Simulate(c::FMU3Instance, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing; kwargs...)\n\nWrapper for fmi3Simulate(fmu::FMU3, c::Union{FMU3Instance, Nothing}=nothing, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing; kwargs...) without a provided FMU3. (FMU3 fmu is taken from c)\n\n\n\n\n\nfmi3Simulate(args...)\n\nStarts a simulation of the FMU3 for the matching type (fmi3SimulateCS(args...), fmi3SimulateME(args...) or fmi3SimulateSE(args...)); if multiple types are available, CS is preferred over ME, over SE.\n\nSee also fmi3SimulateCS, fmi3SimulateME, fmi3SimulateSE.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3SimulateME","page":"User Level API - FMI.jl","title":"FMI.fmi3SimulateME","text":"fmi3SimulateME(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SimulateME(fmu::FMU3, c::Union{FMU3Instance, Nothing}, args...; kwargs...) without a provided FMU3Instance. (Instance c gets passed as nothing)\n\n\n\n\n\nfmi3SimulateME(c::FMU3Instance, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing; kwargs...)\n\nWrapper for fmi3SimulateME(fmu::FMU3, c::Union{FMU3Instance, Nothing}, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing; kwargs...) without a provided FMU3. (FMU3 fmu is taken from c)\n\n\n\n\n\nfmi3SimulateME(fmu::FMU3, \n            c::Union{FMU3Instance, Nothing}=nothing, \n            t_start::Union{Real, Nothing} = nothing, \n            t_stop::Union{Real, Nothing} = nothing;\n            [tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            solver = nothing,\n            customFx = nothing,\n            recordValues::fmi3ValueReferenceFormat = nothing,\n            saveat = nothing,\n            x0::Union{AbstractArray{<:Real}, Nothing} = nothing,\n            setup::Union{Bool, Nothing} = nothing,\n            reset::Union{Bool, Nothing} = nothing,\n            instantiate::Union{Bool, Nothing} = nothing,\n            freeInstance::Union{Bool, Nothing} = nothing,\n            terminate::Union{Bool, Nothing} = nothing,\n            inputValueReferences::fmi3ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing,\n            dtmax::Union{Real, Nothing} = nothing,\n            callbacks = [],\n            showProgress::Bool = true,\n            kwargs...])\n\nSimulate ME-FMU for the given simulation time interval.\n\nState- and Time-Events are handled correctly.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances.\nc::Union{FMU3Instance, Nothing}=nothing: Mutable struct representing an instantiated instance of a FMU.\nt_start::Union{Real, Nothing} = nothing: Simulation-time-span start time (default = nothing: use default value from fmu's model description or 0.0)\nt_stop::Union{Real, Nothing} = nothing: Simulation-time-span stop time (default = nothing: use default value from fmu's model description or 1.0)\ntolerance::Union{Real, Nothing} = nothing: tolerance for the solver (default = nothing: use default value from fmu's model description or -if not available- default from DifferentialEquations.jl)\ndt::Union{Real, Nothing} = nothing: stepszie for the solver (default = nothing: use default value from fmu's model description or -if not available- default from DifferentialEquations.jl)\nsolver = nothing: Any Julia-supported ODE-solver (default = nothing: use DifferentialEquations.jl default solver)\ncustomFx: [deprecated] custom state derivative function ẋ=f(x,t)\nrecordValues::fmi3ValueReferenceFormat = nothing: Array of variables (Strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = nothing: Time points to save (interpolated) values at (default = nothing: save at each solver timestep)\nx0::Union{AbstractArray{<:Real}, Nothing} = nothing: inital fmu State (default = nothing: use current or default-inital fmu state)\nsetup::Union{Bool, Nothing} = nothing: call fmi3EnterInitializationMode and fmi3ExitInitializationMode before each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\nreset::Union{Bool, Nothing} = nothing: call fmi3Reset before each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\ninstantiate::Union{Bool, Nothing} = nothing: call fmi3Instantiate<FMU-Type>! before each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\nfreeInstance::Union{Bool, Nothing} = nothing: call fmi3FreeInstance after each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\nterminate::Union{Bool, Nothing} = nothing: call fmi3Terminate after each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\ninputValueReferences::fmi3ValueReferenceFormat = nothing: Input variables (Strings or variableIdentifiers) to set at each simulation step \ninputFunction = nothing: Function to get values for the input variables at each simulation step. \nPattern [c: current instance, u: current state ,t: current time, returning array of values to be passed to fmi3SetFloat64(..., inputValueReferences, inputFunction(...))]:\ninputFunction(t::fmi3Float64)\ninputFunction(c::FMU3Instance, t::fmi3Float64)\ninputFunction(c::FMU3Instance, u::Union{AbstractArray{fmi3Float64,1}, Nothing})\ninputFunction(u::Union{AbstractArray{fmi3Float64,1}, Nothing}, t::fmi3Float64)\ninputFunction(c::FMU3Instance, u::Union{AbstractArray{fmi3Float64,1}, Nothing}, t::fmi3Float64)\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dict of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\ndtmax::Union{Real, Nothing} = nothing: sets the maximum stepszie for the solver (default = nothing: use (Simulation-time-span-length)/100.0)\ncallbacks = []: functions that are to be called at each solver time step\nshowProgress::Bool = true: print simulation progressmeter in REPL\nkwargs...: keyword arguments that get passed onto the solvers solve call\n\nReturns:\n\nIf keyword recordValues has value nothing, a struct of type ODESolution.\nIf keyword recordValues is set, a tuple of type (ODESolution, DiffEqCallbacks.SavedValues).\n\nSee also fmi3Simulate, fmi3SimulateCS, fmi3SimulateSE.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3SimulateSE","page":"User Level API - FMI.jl","title":"FMI.fmi3SimulateSE","text":"fmi3SimulateSE(fmu::FMU3, \n            c::Union{FMU3Instance, Nothing}=nothing, \n            t_start::Union{Real, Nothing} = nothing, \n            t_stop::Union{Real, Nothing} = nothing;\n            [tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            recordValues::fmi3ValueReferenceFormat = nothing,\n            saveat = [],\n            setup::Union{Bool, Nothing} = nothing,\n            reset::Union{Bool, Nothing} = nothing,\n            instantiate::Union{Bool, Nothing} = nothing,\n            freeInstance::Union{Bool, Nothing} = nothing,\n            terminate::Union{Bool, Nothing} = nothing,\n            inputValueReferences::fmi3ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            showProgress::Bool=true,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing])\n\nSimulate SE-FMU; not yet implemented in library\n\nSee also fmi3Simulate, fmi3SimulateME, fmi3SimulateCS.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3SimulateCS","page":"User Level API - FMI.jl","title":"FMI.fmi3SimulateCS","text":"fmi3SimulateCS(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SimulateCS(fmu::FMU3, c::Union{FMU3Instance, Nothing}, args...; kwargs...) without a provided FMU3Instance. (Instance c gets passed as nothing)\n\n\n\n\n\nfmi3SimulateCS(c::FMU3Instance, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing; kwargs...)\n\nWrapper for fmi3SimulateCS(fmu::FMU3, c::Union{FMU3Instance, Nothing}=nothing, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing; kwargs...) without a provided FMU3. (FMU3 fmu is taken from c)\n\n\n\n\n\nfmi3SimulateCS(fmu::FMU3, \n            c::Union{FMU3Instance, Nothing}=nothing, \n            t_start::Union{Real, Nothing} = nothing, \n            t_stop::Union{Real, Nothing} = nothing;\n            [tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            recordValues::fmi3ValueReferenceFormat = nothing,\n            saveat = [],\n            setup::Union{Bool, Nothing} = nothing,\n            reset::Union{Bool, Nothing} = nothing,\n            instantiate::Union{Bool, Nothing} = nothing,\n            freeInstance::Union{Bool, Nothing} = nothing,\n            terminate::Union{Bool, Nothing} = nothing,\n            inputValueReferences::fmi3ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            showProgress::Bool=true,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing])\n\nSimulate CS-FMU for the given simulation time interval.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances.\nc::Union{FMU3Instance, Nothing}=nothing: Mutable struct representing an instantiated instance of a FMU.\nt_start::Union{Real, Nothing} = nothing: Simulation-time-span start time (default = nothing: use default value from fmu's model description or 0.0)\nt_stop::Union{Real, Nothing} = nothing: Simulation-time-span stop time (default = nothing: use default value from fmu's model description or 1.0)\ntolerance::Union{Real, Nothing} = nothing: tolerance for the solver (default = nothing: use default value from fmu's model description or 0.0)\ndt::Union{Real, Nothing} = nothing: stepszie for the solver (default = nothing: use default value from fmu's model description or 1e-3)\nsolver = nothing: Any Julia-supported ODE-solver (default = nothing: use DifferentialEquations.jl default solver)\nrecordValues::fmi3ValueReferenceFormat = nothing: Array of variables (Strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = nothing: Time points to save values at (default = nothing: save at each communication timestep)\nsetup::Union{Bool, Nothing} = nothing: call fmi3EnterInitializationMode and fmi3ExitInitializationMode before each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\nreset::Union{Bool, Nothing} = nothing: call fmi3Reset before each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\ninstantiate::Union{Bool, Nothing} = nothing: call fmi3Instantiate<FMU-Type>! before each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\nfreeInstance::Union{Bool, Nothing} = nothing: call fmi3FreeInstance after each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\nterminate::Union{Bool, Nothing} = nothing: call fmi3Terminate after each step (default = nothing: use value from fmu's FMU3ExecutionConfiguration)\ninputValueReferences::fmi3ValueReferenceFormat = nothing: Input variables (Strings or variableIdentifiers) to set at each communication step \ninputFunction = nothing: Function to get values for the input variables at each communication step. \nPattern [c: current instance, t: current time, returning array of values to be passed to fmi3SetFloat64(..., inputValueReferences, inputFunction(...))]:\ninputFunction(t::fmi3Float64)\ninputFunction(c::FMU3Instance, t::fmi3Float64)\nshowProgress::Bool = true: print simulation progressmeter in REPL\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dict of parameter variables (strings or variableIdentifiers) and values (Boolean, String, Float64, ...) to set parameters during initialization\n\nReturns:\n\nfmusol::FMU3Solution, containing bool fmusol.success and if keyword recordValues is set, the saved values as fmusol.values.\n\nSee also fmi3Simulate, fmi3SimulateME, fmi3SimulateSE.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3VariableDependsOnVariable","page":"User Level API - FMI.jl","title":"FMI.fmi3VariableDependsOnVariable","text":"fmi3VariableDependsOnVariable(fmu::FMU3, vr1::fmi3ValueReference, vr2::fmi3ValueReference)\n\nReturn the dependence of the variable described by vr1 on another variable described by vr2 based on the model description of the fmu.\n\nSee also fmi3GetDependencies.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3GetDependencies","page":"User Level API - FMI.jl","title":"FMI.fmi3GetDependencies","text":"fmi3GetDependencies(fmu::FMU3)\n\nBuild dependency Matrix{Union{fmi3DependencyKind, Nothing}} of dimension n x n for fast look-ups on dependencies between value references (n is number of states of the fmu).\n\nSee also fmi3PrintDependencies, fmi3VariableDependsOnVariable.\n\n\n\n\n\n","category":"function"},{"location":"library/#FMI.fmi3PrintDependencies","page":"User Level API - FMI.jl","title":"FMI.fmi3PrintDependencies","text":"fmi3PrintDependencies(fmu::FMU3)\n\nPrint the dependency matrix for fmu as returned by fmi3GetDependencies.\n\nSee also fmi3GetDependencies.\n\n\n\n\n\n","category":"function"},{"location":"features/#Features","page":"Features","title":"Features","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Please note, that this guide focuses also on users, that are not familiar with FMI. The following feature explanations are written in an easy-to-read-fashion, so there might be some points that are scientifically only 95% correct. For further information on FMI and FMUs, see fmi-standard.org.","category":"page"},{"location":"features/#Execution-Configuration","page":"Features","title":"Execution Configuration","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Not all FMUs support all features they should according to the FMI-standard, so FMI.jl provides a so called execution configuration.  This configuration is also respected by FMIFlux.jl. The content of the execution configuration may change in future (together with new or deprecated features of linked libraries), but the most important core features will be kept over time. Because not all users need the full potential of this configuration tool, there are three presets given: ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"myFMU.executionConfig = FMU2_EXECUTION_CONFIGURATION_NO_RESET is the default operation mode for FMUs. FMUs are not reset via fmi2Reset, but new instantiated for every simulation run (or training step). This is not the most efficient way, but many FMUs have problems with resetting.\nmyFMU.executionConfig = FMU2_EXECUTION_CONFIGURATION_RESET is faster for well-implemented FMUs, but needs a fully working fmi2Reset-function. So if you know you have a fully working fmi2Reset, you may be faster with that option.\nmyFMU.executionConfig = FMU2_EXECUTION_CONFIGURATION_NO_FREEING should only be the very last choice. If your FMU neither supports fmi2Reset nor a proper fmi2FreeInstance, you could use this configuration as a last way out. Keep in mind, that new FMU instances are allocated but not freed, as long as your Julia instance is running (memory leak). In general, the amount of leaked memory is small, but you need to know what you are doing, if you do thousands or ten-thousands of simulation runs with such a FMU.\nmyFMU.executionConfig = FMU2_EXECUTION_CONFIGURATION_NOTHING should be used if you want maximum control over what is done and what not. This means you need to take care of instantiating, initialization, setting up and releasing FMU instances by yourself.","category":"page"},{"location":"features/#Debugging-/-Logging","page":"Features","title":"Debugging / Logging","text":"","category":"section"},{"location":"features/#Logging-FMI-calls","page":"Features","title":"Logging FMI-calls","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"To log all FMI-calls that happen (including \"hidden\" calls e.g. if you are using fmiSimulate) you can enable debugging for FMICore.jl using ENV[\"JULIA_DEBUG\"] = \"FMICore\". This will log any fmi2xxx-call, including the given parameters and return value.","category":"page"},{"location":"features/#Printing-internal-FMU-messages","page":"Features","title":"Printing internal FMU messages","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Many FMUs support for printing debugging messages. To force message printing, you can use the keyword logginOn=true either ...","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"in the call fmiInstantiate, for example fmiInstantiate(myFMU; loggingOn=true) or\nas part of the executionConfig, for example myFMU.executionConfig.loggingOn=true","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"You can further control which message types - like OK, Warning, Discard, Error, Fatal, Pending - should be logged by using the keywords logStatus{TYPE}=true as part of fmiInstantiate or (soon) the execution configuration. By default, all are activated. If the FMU uses a variadic callback function for messages (this is not supported by Julia at this time), you may need to activate external callbacks with the keyword externalCallbacks=true either ...","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"in the call fmiInstantiate!, for example fmiInstantiate!(myFMU; loggingOn=true, externalCallbacks=true) or\nas part of the executionConfig, for example myFMU.executionConfig.loggingOn=true; myFMU.executionConfig.externalCallbacks=true","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Note, that external callbacks are currently only supported on Windows.","category":"page"},{"location":"features/#Model-variable-identification","page":"Features","title":"Model variable identification","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"FMI.jl offers multiple ways to retrieve your model variables. Any function that accepts a variable identifier can handle the following argument types:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"UInt32 or fmi2ValueReference for example 1610612742 or 0x16000001: This is the most performant way of passing a variable identifier, but you need to know the value reference (you can determine them by having a look in the modelDescription.xml).\nArray{UInt32} or Array{fmi2ValueReference} for example [1610612742, 1610612743] or [0x16000001, 0x16000002]: This is the most performant way of passing multiple variable identifiers, but you need to know the value references.\nString for example \"ball.s\": This is the most intuitive way, because you might already know the variable name from your modelling environment or model documentation.\nArray{String} for example [\"ball.s\", \"der(ball.s)\"]: This is the most intuitive way for multiple variable identifiers, because you might already know the variable names from your modelling environment or model documentation.\nSymbol for example :states: There are multiple symbol-wildcards for interesting variable groups like :all, :none, :states, :derivatives, :inputs and :outputs.\nnothing: If you don't want to record anything (same as :none)","category":"page"},{"location":"features/#Event-handling","page":"Features","title":"Event handling","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"In FMI2, there are basically two types of events: state and time.  State events are triggered, as soon as one or more event indicators - scalar values that describe the \"distance\" in state space to the next state event - crossing zero.  Time events are triggered at known time points during the simulation.  If your model has state and/or time events is detected automatically by FMI.jl and the event handling happens automatically in the background.","category":"page"},{"location":"features/#Model-exchange-(ME)-and-co-simulation-(CS)","page":"Features","title":"Model exchange (ME) and co-simulation (CS)","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"There are two different model types for FMUs in FMI2: Model exchange (ME) and co-simulation (CS).  If you have a FMU and are only interested in getting it simulated, use fmiSimulate so FMI.jl will automatically pick CS if available and otherwise ME. If you want to force a specific simulation mode, you can use fmiSimulateME (for ME) or fmiSimulateCS (for CS).","category":"page"},{"location":"features/#Simulate-arbitrary-time-intervals","page":"Features","title":"Simulate arbitrary time intervals","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"You can simply simulate arbitrary time intervals by passing a startTime unequal zero to fmi2SetupExperiment.  Because many FMUs don't support startTime != 0.0 and will throw an error or warning, a time shifting feature inside FMI.jl can be used, that performs all necessary steps in the background - corresponding commands like e.g. fmi2SetTime or fmi2NewDiscreteStates act like the desired time interval is simulated. This feature is disabled by default, but can be activated in the execution configuration using myFMU.executionConfig.autoTimeShift=true while providing a startTime != 0.0.","category":"page"},{"location":"features/#Performance","page":"Features","title":"Performance","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"In- and Out-of-Place: Many commands in FMI.jl are available in in-place and out-of-place semantics. Of course, in-place-calls are faster, because they don't need to allocate new memory at every call (for the return values). So if you have an eye on performance (or must have), a good starting point is to substitute out-of-place- with in-place-calls. Typical improvements are:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"valueArray = fmi2GetReal(args...) -> fmi2GetReal!(args..., valueArray)\nvalueArray = fmi2GetDerivatives(args...) -> fmi2GetDerivatives!(args..., valueArray)\nvalueArray = fmi2NewDiscreteStates(args...) -> fmi2NewDiscreteStates!(args..., valueArray)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Of course, you have to use the same piece of memory (to write your return values in) for multiple calls - otherwise there will be no improvement because the number of allocations stays the same.","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Views: You can use array-views instead of array-slices as input for in-place-functions, which further reduces memory allocations.","category":"page"},{"location":"features/#AD-Ecosystem-(Differentiation-over-FMUs)","page":"Features","title":"AD-Ecosystem (Differentiation over FMUs)","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Sensitivites over FMUs are fully integrated into FMI.jl, FMIImport.jl and FMIFlux.jl. Supported are ForwardDiff.jl together with all AD-frameworks, that use the interface of ChainRules.jl like e.g. Zygote.jl. As a result, you can use implicite solvers or you can use FMUs as part of machine learning applications.","category":"page"},{"location":"features/#Watch-your-progress","page":"Features","title":"Watch your progress","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"When simulating FMUs with FMI.jl, a progress meter is shown per default. You can control the appearance via the keyword argument showProgress for fmiSimulate, fmiSimulateME and fmiSimulateCS.  Progress meters are also available for FMIFlux.jl, but deactivated by default (during training, this can be a bit too much). When evaluating a NeuralFMU, you can use the same keyword with showProgress=true to show a progress bar during training, too. The simulation trajectory (also called the solution of your FMU's ODE system) can be plotted using fmiPlot(myFMU, solution), all axis will be labeled automatically.","category":"page"},{"location":"features/#Parallelization","page":"Features","title":"Parallelization","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"A native integrated support for multi-threaded and multi-process FMU-simulation will be deployed soon. ","category":"page"},{"location":"related/#Related-Publications","page":"Related Publication","title":"Related Publications","text":"","category":"section"},{"location":"related/","page":"Related Publication","title":"Related Publication","text":"Tobias Thummerer, Josef Kircher, Lars Mikelsons 2021 NeuralFMU: Towards Structural Integration of FMUs into Neural Networks (14th Modelica Conference, Preprint, Accepted) arXiv:2109.04351","category":"page"},{"location":"related/","page":"Related Publication","title":"Related Publication","text":"Tobias Thummerer, Johannes Tintenherr, Lars Mikelsons 2021 Hybrid modeling of the human cardiovascular system using NeuralFMUs (10th International Conference on Mathematical Modeling in Physical Sciences, Preprint, Accepted) arXiv:2109.04880","category":"page"},{"location":"examples/multiple_instances/#Multiple-Instances-of-an-FMU","page":"Multiple instances","title":"Multiple Instances of an FMU","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"Tutorial by Johannes Stoljar, Tobias Thummerer","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"🚧 This tutorial is under revision and will be replaced by an up-to-date version soon 🚧","category":"page"},{"location":"examples/multiple_instances/#License","page":"Multiple instances","title":"License","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/multiple_instances/#Motivation","page":"Multiple instances","title":"Motivation","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"This Julia Package FMI.jl is motivated by the use of simulation models in Julia. Here the FMI specification is implemented. FMI (Functional Mock-up Interface) is a free standard (fmi-standard.org) that defines a container and an interface to exchange dynamic models using a combination of XML files, binaries and C code zipped into a single file. The user can thus use simulation models in the form of an FMU (Functional Mock-up Units). Besides loading the FMU, the user can also set values for parameters and states and simulate the FMU both as co-simulation and model exchange simulation.","category":"page"},{"location":"examples/multiple_instances/#Introduction-to-the-example","page":"Multiple instances","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"In this example we want to show that it is possible to create different instances of an FMU. The different instances can then be used to run independent simulations. After the FMU has been simulated, the simulation results are displayed in a graph. The used model is a one-dimensional spring pendulum without friction. The object-orientated structure of the SpringPendulum1D can be seen in the following graphic.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"(Image: svg)  ","category":"page"},{"location":"examples/multiple_instances/#Target-group","page":"Multiple instances","title":"Target group","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"The example is primarily intended for users who work in the field of simulations. The example wants to show how simple it is to use FMUs in Julia.","category":"page"},{"location":"examples/multiple_instances/#Other-formats","page":"Multiple instances","title":"Other formats","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/multiple_instances/#Getting-started","page":"Multiple instances","title":"Getting started","text":"","category":"section"},{"location":"examples/multiple_instances/#Installation-prerequisites","page":"Multiple instances","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":" Description Command Alternative\n1. Enter Package Manager via ] \n2. Install FMI via add FMI add \" https://github.com/ThummeTo/FMI.jl \"\n3. Install FMIZoo via add FMIZoo add \" https://github.com/ThummeTo/FMIZoo.jl \"\n4. Install Plots via add Plots ","category":"page"},{"location":"examples/multiple_instances/#Code-section","page":"Multiple instances","title":"Code section","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"# imports\nusing FMI\nusing FMIZoo\nusing Plots","category":"page"},{"location":"examples/multiple_instances/#Simulation-setup","page":"Multiple instances","title":"Simulation setup","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"Next, the start time and end time of the simulation are set. Finally, the recorded values are specified to store the results of the simulation.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"tStart = 0.0\ntStop = 8.0\n\nvrs = [\"mass.s\"]","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"1-element Vector{String}:\n \"mass.s\"","category":"page"},{"location":"examples/multiple_instances/#Import-FMU","page":"Multiple instances","title":"Import FMU","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"In the next lines of code the FMU model from FMIZoo.jl is loaded and the information about the FMU is shown.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"# we use an FMU from the FMIZoo.jl\npathToFMU = get_model_filename(\"SpringPendulum1D\", \"Dymola\", \"2022x\")\n\nmyFMU = fmiLoad(pathToFMU)\nfmiInfo(myFMU)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"#################### Begin information for FMU ####################\n\tModel name:\t\t\tSpringPendulum1D\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{fc15d8c4-758b-48e6-b00e-5bf47b8b14e5}\n\tGeneration tool:\t\tDymola Version 2022x (64-bit), 2021-10-08\n\tGeneration time:\t\t2022-05-19T06:54:23Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t0\n\tInputs:\t\t\t\t0\n\tOutputs:\t\t\t0\n\tStates:\t\t\t\t2\n\t\t33554432 [\"mass.s\"]\n\t\t33554433 [\"mass.v\"]\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tSpringPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tSpringPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################","category":"page"},{"location":"examples/multiple_instances/#First-Instance","page":"Multiple instances","title":"First Instance","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"To create an instance of the FMU it is necessary to call the command fmiInstantiate!(). With the component address you now have a unique instance of the FMU.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"comp1 = fmiInstantiate!(myFMU; loggingOn=true)\ncomp1Address= comp1.compAddr\nprintln(comp1)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"FMU:            SpringPendulum1D\nInstanceName:   SpringPendulum1D\nAddress:        Ptr{Nothing} @0x000001d589420820\nState:          0\nLogging:        1\nFMU time:       -Inf\nFMU states:     nothing","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"Next, a dictionary for the parameters is created. With this dictionary you can set the initial states of the variables of the FMU. For the spring constant spring.c a value of 100 fracNm and for the position of the mass mass.s a value of 10 m is set. The created dictionary with the specified variables for recording are passed to the command for simulation. In addition, other keywords are set. On the one hand the keyword instantiate=false is set, which prevents that in the simulation command a new instance is created. On the other hand the keyword freeInstance=false is set, this prevents that after the simulation command the instance is released. ","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"param1 = Dict(\"spring.c\"=>10.0, \"mass_s0\"=>1.0)\ndata1 = fmiSimulate(comp1, (tStart, tStop); parameters=param1, recordValues=vrs, instantiate=false, freeInstance=false)\nfig = fmiPlot(data1)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"(Image: svg)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"For control, you can compare again the address of the instance to the previous address, and it should be the same address. As soon as this is not the case an error would be thrown by the macro @assert.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"@assert comp1.compAddr === comp1Address","category":"page"},{"location":"examples/multiple_instances/#Second-Instance","page":"Multiple instances","title":"Second Instance","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"To create a second instance of the FMU it is necessary to call the command fmiInstantiate!(). With the component address you now have a unique instance of the FMU.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"comp2 = fmiInstantiate!(myFMU; loggingOn=true)\ncomp2Address= comp2.compAddr\nprintln(comp2)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"FMU:            SpringPendulum1D\nInstanceName:   SpringPendulum1D\nAddress:        Ptr{Nothing} @0x000001d589421f50\nState:          0\nLogging:        1\nFMU time:       -Inf\nFMU states:     nothing","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"The addresses of the instantiated FMUs must differ, and you can see that in the comparison below.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"@assert comp1Address !== comp2Address","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"Again, a dictionary for the parameters is created. With this dictionary you can set the initial states of the variables of the FMU. For the spring constant spring.c a value of 10 fracNm and for the position of the mass mass.s a value of 20 m is set. The created dictionary with the specified variables for recording are passed to the command for simulation. As before, the two keywords instantiate=false and freeInstance=false are set.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"param2 = Dict(\"spring.c\"=>1.0, \"mass.s\"=>2.0)\ndata2 = fmiSimulateCS(comp2, (tStart, tStop);  parameters=param2, recordValues=vrs, instantiate=false, freeInstance=false)\nfmiPlot!(fig, data2)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"(Image: svg)","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"For control, you can compare again the address of the instance comp2 to the previous address comp2Address and it should be the same address.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"@assert comp2.compAddr === comp2Address","category":"page"},{"location":"examples/multiple_instances/#Unload-FMU","page":"Multiple instances","title":"Unload FMU","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"After plotting the data, the FMU is unloaded and all unpacked data on disc is removed.","category":"page"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"fmiUnload(myFMU)","category":"page"},{"location":"examples/multiple_instances/#Summary","page":"Multiple instances","title":"Summary","text":"","category":"section"},{"location":"examples/multiple_instances/","page":"Multiple instances","title":"Multiple instances","text":"Based on the example it can be seen that it is possible to create different instances of an FMU. The different instances can then be used to perform different simulations.","category":"page"},{"location":"examples/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"This section discusses the included examples of the FMI.jl library. If you require further information about the function calls, see the function sections of the library.","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Examples are subdevided into Basics, Advanced and Publication appendices.","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Basic examples:","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Simulate: Showing how you can simulate a CS-FMU and a ME-FMU.\nParameterize: A short example explaining how to parameterize a FMU before simulation.\nInputs: A short example explaining how to simulate a FMU with inputs.","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Advanced examples:","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Parameter Optimization: An introduction on how FMU parameters can be optimized to fit a specific behaviour.\nMultiple instances: Showing the use of multiple FMU instances.\nManipulation: Showing how to redefine a linked C-library function of FMU.\nMultithreading: Shows how to use multithreading to simulate multiple FMUs.\nMultiprocessing: Shows how to use multiprocessing to simulate multiple FMUs.","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Publication appendices:","category":"page"},{"location":"examples/overview/","page":"Overview","title":"Overview","text":"Modelica conference 2021: Showing the different variants of simulating an FMU.","category":"page"},{"location":"fmi-tool-info/#FMU-Import-Compatibility-information-(*FMIImport.jl*)","page":"FMI Tool Information","title":"FMU Import Compatibility information (FMIImport.jl)","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"This section contains information about how import and simulation of FMI.jl and FMIInmport.jl where tested.","category":"page"},{"location":"fmi-tool-info/#FMI-3.0","page":"FMI Tool Information","title":"FMI-3.0","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"FMI3 is for now only beta supported and information will be deployed together with the full support release.","category":"page"},{"location":"fmi-tool-info/#FMI-2.0","page":"FMI Tool Information","title":"FMI-2.0","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"FMI.jl and FMIImport.jl are validated by simulating all valid FMI2-FMUs from the official FMI-Cross-Check in ME- as well as in CS-Mode, excluding the tools AMESim, Test-FMUs, SimulationX and Silver. For more information see our automated GitHub-Action. The results files - as defined by the FMI Cross Check - can be found in the forked repository inside of the corresponding sub folders.  There are different branches for different OS-configurations avalibale.","category":"page"},{"location":"fmi-tool-info/#FMU-Export-Compatibility-information-(*FMIExport.jl*)","page":"FMI Tool Information","title":"FMU Export Compatibility information (FMIExport.jl)","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"Detailed export information and automatically generated FMUs will be deployed soon in the repository.","category":"page"},{"location":"fmi-tool-info/#FMI-3.0-2","page":"FMI Tool Information","title":"FMI-3.0","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"File name x86_64-windows x86_64-linux\nBouncingBall coming soon coming soon\nManipulation coming soon coming soon\nNeuralFMU coming soon coming soon","category":"page"},{"location":"fmi-tool-info/#FMI-2.0-2","page":"FMI Tool Information","title":"FMI-2.0","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"File name x86_64-windows x86_64-linux\nBouncingBall ME coming soon\nManipulation ME coming soon\nNeuralFMU ME coming soon","category":"page"},{"location":"fmi-tool-info/#Validation-tools","page":"FMI Tool Information","title":"Validation tools","text":"","category":"section"},{"location":"fmi-tool-info/","page":"FMI Tool Information","title":"FMI Tool Information","text":"Dassault Dymola 2022X\nFMU Check","category":"page"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This list some common - often numerical - errors, that can be fixed by better understanding the ODE-Problem inside your FMU.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"","category":"page"},{"location":"faq/#Solving-non-linear-system-failes","page":"FAQ","title":"Solving non-linear system failes","text":"","category":"section"},{"location":"faq/#Description","page":"FAQ","title":"Description","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Error message or warning, that solving of a non-linear system failed, close to the simulation start time.","category":"page"},{"location":"faq/#Example","page":"FAQ","title":"Example","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Solving non-linear system 101 failed at time=3e-05.","category":"page"},{"location":"faq/#Reason","page":"FAQ","title":"Reason","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This could be, because the first step of the integration is accepted by the solver's error estimation, but shouldn't. This is usually, if the first step is picked to large by the solver's start step size heuristics.","category":"page"},{"location":"faq/#Fix","page":"FAQ","title":"Fix","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Try a small start value for the integration with keyword dt.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"","category":"page"},{"location":"faq/#Access-denied","page":"FAQ","title":"Access denied","text":"","category":"section"},{"location":"faq/#Description-2","page":"FAQ","title":"Description","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Error message, that the binary for callback functions can't be accessed/opened.","category":"page"},{"location":"faq/#Example-2","page":"FAQ","title":"Example","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"ERROR:\ncould not load library \"...\\src\\FMI2\\callbackFunctions\\binaries\\win64\\callbackFunctions.dll\"\nAccess denied","category":"page"},{"location":"faq/#Reason-2","page":"FAQ","title":"Reason","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This is because your OS doesn't allow to interact with the binaries shipped with FMI.jl. ","category":"page"},{"location":"faq/#Fix-2","page":"FAQ","title":"Fix","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This can easily be solved by fixing the binary's permission options or is automatically fixed if Julia runs with admin privileges.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"","category":"page"},{"location":"faq/#Double-Callback-Crossing","page":"FAQ","title":"Double Callback Crossing","text":"","category":"section"},{"location":"faq/#Description-3","page":"FAQ","title":"Description","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Error message, that solving failed because of double callback crossing.","category":"page"},{"location":"faq/#Example-3","page":"FAQ","title":"Example","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"ERROR:\nDouble callback crossing floating pointer reducer errored. Report this issue.","category":"page"},{"location":"faq/#Reason-3","page":"FAQ","title":"Reason","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This is because the event instant (time point) of an FMU event indicator can't be found precisely.","category":"page"},{"location":"faq/#Fix-3","page":"FAQ","title":"Fix","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This can be solved by allowing for more interpolation points during searching of the zero crossing:","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"fmu.executionConfig.rootSearchInterpolationPoints = 1000 # default value is 10","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"This will have negative performance impact on systems with extreme amount of events (thousands per second).  For systems with only a few events there won't be a noticable slow down. ","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#Working-with-the-FMI-model-description","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"","category":"section"},{"location":"fmi3_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"The FMI model description provides all human readable information on the model. The following fuctions can be used to obtain all information provided by the model descripton, wich in turn can be extrated from the fmu.","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#Loading/Parsing","page":"Working with the FMI model description","title":"Loading/Parsing","text":"","category":"section"},{"location":"fmi3_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi3LoadModelDescription","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3LoadModelDescription","page":"Working with the FMI model description","title":"FMIImport.fmi3LoadModelDescription","text":"Extract the FMU variables and meta data from the ModelDescription\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#general-information-about-the-FMU","page":"Working with the FMI model description","title":"general information about the FMU","text":"","category":"section"},{"location":"fmi3_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi3GetModelName\nfmi3GetInstantiationToken\nfmi3IsCoSimulation\nfmi3IsModelExchange\nfmi3IsScheduledExecution\nfmi3GetGenerationTool\nfmi3GetGenerationDateAndTime","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetModelName","page":"Working with the FMI model description","title":"FMIImport.fmi3GetModelName","text":"Returns the tag 'modelName' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetInstantiationToken","page":"Working with the FMI model description","title":"FMIImport.fmi3GetInstantiationToken","text":"Returns the tag 'instantionToken' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3IsCoSimulation","page":"Working with the FMI model description","title":"FMIImport.fmi3IsCoSimulation","text":"Returns true, if the FMU supports co simulation\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3IsModelExchange","page":"Working with the FMI model description","title":"FMIImport.fmi3IsModelExchange","text":"Returns true, if the FMU supports model exchange\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3IsScheduledExecution","page":"Working with the FMI model description","title":"FMIImport.fmi3IsScheduledExecution","text":"Returns true, if the FMU supports scheduled execution\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetGenerationTool","page":"Working with the FMI model description","title":"FMIImport.fmi3GetGenerationTool","text":"Returns the tag 'generationtool' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetGenerationDateAndTime","page":"Working with the FMI model description","title":"FMIImport.fmi3GetGenerationDateAndTime","text":"Returns the tag 'generationdateandtime' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#tecnical-information-about-the-FMU","page":"Working with the FMI model description","title":"tecnical information about the FMU","text":"","category":"section"},{"location":"fmi3_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi3GetModelIdentifier\nfmi3GetVariableNamingConvention\nfmi3GetVersion\n\nfmi3GetNumberOfEventIndicators\nfmi3GetNumberOfEventIndicators!","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetModelIdentifier","page":"Working with the FMI model description","title":"FMIImport.fmi3GetModelIdentifier","text":"Returns the tag 'modelIdentifier' from CS or ME section.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetVariableNamingConvention","page":"Working with the FMI model description","title":"FMIImport.fmi3GetVariableNamingConvention","text":"Returns the tag 'varaiblenamingconvention' from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMICore.fmi3GetVersion","page":"Working with the FMI model description","title":"FMICore.fmi3GetVersion","text":"fmi3GetVersion(fmu::FMU3)\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\n\nReturns\n\nReturns a string from the address of a C-style (NUL-terminated) string. The string represents the version of the “fmi3Functions.h” header file which was used to compile the functions of the FMU. The function returns “fmiVersion” which is defined in this header file. The standard header file as documented in this specification has version “3.0”\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4. Inquire Version Number of Header Files\n\n\n\n\n\nfunction fmi3GetVersion(fmu::FMU3)\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nReturns a string from the address of a C-style (NUL-terminated) string. The string represents the version of the “fmi3Functions.h” header file which was used to compile the functions of the FMU. The function returns “fmiVersion” which is defined in this header file. The standard header file as documented in this specification has version “3.0”\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4. Inquire Version Number of Header Files\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.4. Inquire Version Number of Header Files\n\nThis function returns fmi3Version of the fmi3Functions.h header file which was used to compile the functions of the FMU. This function call is allowed always and in all interface types.\n\nThe standard header file as documented in this specification has version \"3.0-beta.2\", so this function returns \"3.0-beta.2\".\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetNumberOfEventIndicators","page":"Working with the FMI model description","title":"FMIImport.fmi3GetNumberOfEventIndicators","text":"fmi3GetNumberOfEventIndicators(c::FMU3Instance)\n\nThis function returns the number of event indicators. This function can only be called in Model Exchange. \n\nfmi3GetNumberOfEventIndicators must be called after a structural parameter is changed. As long as no structural parameters changed, the number of states is given in the modelDescription.xml, alleviating the need to call this function.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nsize::Integer: Return size is the number of event indicators of this instance \n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3GetNumberOfEventIndicators.\n\n\n\n\n\nReturns the number of EventIndicators from the model description.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMICore.fmi3GetNumberOfEventIndicators!","page":"Working with the FMI model description","title":"FMICore.fmi3GetNumberOfEventIndicators!","text":"fmi3GetNumberOfEventIndicators!(c::FMU3Instance, nEventIndicators::Ref{Csize_t})\n\nThis function returns the number of event indicators. This function can only be called in Model Exchange. \n\nfmi3GetNumberOfEventIndicators must be called after a structural parameter is changed. As long as no structural parameters changed, the number of states is given in the modelDescription.xml, alleviating the need to call this function.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nnEventIndicators::Ref{Csize_t}: Stores the number of continuous states returned by the function\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3GetNumberOfEventIndicators!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.2. State: Instantiated\n\nThis function returns the number of event indicators. This function can only be called in Model Exchange. \n\nfmi3GetNumberOfEventIndicators must be called after a structural parameter is changed. As long as no structural parameters changed, the number of states is given in the modelDescription.xml, alleviating the need to call this function.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#default-experiment-settings","page":"Working with the FMI model description","title":"default experiment settings","text":"","category":"section"},{"location":"fmi3_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi3GetDefaultStartTime\nfmi3GetDefaultStopTime\nfmi3GetDefaultTolerance\nfmi3GetDefaultStepSize","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetDefaultStartTime","page":"Working with the FMI model description","title":"FMIImport.fmi3GetDefaultStartTime","text":"Returns startTime from DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetDefaultStopTime","page":"Working with the FMI model description","title":"FMIImport.fmi3GetDefaultStopTime","text":"Returns stopTime from DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetDefaultTolerance","page":"Working with the FMI model description","title":"FMIImport.fmi3GetDefaultTolerance","text":"Returns tolerance from DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3GetDefaultStepSize","page":"Working with the FMI model description","title":"FMIImport.fmi3GetDefaultStepSize","text":"Returns stepSize from DefaultExperiment if defined else defaults to nothing.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMU-capabilities","page":"Working with the FMI model description","title":"FMU capabilities","text":"","category":"section"},{"location":"fmi3_lowlevel_modeldescription_functions/","page":"Working with the FMI model description","title":"Working with the FMI model description","text":"fmi3CanGetSetState\nfmi3CanSerializeFMUState\nfmi3ProvidesDirectionalDerivatives\nfmi3ProvidesAdjointDerivatives","category":"page"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3CanGetSetState","page":"Working with the FMI model description","title":"FMIImport.fmi3CanGetSetState","text":"Returns true, if the FMU supports the getting/setting of states\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3CanSerializeFMUState","page":"Working with the FMI model description","title":"FMIImport.fmi3CanSerializeFMUState","text":"Returns true, if the FMU state can be serialized\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3ProvidesDirectionalDerivatives","page":"Working with the FMI model description","title":"FMIImport.fmi3ProvidesDirectionalDerivatives","text":"Returns true, if the FMU provides directional derivatives\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_modeldescription_functions/#FMIImport.fmi3ProvidesAdjointDerivatives","page":"Working with the FMI model description","title":"FMIImport.fmi3ProvidesAdjointDerivatives","text":"Returns true, if the FMU provides adjoint derivatives\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMI-for-Model-Exchange","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"","category":"section"},{"location":"fmi3_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"This chapter contains the interface description to access the equations of a dynamic system from a C program.","category":"page"},{"location":"fmi3_lowlevel_ME_functions/#Providing-Independent-Variables-and-Re-initialization-of-Caching","page":"FMI for Model Exchange","title":"Providing Independent Variables and Re-initialization of Caching","text":"","category":"section"},{"location":"fmi3_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"Depending on the situation, different variables need to be computed. In order to be efficient, it is important that the interface requires only the computation of variables that are needed in the present context. The state derivatives shall be reused from the previous call. This feature is called “caching of variables” in the sequel. Caching requires that the model evaluation can detect when the input arguments, like time or states, have changed.","category":"page"},{"location":"fmi3_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"fmi3SetTime\nfmi3SetContinuousStates","category":"page"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3SetTime","page":"FMI for Model Exchange","title":"FMICore.fmi3SetTime","text":"fmi3SetTime(c::FMU3Instance, time::fmi3Float64)\n\nSet a new time instant and re-initialize caching of variables that depend on time, provided the newly provided time value is different to the previously set time value (variables that depend solely on constants or parameters need not to be newly computed in the sequel, but the previously computed values can be reused).\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\ntime::fmi3Float64: Argument time contains a value of type fmi3Float64 which is a alias type for Real data type. time sets the independent variable time t.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3SetTime.\n\n\n\n\n\nfmi3SetTime(c::FMU3Instance, time::Real)\n\nSet a new time instant and re-initialize caching of variables that depend on time, provided the newly provided time value is different to the previously set time value (variables that depend solely on constants or parameters need not to be newly computed in the sequel, but the previously computed values can be reused).\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nt::Real: Argument t contains a value of type Real which is a alias type for Real data type. time sets the independent variable time t.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3SetTime.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 3.2.1. State: Continuous-Time Mode\n\nSet a new time instant and re-initialize caching of variables that depend on time, provided the newly provided time value is different to the previously set time value (variables that depend solely on constants or parameters need not to be newly computed in the sequel, but the previously computed values can be reused).\n\n\n\n\n\nfmi3SetTime(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetTime(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3SetContinuousStates","page":"FMI for Model Exchange","title":"FMICore.fmi3SetContinuousStates","text":"fmi3SetContinuousStates(c::FMU3Instance,\n    x::AbstractArray{fmi3Float64},\n    nx::Csize_t)\n\nSet a new (continuous) state vector and re-initialize caching of variables that depend on the states. Argument nx is the length of vector x and is provided for checking purposes\n\nIf fmi3UpdateDiscreteStates returned with nominalsOfContinuousStatesChanged == fmi3True, then at least one nominal value of the states has changed and can be inquired with fmi3GetNominalsOfContinuousStates. Not allowed in Co-Simulation and Scheduled Execution.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx::AbstractArray{fmi3Float64}: Argument x contains values of type fmi3Float64 which is a alias type for Real data type. x is the AbstractArray which contains the Real values of the vector that represent the nominal values of the continuous states.\nnx::Csize_t: Argument nx defines the length of vector x and is provided for checking purposes\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3SetContinuousStates.\n\n\n\n\n\nfmi3SetContinuousStates(c::FMU3Instance, x::Union{AbstractArray{Float32}, AbstractArray{Float64}})\n\nSet a new (continuous) state vector and re-initialize caching of variables that depend on the states. Argument nx is the length of vector x and is provided for checking purposes\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx::Union{AbstractArray{Float32},AbstractArray{Float64}}:Argument x is the AbstractArray of the vector values of Float64 or Float32.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3SetContinuousStates.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 3.2.1. State: Continuous-Time Mode\n\nSet a new (continuous) state vector and re-initialize caching of variables that depend on the states. Argument nx is the length of vector x and is provided for checking purposes\n\n\n\n\n\nfmi3SetContinuousStates(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetContinuousStates(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#Evaluation-of-Model-Equations","page":"FMI for Model Exchange","title":"Evaluation of Model Equations","text":"","category":"section"},{"location":"fmi3_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"fmi3EnterEventMode\nfmi3EnterContinuousTimeMode\nfmi3CompletedIntegratorStep\nfmi3CompletedIntegratorStep!\nfmi3GetEventIndicators!\nfmi3GetContinuousStates!\nfmi3GetNominalsOfContinuousStates!\nfmi3GetNumberOfContinuousStates\nfmi3GetNumberOfContinuousStates!","category":"page"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3EnterEventMode","page":"FMI for Model Exchange","title":"FMICore.fmi3EnterEventMode","text":"fmi3EnterEventMode(c::FMU3Instance, stepEvent::fmi3Boolean, stateEvent::fmi3Boolean, rootsFound::AbstractArray{fmi3Int32}, nEventIndicators::Csize_t, timeEvent::fmi3Boolean; soft::Bool=false)\n\nThe model enters Event Mode from the Continuous-Time Mode in ModelExchange oder Step Mode in CoSimulation and discrete-time equations may become active (and relations are not “frozen”).\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nstepEvent::fmi3Boolean: \nstateEvent::fmi3Boolean: \nrootsFound::AbstractArray{fmi3Int32}: \nnEventIndicators::Csize_t: \ntimeEvent::fmi3Boolean: \nsoft::Bool=false: \n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state  fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3EnterEventMode.\n\n\n\n\n\nfmi3EnterEventMode(c::FMU3Instance, stepEvent::Bool, stateEvent::Bool, rootsFound::AbstractArray{fmi3Int32}, nEventIndicators::Csize_t, timeEvent::Bool)\n\nThe model enters Event Mode from the Continuous-Time Mode in ModelExchange oder Step Mode in CoSimulation and discrete-time equations may become active (and relations are not “frozen”).\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nstepEvent::Bool:  \nstateEvent::Bool: \nrootsFound::AbstractArray{fmi3Int32}: \nnEventIndicators::Csize_t: \ntimeEvent::Bool: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3EnterEventMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 3.2.1. State: Continuous-Time Mode\n\nThe model enters Event Mode from the Continuous-Time Mode in ModelExchange oder Step Mode in CoSimulation and discrete-time equations may become active (and relations are not “frozen”).\n\n\n\n\n\nfmi3EnterEventMode(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3EnterEventMode(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3EnterContinuousTimeMode","page":"FMI for Model Exchange","title":"FMICore.fmi3EnterContinuousTimeMode","text":"fmi3EnterContinuousTimeMode(c::FMU3Instance; soft::Bool=false)\n\nThe model enters Continuous-Time Mode and all discrete-time equations become inactive and all relations are “frozen”. This function has to be called when changing from Event Mode (after the global event iteration in Event Mode over all involved FMUs and other models has converged) into Continuous-Time Mode.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state  fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.5. State: Event Mode\n\nSee also fmi3EnterContinuousTimeMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.5. State: Event Mode\n\nThe model enters Continuous-Time Mode and all discrete-time equations become inactive and all relations are “frozen”. This function has to be called when changing from Event Mode (after the global event iteration in Event Mode over all involved FMUs and other models has converged) into Continuous-Time Mode.\n\n\n\n\n\nfmi3EnterContinuousTimeMode(fmu::FMU3)\n\nWrapper for fmi3EnterContinuousTimeMode(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMIImport.fmi3CompletedIntegratorStep","page":"FMI for Model Exchange","title":"FMIImport.fmi3CompletedIntegratorStep","text":"fmi3CompletedIntegratorStep!(c::FMU3Instance, noSetFMUStatePriorToCurrentPoint::fmi3Boolean)\n\nThis function must be called by the environment after every completed step\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nnoSetFMUStatePriorToCurrentPoint::fmi3Boolean: Argument noSetFMUStatePriorToCurrentPoint = fmi3True if fmi3SetFMUState  will no longer be called for time instants prior to current time in this simulation run.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\nenterEventMode::Array{fmi3Boolean, 1}: Returns enterEventMode[1] to signal to the environment if the FMU shall call fmi2EnterEventMode\nterminateSimulation::Array{fmi3Boolean, 1}: Returns terminateSimulation[1] to signal if the simulation shall be terminated.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3CompletedIntegratorStep.\n\n\n\n\n\nfmi3CompletedIntegratorStep(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3CompletedIntegratorStep(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3CompletedIntegratorStep!","page":"FMI for Model Exchange","title":"FMICore.fmi3CompletedIntegratorStep!","text":"fmi3CompletedIntegratorStep!(c::FMU3Instance,\n                                  noSetFMUStatePriorToCurrentPoint::fmi3Boolean,\n                                  enterEventMode::Ref{fmi3Boolean},\n                                  terminateSimulation::Ref{fmi3Boolean})\n\nThis function must be called by the environment after every completed step of the integrator provided the capability flag needsCompletedIntegratorStep == true. If enterEventMode == fmi3True, the event mode must be entered If terminateSimulation == fmi3True, the simulation shall be terminated\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nnoSetFMUStatePriorToCurrentPoint::fmi3Boolean: Argument noSetFMUStatePriorToCurrentPoint = fmi3True if fmi3SetFMUState  will no longer be called for time instants prior to current time in this simulation run.\nenterEventMode::Ref{fmi3Boolean}: Argument enterEventMode points to the return value (fmi3Boolean) which signals to the environment if the FMU shall call fmi3EnterEventMode. fmi3Boolean is an alias type for Boolean data type.\nterminateSimulation::Ref{fmi3Boolean}: Argument terminateSimulation points to the return value (fmi3Boolean) which signals signal if the simulation shall be terminated. fmi3Boolean is an alias type for Boolean data type.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3CompletedIntegratorStep!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 3.2.1. State: Continuous-Time Mode\n\nThis function must be called by the environment after every completed step of the integrator provided the capability flag needsCompletedIntegratorStep = true. If enterEventMode == fmi3True, the event mode must be entered If terminateSimulation == fmi3True, the simulation shall be terminated\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3GetEventIndicators!","page":"FMI for Model Exchange","title":"FMICore.fmi3GetEventIndicators!","text":"fmi3GetEventIndicators!(c::FMU3Instance, eventIndicators::AbstractArray{fmi3Float64}, ni::Csize_t)\n\nCompute event indicators at the current time instant and for the current states. EventIndicators signal Events by their sign change.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\neventIndicators::AbstractArray{fmi3Float64}: Argument eventIndicators contains values of type fmi3Float64 which is a alias type for Real data type.eventIndicators is the AbstractArray which contains the Real values of the vector that represent the event indicators.\nni::Csize_t: Argument ni defines the length of vector eventIndicators and is provided for checking purposes\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3GetEventIndicators!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 3.2.1. State: Continuous-Time Mode\n\nCompute event indicators at the current time instant and for the current states. EventIndicators signal Events by their sign change.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3GetContinuousStates!","page":"FMI for Model Exchange","title":"FMICore.fmi3GetContinuousStates!","text":"fmi3GetContinuousStates!(c::FMU3Instance, nominals::AbstractArray{fmi3Float64}, nContinuousStates::Csize_t)\n\nReturn the states at the current time instant.\n\nThis function must be called if fmi3UpdateDiscreteStates returned with valuesOfContinuousStatesChanged == fmi3True. Not allowed in Co-Simulation and Scheduled Execution.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nnominals::AbstractArray{fmi3Float64}: Argument nominals contains values of type fmi3Float64 which is a alias type for Real data type. nominals is the AbstractArray which contains the Real values of the vector that represent the new state vector.\nnContinuousStates::Csize_t: Argument nContinuousStates defines the length of vector nominals and is provided for checking purposes\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.3. State: Initialization Mode\n\nSee also fmi3GetContinuousStates!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.3. State: Initialization Mode\n\nReturn the states at the current time instant.\n\nThis function must be called if fmi3UpdateDiscreteStates returned with valuesOfContinuousStatesChanged == fmi3True. Not allowed in Co-Simulation and Scheduled Execution.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3GetNominalsOfContinuousStates!","page":"FMI for Model Exchange","title":"FMICore.fmi3GetNominalsOfContinuousStates!","text":"fmi3GetNominalsOfContinuousStates!(c::FMU3Instance, x_nominal::AbstractArray{fmi3Float64}, nx::Csize_t)\n\nReturn the nominal values of the continuous states.\n\nIf fmi3UpdateDiscreteStates returned with nominalsOfContinuousStatesChanged == fmi3True, then at least one nominal value of the states has changed and can be inquired with fmi3GetNominalsOfContinuousStates. Not allowed in Co-Simulation and Scheduled Execution.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx_nominal::AbstractArray{fmi3Float64}: Argument x_nominal contains values of type fmi3Float64 which is a alias type for Real data type. x_nominal is the AbstractArray which contains the Real values of the vector that represent the nominal values of the continuous states.\nnx::Csize_t: Argument nx defines the length of vector x_nominal and is provided for checking purposes\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.3. State: Initialization Mode\n\nSee also fmi3GetNominalsOfContinuousStates!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.3. State: Initialization Mode\n\nReturn the nominal values of the continuous states.\n\nIf fmi3UpdateDiscreteStates returned with nominalsOfContinuousStatesChanged == fmi3True, then at least one nominal value of the states has changed and can be inquired with fmi3GetNominalsOfContinuousStates. Not allowed in Co-Simulation and Scheduled Execution.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMIImport.fmi3GetNumberOfContinuousStates","page":"FMI for Model Exchange","title":"FMIImport.fmi3GetNumberOfContinuousStates","text":"fmi3GetNumberOfContinuousStates(c::FMU3Instance)\n\nThis function returns the number of continuous states. This function can only be called in Model Exchange. \n\nfmi3GetNumberOfContinuousStates must be called after a structural parameter is changed. As long as no structural parameters changed, the number of states is given in the modelDescription.xml, alleviating the need to call this function.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nsize::Integer: Return size is the number of continuous states of this instance \n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3GetNumberOfContinuousStates.\n\n\n\n\n\nfmi3GetNumberOfContinuousStates(fmu::FMU3)\n\nWrapper for fmi3GetNumberOfContinuousStates(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_ME_functions/#FMICore.fmi3GetNumberOfContinuousStates!","page":"FMI for Model Exchange","title":"FMICore.fmi3GetNumberOfContinuousStates!","text":"fmi3GetNumberOfContinuousStates!(c::FMU3Instance, nContinuousStates::Ref{Csize_t})\n\nThis function returns the number of continuous states. This function can only be called in Model Exchange. \n\nfmi3GetNumberOfContinuousStates must be called after a structural parameter is changed. As long as no structural parameters changed, the number of states is given in the modelDescription.xml, alleviating the need to call this function.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nnContinuousStates::Ref{Csize_t}: Stores the number of continuous states returned by the function\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3GetNumberOfContinuousStates!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.2. State: Instantiated\n\nThis function returns the number of continuous states. This function can only be called in Model Exchange. \n\nfmi3GetNumberOfContinuousStates must be called after a structural parameter is changed. As long as no structural parameters changed, the number of states is given in the modelDescription.xml, alleviating the need to call this function.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#deprecated-Functions","page":"Deprecated","title":"deprecated Functions","text":"","category":"section"},{"location":"deprecated/","page":"Deprecated","title":"Deprecated","text":"this doc page is necessary as all exported functions must be documented in the manual with documenter configred to check for missing documentation, therefor this hidden page exists","category":"page"},{"location":"deprecated/#internal-funtions:-remove-export?","page":"Deprecated","title":"internal funtions: remove export?","text":"","category":"section"},{"location":"deprecated/","page":"Deprecated","title":"Deprecated","text":"fmi2CallbackLogger\nfmi2CallbackAllocateMemory\nfmi2CallbackFreeMemory\nfmi3CallbackLogger\nfmi2CallbackFunctions\nfmi2CallbackStepFinished","category":"page"},{"location":"deprecated/#FMIImport.fmi2CallbackLogger","page":"Deprecated","title":"FMIImport.fmi2CallbackLogger","text":"Source: FMISpec2.0.2[p.21]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nFunction that is called in the FMU, usually if an fmi2XXX function, does not behave as desired. If “logger” is called with “status = fmi2OK”, then the message is a pure information message. “instanceName” is the instance name of the model that calls this function. “category” is the category of the message. The meaning of “category” is defined by the modeling environment that generated the FMU. Depending on this modeling environment, none, some or all allowed values of “category” for this FMU are defined in the modelDescription.xml file via element “<fmiModelDescription><LogCategories>”, see section 2.2.4. Only messages are provided by function logger that have a category according to a call to fmi2SetDebugLogging (see below). Argument “message” is provided in the same way and with the same format control as in function “printf” from the C standard library. [Typically, this function prints the message and stores it optionally in a log file.]\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMIImport.fmi2CallbackAllocateMemory","page":"Deprecated","title":"FMIImport.fmi2CallbackAllocateMemory","text":"Source: FMISpec2.0.2[p.21-22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nFunction that is called in the FMU if memory needs to be allocated. If attribute “canNotUseMemoryManagementFunctions = true” in <fmiModelDescription><ModelExchange / CoSimulation>, then function allocateMemory is not used in the FMU and a void pointer can be provided. If this attribute has a value of “false” (which is the default), the FMU must not use malloc, calloc or other memory allocation functions. One reason is that these functions might not be available for embedded systems on the target machine. Another reason is that the environment may have optimized or specialized memory allocation functions. allocateMemory returns a pointer to space for a vector of nobj objects, each of size “size” or NULL, if the request cannot be satisfied. The space is initialized to zero bytes [(a simple implementation is to use calloc from the C standard library)].\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMIImport.fmi2CallbackFreeMemory","page":"Deprecated","title":"FMIImport.fmi2CallbackFreeMemory","text":"Source: FMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nFunction that must be called in the FMU if memory is freed that has been allocated with allocateMemory. If a null pointer is provided as input argument obj, the function shall perform no action [(a simple implementation is to use free from the C standard library; in ANSI C89 and C99, the null pointer handling is identical as defined here)]. If attribute “canNotUseMemoryManagementFunctions = true” in <fmiModelDescription><ModelExchange / CoSimulation>, then function freeMemory is not used in the FMU and a null pointer can be provided.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMIImport.fmi3CallbackLogger","page":"Deprecated","title":"FMIImport.fmi3CallbackLogger","text":"fmi3CallbackLogger(_instanceEnvironment::Ptr{FMU3InstanceEnvironment},\n    _status::Cuint,\n    _category::Ptr{Cchar},\n    _message::Ptr{Cchar})\n\nFunction that is called in the FMU, usually if an fmi3XXX function, does not behave as desired. If “logger” is called with “status = fmi3OK”, then the message is a pure information message. \n\nArguments\n\n_instanceEnvironment::Ptr{FMU3InstanceEnvironment}: is the instance name of the model that calls this function. \n_status::Cuint: status of the message\n_category::Ptr{Cchar}: is the category of the message. The meaning of “category” is defined by the modeling environment that generated the FMU. Depending on this modeling environment, none, some or all allowed values of “category” for this FMU are defined in the modelDescription.xml file via element “<fmiModelDescription><LogCategories>”, see section 2.4.5. Only messages are provided by function logger that have a category according to a call to fmi3SetDebugLogging (see below). \n_message::Ptr{Cchar}: is provided in the same way and with the same format control as in function “printf” from the C standard library. [Typically, this function prints the message and stores it optionally in a log file.]\n\nReturns\n\nnothing\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMICore.fmi2CallbackFunctions","page":"Deprecated","title":"FMICore.fmi2CallbackFunctions","text":"Source: FMISpec2.0.2[p.19-22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nThe struct contains pointers to functions provided by the environment to be used by the FMU. It is not allowed to change these functions between fmi2Instantiate(..) and fmi2Terminate(..) calls. Additionally, a pointer to the environment is provided (componentEnvironment) that needs to be passed to the “logger” function, in order that the logger function can utilize data from the environment, such as mapping a valueReference to a string. In the unlikely case that fmi2Component is also needed in the logger, it has to be passed via argument componentEnvironment. Argument componentEnvironment may be a null pointer. The componentEnvironment pointer is also passed to the stepFinished(..) function in order that the environment can provide an efficient way to identify the slave that called stepFinished(..).\n\n\n\n\n\n","category":"type"},{"location":"deprecated/#FMIImport.fmi2CallbackStepFinished","page":"Deprecated","title":"FMIImport.fmi2CallbackStepFinished","text":"Source: FMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nOptional call back function to signal if the computation of a communication step of a co-simulation slave is finished. A null pointer can be provided. In this case the master must use fmiGetStatus(..) to query the status of fmi2DoStep. If a pointer to a function is provided, it must be called by the FMU after a completed communication step.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#deprecated","page":"Deprecated","title":"deprecated","text":"","category":"section"},{"location":"deprecated/","page":"Deprecated","title":"Deprecated","text":"Mostly wrappers that are not supposed to be used (call specific wrapped functions instead)","category":"page"},{"location":"deprecated/","page":"Deprecated","title":"Deprecated","text":"fmiSetReal\nfmiReset\nfmiGetGenerationTool\nfmiEnterContinuousTimeMode\nfmiGetEventIndicators\nfmiSetBoolean\nfmiFreeInstance!\nfmiInstantiate!\nfmiTerminate\nfmiDoStep\nfmiSetInteger\nfmiCompletedIntegratorStep\nfmiExitInitializationMode\nfmiSetupExperiment\nfmiSetDebugLogging\nfmiSerializedFMUstateSize\nfmiSerializeFMUstate\nfmiDeSerializeFMUstate\nfmiEnterInitializationMode\nfmiGetDirectionalDerivative!\nfmiNewDiscreteStates\nfmiGetDirectionalDerivative\nfmiSetRealInputDerivatives\nfmiGetGenerationDateAndTime\nfmiGetContinuousStates\nfmiSetContinuousStates\nfmiGetNominalsOfContinuousStates\nfmiSetTime\nfmiSetString\nfmiGetString\nfmiGetString!\nfmiGetInteger\nfmiGetInteger!\nfmiGetReal\nfmiGetReal!\nfmiGetBoolean\nfmiGetBoolean!","category":"page"},{"location":"deprecated/#FMI.fmiSetReal","page":"Deprecated","title":"FMI.fmiSetReal","text":"DEPRECATED     fmiSetReal(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{Array{<:Real}, <:Real})\n\nfmiSetReal(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, value::Array{fmi2Real})\n\nSet the values of an array of real variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Union{Array{<:Real}, <:Real}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiReset","page":"Deprecated","title":"FMI.fmiReset","text":"DEPRECATED     fmiReset(str::fmi2Struct)\n\nResets the FMU after a simulation run, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateTerminated or fmi2ComponentStateError.\nReturns an error if the reinstantiation failed.\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetGenerationTool","page":"Deprecated","title":"FMI.fmiGetGenerationTool","text":"fmiGetGenerationTool(str::fmi2StructMD)\n\nReturns the generationtool from str's model description.\n\nWrapper for fmi2GetGenerationTool.\n\n\n\n\n\nfmiGetGenerationTool(str::fmi3StructMD)\n\nReturns the generationtool from str's model description.\n\nWrapper for fmi3GetGenerationTool.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiEnterContinuousTimeMode","page":"Deprecated","title":"FMI.fmiEnterContinuousTimeMode","text":"DEPRECATED     fmiEnterContinuousTimeMode(str::fmi2Struct)\n\nThe model enters Continuous-Time Mode and all discrete-time equations become inactive and all relations are “frozen”. This function has to be called when changing from Event Mode  into Continuous-Time Mode.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetEventIndicators","page":"Deprecated","title":"FMI.fmiGetEventIndicators","text":"DEPRECATED     fmiGetEventIndicators(str::fmi2Struct)\n\nReturns the event indicators of the FMU\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\neventIndicators::Array{fmi2Real}:The event indicators are returned as a vector represented by an array of \"fmi2Real\" values.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetBoolean","page":"Deprecated","title":"FMI.fmiSetBoolean","text":"DEPRECATED     fmiSetBoolean(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, value::Array{fmi2Boolean})\n\nfmiSetBoolean(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{Array{Bool}, Bool})\n\nSet the values of an array of boolean variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Array of the FMI2 Data Typ fmi2ValueReference\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Union{Array{Bool}, Bool}: Argument values is an array or a single value with type Boolean or any subtyp\nvalue::Array{fmi2Boolean}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiFreeInstance!","page":"Deprecated","title":"FMI.fmiFreeInstance!","text":"DEPRECATED    fmiFreeInstance!(str::fmi2Struct)\n\nFrees the allocated memory of the last instance of the FMU.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiInstantiate!","page":"Deprecated","title":"FMI.fmiInstantiate!","text":"DEPRECATED fmiInstantiate!(fmu::FMU2; pushComponents::Bool = true, visible::Bool = false, loggingOn::Bool = false, externalCallbacks::Bool = false,                       logStatusOK::Bool=true, logStatusWarning::Bool=true, logStatusDiscard::Bool=true, logStatusError::Bool=true, logStatusFatal::Bool=true, logStatusPending::Bool=true)\n\nCreates a new instance of the FMU, version independent.\n\nCreate a new instance of the given fmu, adds a logger if logginOn == true.\n\nArguments\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\npushComponents::Bool = true:  pushComponents if the item component should be inserted in fmu.components(default = true).\nvisible::Bool = false: visible if the FMU should be started with graphic interface, if supported (default=false)\nloggingOn::Bool = false: loggingOn if the FMU should log and display function calls (default=false)\nexternalCallbacks::Bool = false: externalCallbacks if an external DLL should be used for the fmi2CallbackFunctions, this may improve readability of logging messages (default=false)\nlogStatusOK::Bool=true: logStatusOK whether to log status of kind fmi2OK (default=true)\nlogStatusWarning::Bool=true: logStatusWarning whether to log status of kind fmi2Warning (default=true)\nlogStatusDiscard::Bool=true: logStatusDiscard whether to log status of kind fmi2Discard (default=true)\nlogStatusError::Bool=true: logStatusError whether to log status of kind fmi2Error (default=true)\nlogStatusFatal::Bool=true: logStatusFatal whether to log status of kind fmi2Fatal (default=true)\nlogStatusPending::Bool=true: logStatusPending whether to log status of kind fmi2Pending (default=true)\n\nReturns\n\nnothing: if the instantiation failed. In addition, an error message appears.\ncomponent: Returns the instance of a new FMU component.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.19]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiTerminate","page":"Deprecated","title":"FMI.fmiTerminate","text":"DEPRECATED     fmiTerminate(str::fmi2Struct)\n\nInforms the FMU that the simulation run is terminated, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateContinuousTimeMode or fmi2ComponentStateEventMode.\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiDoStep","page":"Deprecated","title":"FMI.fmiDoStep","text":"DEPRECATED     fmiDoStep(str::fmi2Struct, c::FMU2Component, communicationStepSize::Union{Real, Nothing} = nothing; currentCommunicationPoint::Union{Real, Nothing} = nothing, noSetFMUStatePriorToCurrentPoint::Bool = true)\n\nfmiDoStep(str::fmi2Struct, c::FMU2Component, currentCommunicationPoint::fmi2Real, communicationStepSize::fmi2Real, noSetFMUStatePriorToCurrentPoint::fmi2Boolean)\n\nDoes one step in the CoSimulation FMU\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ncommunicationStepSize::Union{Real, Nothing} = nothing: Argument communicationStepSize contains a value of type Real or Nothing , if no argument is passed the default value nothing is used. communicationStepSize defines the communiction step size.\ncurrentCommunicationPoint::fmi2Real: Argument currentCommunicationPoint contains a value of type fmi2Real which is a identifier for a variable value . currentCommunicationPoint defines the current communication point of the master.\ncommunicationStepSize::fmi2Real: Argument communicationStepSize contains a value of type fmi2Real which is a identifier for a variable value. communicationStepSize defines the communiction step size.\nnoSetFMUStatePriorToCurrentPoint::fmi2Boolean: Argument noSetFMUStatePriorToCurrentPoint contains a value of type fmi2Boolean which is a identifier for a variable value. noSetFMUStatePriorToCurrentPoint indicates whether fmi2SetFMUStatewill no longer be called for time instants prior to currentCommunicationPoint in this simulation run.\n\nKeywords\n\ncurrentCommunicationPoint::Union{Real, Nothing} = nothing: Argument currentCommunicationPoint contains a value of type Real or type Nothing. If no argument is passed the default value nothing is used. currentCommunicationPoint defines the current communication point of the master.\nnoSetFMUStatePriorToCurrentPoint::Bool = true: Argument noSetFMUStatePriorToCurrentPoint contains a value of type Boolean. If no argument is passed the default value true is used. noSetFMUStatePriorToCurrentPoint indicates whether fmi2SetFMUState is no longer called for times before the currentCommunicationPoint in this simulation run Simulation run.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.2 Computation\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetInteger","page":"Deprecated","title":"FMI.fmiSetInteger","text":"DEPRECATED     fmiSetInteger(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{Array{<:Integer}, <:Integer})\n\nfmiSetInteger(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, value::Array{fmi2Integer})\n\nSet the values of an array of integer variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Union{Array{<:Integer}, <:Integer}: Argument values is an array or a single value with type Integer or any subtyp\nvalue::Array{fmi2Integer}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status indicates the success of the function call.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiCompletedIntegratorStep","page":"Deprecated","title":"FMI.fmiCompletedIntegratorStep","text":"DEPRECATED     fmiCompletedIntegratorStep(str::fmi2Struct, c::FMU2Component, noSetFMUStatePriorToCurrentPoint::fmi2Boolean)\n\nThis function must be called by the environment after every completed step\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nnoSetFMUStatePriorToCurrentPoint::fmi2Boolean: Argument noSetFMUStatePriorToCurrentPoint = fmi2True if fmi2SetFMUState  will no longer be called for time instants prior to current time in this simulation run.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\nenterEventMode::Array{fmi2Boolean, 1}: Returns enterEventMode[1] to signal to the environment if the FMU shall call fmi2EnterEventMode\nterminateSimulation::Array{fmi2Boolean, 1}: Returns terminateSimulation[1] to signal if the simulation shall be terminated.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiExitInitializationMode","page":"Deprecated","title":"FMI.fmiExitInitializationMode","text":"DEPRECATED     fmiExitInitializationMode(str::fmi2Struct)\n\nInforms the FMU to exit initialization mode, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInitializationMode.\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetupExperiment","page":"Deprecated","title":"FMI.fmiSetupExperiment","text":"DEPRECATED     fmiSetupExperiment(str::fmi2Struct, c::FMU2Component, startTime::Union{Real, Nothing} = nothing, stopTime::Union{Real, Nothing} = nothing; tolerance::Union{Real, Nothing} = nothing)\n\nInitialize the Simulation boundries\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstartTime::Union{Real, Nothing} = nothing: startTime is a real number which sets the value of starting time of the experiment. The default value is set automatically if doing nothing (default = nothing).\nstopTime::Union{Real, Nothing} = nothing: stopTime is a real number which sets the value of ending time of the experiment. The default value is set automatically if doing nothing (default = nothing).\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: tolerance is a real number which sets the value of tolerance range. The default value is set automatically if doing nothing (default = nothing).\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInstantiated.\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetDebugLogging","page":"Deprecated","title":"FMI.fmiSetDebugLogging","text":"DEPRECATED    fmiSetDebugLogging(str::fmi2Struct)\n\nControl the use of the logging callback function, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSerializedFMUstateSize","page":"Deprecated","title":"FMI.fmiSerializedFMUstateSize","text":"DEPRECATED     fmiSerializedFMUstateSize(str::fmi2Struct, c::FMU2Component, state::fmi2FMUstate)\n\nReturns the size of the byte vector in which the FMUstate can be stored.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nReturn size is an object that safely references a value of type Csize_t.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSerializeFMUstate","page":"Deprecated","title":"FMI.fmiSerializeFMUstate","text":"DEPRECATED     fmiSerializeFMUstate(str::fmi2Struct, c::FMU2Component, state::fmi2FMUstate)\n\nSerializes the data referenced by the pointer FMUstate and copies this data into the byte vector serializedState of length size to be provided by the environment.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nserialized:: Array{fmi2Byte}: Return serializedState contains the copy of the serialized data referenced by the pointer FMUstate\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiDeSerializeFMUstate","page":"Deprecated","title":"FMI.fmiDeSerializeFMUstate","text":"DEPRECATEDTODO     fmiDeSerializeFMUstate(str::fmi2Struct, c::FMU2Component, serializedState::Array{fmi2Byte})\n\nDeserialize the data in the serializedState fmi2Byte field\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nserializedState::Array{fmi2Byte}: Argument serializedState contains the fmi2Byte field to be deserialized.\n\nReturns\n\nReturn state is a pointer to a copy of the internal FMU state.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiEnterInitializationMode","page":"Deprecated","title":"FMI.fmiEnterInitializationMode","text":"DEPRECATED     fmiEnterInitializationMode(str::fmi2Struct)\n\nInforms the FMU to enter initializaton mode, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInstantiated.\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetDirectionalDerivative!","page":"Deprecated","title":"FMI.fmiGetDirectionalDerivative!","text":"DEPRECATEDTODO -> Arguments     fmiGetDirectionalDerivative!(str::fmi2Struct, c::FMU2Component,                                       vUnknownref::AbstractArray{fmi2ValueReference},                                       vKnownref::AbstractArray{fmi2ValueReference},                                       dvUnknown::AbstractArray,                                       dvKnown::Union{Array{fmi2Real}, Nothing} = nothing)\n\nfmiGetDirectionalDerivative!(str::fmi2Struct, c::FMU2Component,\n                                   vUnknown_ref::AbstractArray{fmi2ValueReference},\n                                   nUnknown::Csize_t,\n                                   vKnown_ref::AbstractArray{fmi2ValueReference},\n                                   nKnown::Csize_t,\n                                   dvKnown::AbstractArray{fmi2Real},\n                                   dvUnknown::AbstractArray)\n\nWrapper Function call to compute the partial derivative with respect to the variables vKnown_ref.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns.The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔvunknown = (δh / δvknown) Δv_known\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstracArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\ndvUnknown::AbstractArray: Stores the directional derivative vector values.\ndvKnown::Union{Array{fmi2Real}, Nothing} = nothing: If no seed vector is passed the value nothing is used. The vector values Compute the partial derivative with respect to the given entries in vector vKnown_ref with the matching evaluate of dvKnown.\ndvKnown::AbstractArray{fmi2Real}:The vector values Compute the partial derivative with respect to the given entries in vector vKnown_ref with the matching evaluate of dvKnown.\nnUnknown::Csize_t:\nnKnown::Csize_t:\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.9 Getting Partial Derivatives\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiNewDiscreteStates","page":"Deprecated","title":"FMI.fmiNewDiscreteStates","text":"DEPRECATED     fmiNewDiscreteStates(str::fmi2Struct)\n\nReturns the next discrete states\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\neventInfo::fmi2EventInfo*: Strut with fmi2Boolean Variables\n\nMore detailed:\n\nnewDiscreteStatesNeeded::fmi2Boolean: If newDiscreteStatesNeeded = fmi2True the FMU should stay in Event Mode, and the FMU requires to set new inputs to the FMU to compute and get the outputs and to call\n\nfmi2NewDiscreteStates again. If all FMUs return newDiscreteStatesNeeded = fmi2False call fmi2EnterContinuousTimeMode.\n\nterminateSimulation::fmi2Boolean: If terminateSimulation = fmi2True call fmi2Terminate\nnominalsOfContinuousStatesChanged::fmi2Boolean: If nominalsOfContinuousStatesChanged = fmi2True then the nominal values of the states have changed due to the function call and can be inquired with fmi2GetNominalsOfContinuousStates.\nvaluesOfContinuousStatesChanged::fmi2Boolean: If valuesOfContinuousStatesChanged = fmi2True, then at least one element of the continuous state vector has changed its value due to the function call. The new values of the states can be retrieved with fmi2GetContinuousStates. If no element of the continuous state vector has changed its value, valuesOfContinuousStatesChanged must return fmi2False.\nnextEventTimeDefined::fmi2Boolean: If nextEventTimeDefined = fmi2True, then the simulation shall integrate at most until time = nextEventTime, and shall call fmi2EnterEventMode at this time instant. If integration is stopped before nextEventTime, the definition of nextEventTime becomes obsolete.\nnextEventTime::fmi2Real: next event if nextEventTimeDefined=fmi2True\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetDirectionalDerivative","page":"Deprecated","title":"FMI.fmiGetDirectionalDerivative","text":"DEPRECATED     fmiGetDirectionalDerivative(str::fmi2Struct, c::FMU2Component,                                       vUnknownref::AbstractArray{fmi2ValueReference},                                       vKnownref::AbstractArray{fmi2ValueReference},                                       dvKnown::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nfmi2GetDirectionalDerivative(str::fmi2Struct, c::FMU2Component,\n                                    vUnknown_ref::fmi2ValueReference,\n                                    vKnown_ref::fmi2ValueReference,\n                                    dvKnown::fmi2Real = 1.0)\n\nThe Wrapper Function and the Direct function call to compute the partial derivative with respect to vKnown_ref.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns.The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔv_unknown = (δh / δv_known) Δv_known\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvUnknown_ref::fmi2ValueReference: Argument vUnknown_ref contains a value of typefmi2ValueReference which is an identifier of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\nvKnown_ref::fmi2ValueReference: Argument vKnown_ref contains a value of typefmi2ValueReference which is an identifier of a variable value of the model. vKnown_ref can be equated with v_known(variable described above).\ndvKnown::Union{AbstractArray{fmi2Real}, Nothing} = nothing: If no seed vector is passed the value nothing is used. The vector values Compute the partial derivative with respect to the given entries in vector vKnown_ref with the matching evaluate of dvKnown.\ndvKnown::Fmi2Real = 1.0: If no seed value is passed the value dvKnown = 1.0 is used. Compute the partial derivative with respect to vKnown_ref with the value dvKnown = 1.0.  # gehört das zu den v_rest values\n\nReturns\n\ndvUnknown::Array{fmi2Real}: Return dvUnknown contains the directional derivative vector values.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.9 Getting Partial Derivatives\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetRealInputDerivatives","page":"Deprecated","title":"FMI.fmiSetRealInputDerivatives","text":"DEPRECATED#Todo: Add types according spec\n\nfmiSetRealInputDerivatives(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, order, values)\n\nfmiSetRealInputDerivatives(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, order::Array{fmi2Integer}, value::Array{fmi2Real})\n\nSets the n-th time derivative of real input variables.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\norder::Array{fmi2Integer}: Argument order is an array of fmi2Integer values witch specifys the corresponding order of derivative of the real input variable.\nvalues::Array{fmi2Real}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetGenerationDateAndTime","page":"Deprecated","title":"FMI.fmiGetGenerationDateAndTime","text":"fmiGetGenerationDateAndTime(str::fmi2StructMD)\n\nReturns the generationdateandtime from str's model description.\n\nWrapper for fmi2GetGenerationDateAndTime.\n\n\n\n\n\nfmiGetGenerationDateAndTime(str::fmi3StructMD)\n\nReturns the generationdateandtime from str's model description.\n\nWrapper for fmi3GetGenerationDateAndTime.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetContinuousStates","page":"Deprecated","title":"FMI.fmiGetContinuousStates","text":"DEPRECATED     fmiGetContinuousStates(s::fmi2Struct)\n\nReturn the new (continuous) state vector x\n\nArguments\n\ns::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\ns::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\ns::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nx::Array{fmi2Real}: Returns an array of fmi2Real values representing the new continuous state vector x.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetContinuousStates","page":"Deprecated","title":"FMI.fmiSetContinuousStates","text":"DEPRECATED     fmiSetContinuousStates(str::fmi2Struct, c::FMU2Component,                                  x::AbstractArray{fmi2Real},                                  nx::Csize_t)\n\nfmiSetContinuousStates(str::fmi2Struct, c::FMU2Component,\n                             x::Union{AbstractArray{Float32},AbstractArray{Float64}})\n\nSet a new (continuous) state vector\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx::AbstractArray{fmi2Real}: Argument x contains values of type fmi2Real which is a alias type for Real data type.x is the AbstractArray of the vector values of Real input variables of function h that changes its value in the actual Mode.\nx::Union{AbstractArray{Float32},AbstractArray{Float64}}:\nnx::Csize_t: Argument nx defines the length of vector x and is provided for checking purposes\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetNominalsOfContinuousStates","page":"Deprecated","title":"FMI.fmiGetNominalsOfContinuousStates","text":"DEPRECATED     fmiGetNominalsOfContinuousStates(s::fmi2Struct)\n\nReturn the new (continuous) state vector x\n\nArguments\n\ns::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\ns::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\ns::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nx::Array{fmi2Real}: Returns an array of fmi2Real values representing the new continuous state vector x.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetTime","page":"Deprecated","title":"FMI.fmiSetTime","text":"DEPRECATED     fmiSetTime(c::fmi2Struct, c::FMU2Component, time::fmi2Real)\n\nfmiSetTime(c::fmi2Struct, c::FMU2Component, t::Real)\n\nSet a new time instant and re-initialize caching of variables that depend on time.\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ntime::fmi2Real: Argument time contains a value of type fmi2Real which is a alias type for Real data type. time sets the independent variable time t.\nt::Real: Argument t contains a value of type Real. t sets the independent variable time t.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiSetString","page":"Deprecated","title":"FMI.fmiSetString","text":"DEPRECATED     fmiSetString(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{Array{String}, String})\n\nfmiSetString(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, value::Union{Array{Ptr{Cchar}}, Array{Ptr{UInt8}}})\n\nSet the values of an array of string variables\n\nFor the exact rules on which type of variables fmi2SetXXX can be called see FMISpec2.0.2 section 2.2.7 , as well as FMISpec2.0.2 section 3.2.3 in case of ModelExchange and FMISpec2.0.2 section 4.2.4 in case of CoSimulation.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Array of the FMI2 Data Typ fmi2ValueReference\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Union{Array{String}, String}: Argument values is an array or a single value with type String.\nvalue::Vector{Ptr{Cchar}}: Argument values is an vector with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.46]: 2.2.7 Definition of Model Variables\nFMISpec2.0.2[p.46]: 3.2.3 State Machine of Calling Sequence\nFMISpec2.0.2[p.108]: 4.2.4 State Machine of Calling Sequence from Master to Slave\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetString","page":"Deprecated","title":"FMI.fmiGetString","text":"DEPRECATED     fmiGetString(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nReturns the string values of an array of variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi2String}:  Return values is an array with the actual values of these variables.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetString!","page":"Deprecated","title":"FMI.fmiGetString!","text":"DEPRECATED     fmiGetString!(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Array{fmi2String})\n\nfmiGetString!(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, value::Vector{Ptr{Cchar}})\n\nWrites the string values of an array of variables in the given field\n\nThese functions are especially used to get the actual values of output variables if a model is connected with other models.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Array of the FMI2 Data Typ fmi2ValueReference\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Union{Array{Bool}, Bool}: Argument values is an array or a single value with type Boolean or any subtyp.\nvalue::Vector{Ptr{Cchar}}: Argument values is an vector with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetInteger","page":"Deprecated","title":"FMI.fmiGetInteger","text":"DEPRECATED     fmiGetInteger(str::fmi2Struct,c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nReturns the integer values of an array of variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi2Integer}: Return values is an array with the actual values of these variables.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetInteger!","page":"Deprecated","title":"FMI.fmiGetInteger!","text":"DEPRECATED     function fmiGetInteger!(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Array{fmi2Integer})\n\nfunction fmiGetInteger!(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Array{fmi2Integer})\n\nWrites the integer values of an array of variables in the given field\n\nfmi2GetInteger! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Array{fmi2Integer}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetReal","page":"Deprecated","title":"FMI.fmiGetReal","text":"fmiGetReal(str::fmi2Struct, vr::fmi2ValueReferenceFormat)\n\nReturns the real values of an array of variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fm2Real}: returns values of an array of fmi2Real variables with the dimension of fmi2ValueReferenceFormat length.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetReal,fmi2ValueReferenceFormat, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetReal!","page":"Deprecated","title":"FMI.fmiGetReal!","text":"DEPRECATED     fmiGetReal!(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Array{fmi2Real})\n\nfmiGetReal!(str::fmi2Struct, c::FMU2Component, vr::Array{fmi2ValueReference}, nvr::Csize_t, value::Array{fmi2Real})\n\nWrites the real values of an array of variables in the given field\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Array{fm2Real}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetBoolean","page":"Deprecated","title":"FMI.fmiGetBoolean","text":"DEPRECATED     fmiGetBoolean(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nReturns the boolean values of an array of variables\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi2Boolean}: Return values is an array with the actual values of these variables.\n\n\n\n\n\n","category":"function"},{"location":"deprecated/#FMI.fmiGetBoolean!","page":"Deprecated","title":"FMI.fmiGetBoolean!","text":"DEPRECATED     fmiGetBoolean!(str::fmi2Struct, c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Array{fmi2Boolean})\n\nWrites the boolean values of an array of variables in the given field\n\nfmi2GetBoolean! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Union{Array{<:Integer}, <:Integer}: Argument values is an array or a single value with type Integer or any subtyp\nvalue::Array{fmi2Integer}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\n","category":"function"},{"location":"examples/multithreading/#Multithreading","page":"Multithreading","title":"Multithreading","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Tutorial by Jonas Wilfert, Tobias Thummerer","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"🚧 This tutorial is under revision and will be replaced by an up-to-date version soon 🚧","category":"page"},{"location":"examples/multithreading/#License","page":"Multithreading","title":"License","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar, Jonas Wilfert\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/multithreading/#Motivation","page":"Multithreading","title":"Motivation","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"This Julia Package FMI.jl is motivated by the use of simulation models in Julia. Here the FMI specification is implemented. FMI (Functional Mock-up Interface) is a free standard (fmi-standard.org) that defines a container and an interface to exchange dynamic models using a combination of XML files, binaries and C code zipped into a single file. The user can thus use simulation models in the form of an FMU (Functional Mock-up Units). Besides loading the FMU, the user can also set values for parameters and states and simulate the FMU both as co-simulation and model exchange simulation.","category":"page"},{"location":"examples/multithreading/#Introduction-to-the-example","page":"Multithreading","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"This example shows how to parallelize the computation of an FMU in FMI.jl. We can compute a batch of FMU-evaluations in parallel with different initial settings. Parallelization can be achieved using multithreading or using multiprocessing. This example shows multithreading, check multiprocessing.ipynb for multiprocessing. Advantage of multithreading is a lower communication overhead as well as lower RAM usage. However in some cases multiprocessing can be faster as the garbage collector is not shared.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"The model used is a one-dimensional spring pendulum with friction. The object-orientated structure of the SpringFrictionPendulum1D can be seen in the following graphic.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"(Image: svg)  ","category":"page"},{"location":"examples/multithreading/#Target-group","page":"Multithreading","title":"Target group","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"The example is primarily intended for users who work in the field of simulations. The example wants to show how simple it is to use FMUs in Julia.","category":"page"},{"location":"examples/multithreading/#Other-formats","page":"Multithreading","title":"Other formats","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/multithreading/#Getting-started","page":"Multithreading","title":"Getting started","text":"","category":"section"},{"location":"examples/multithreading/#Installation-prerequisites","page":"Multithreading","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":" Description Command Alternative\n1. Enter Package Manager via ] \n2. Install FMI via add FMI add \" https://github.com/ThummeTo/FMI.jl \"\n3. Install FMIZoo via add FMIZoo add \" https://github.com/ThummeTo/FMIZoo.jl \"\n4. Install FMICore via add FMICore add \" https://github.com/ThummeTo/FMICore.jl \"\n5. Install Folds via add Folds \n6. Install BenchmarkTools via add BenchmarkTools ","category":"page"},{"location":"examples/multithreading/#Code-section","page":"Multithreading","title":"Code section","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"# imports\nusing FMI\nusing FMIZoo\nusing Folds\nusing BenchmarkTools","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"First, check the amount of available threads:","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Threads.nthreads()","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"1","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"If the number of available threads doesn't match your expections, you can increase the number of threads available to the Julia process like described here.","category":"page"},{"location":"examples/multithreading/#Simulation-setup","page":"Multithreading","title":"Simulation setup","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Next, the start time and end time of the simulation are set. Here we also decide the size of the batch.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"t_start = 0.0\nt_step = 0.1\nt_stop = 10.0\ntspan = (t_start, t_stop)\ntData = collect(t_start:t_step:t_stop)\n\n# Best if batchSize is a multiple of the threads/cores\nbatchSize = Threads.nthreads()\n\n# Define an array of arrays randomly\ninput_values = collect(collect.(eachrow(rand(batchSize,2))))\n","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"1-element Vector{Vector{Float64}}:\n [0.7704202500196856, 0.27449702630609907]","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"We need to instantiate one FMU for each parallel execution, as they cannot be easily shared among different threads.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"# a single FMU to compare the performance\nrealFMU = fmiLoad(\"SpringPendulum1D\", \"Dymola\", \"2022x\")\n\n# the FMU batch\nrealFMUBatch = [fmiLoad(\"SpringPendulum1D\", \"Dymola\", \"2022x\") for _ in 1:batchSize]","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"1-element Vector{FMU2}:\n Model name:\tSpringPendulum1D\nType:\t\t1","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"We define a helper function to calculate the FMU solution and combine it into an Matrix.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"function runCalcFormatted(fmu::FMU2, x0::Vector{Float64}, recordValues::Vector{String}=[\"mass.s\", \"mass.v\"])\n    data = fmiSimulateME(fmu, tspan; recordValues=recordValues, saveat=tData, x0=x0, showProgress=false, dtmax=1e-4)\n    return reduce(hcat, data.states.u)\nend","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"runCalcFormatted (generic function with 2 methods)","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Running a single evaluation is pretty quick, therefore the speed can be better tested with BenchmarkTools.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"@benchmark data = runCalcFormatted(realFMU, rand(2))","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"BenchmarkTools.Trial: 3 samples with 1 evaluation.\n Range \u001b[90m(\u001b[39m\u001b[36m\u001b[1mmin\u001b[22m\u001b[39m … \u001b[35mmax\u001b[39m\u001b[90m):  \u001b[39m\u001b[36m\u001b[1m2.080 s\u001b[22m\u001b[39m … \u001b[35m  2.107 s\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmin … max\u001b[90m): \u001b[39m1.73% … 1.73%\n Time  \u001b[90m(\u001b[39m\u001b[34m\u001b[1mmedian\u001b[22m\u001b[39m\u001b[90m):     \u001b[39m\u001b[34m\u001b[1m2.082 s              \u001b[22m\u001b[39m\u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmedian\u001b[90m):    \u001b[39m1.72%\n Time  \u001b[90m(\u001b[39m\u001b[32m\u001b[1mmean\u001b[22m\u001b[39m ± \u001b[32mσ\u001b[39m\u001b[90m):   \u001b[39m\u001b[32m\u001b[1m2.090 s\u001b[22m\u001b[39m ± \u001b[32m15.129 ms\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmean ± σ\u001b[90m):  \u001b[39m1.72% ± 0.01%\n\n  \u001b[34m█\u001b[39m\u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[32m \u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[39m \n  \u001b[34m█\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[32m▁\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m \u001b[39m▁\n  2.08 s\u001b[90m         Histogram: frequency by time\u001b[39m        2.11 s \u001b[0m\u001b[1m<\u001b[22m\n\n Memory estimate\u001b[90m: \u001b[39m\u001b[33m474.73 MiB\u001b[39m, allocs estimate\u001b[90m: \u001b[39m\u001b[33m11802668\u001b[39m.","category":"page"},{"location":"examples/multithreading/#Single-Threaded-Batch-Execution","page":"Multithreading","title":"Single Threaded Batch Execution","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"To compute a batch we can collect multiple evaluations. In a single threaded context we can use the same FMU for every call.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"println(\"Single Threaded\")\n@benchmark collect(runCalcFormatted(realFMU, i) for i in input_values)","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Single Threaded\n\n\n\n\n\nBenchmarkTools.Trial: 3 samples with 1 evaluation.\n Range \u001b[90m(\u001b[39m\u001b[36m\u001b[1mmin\u001b[22m\u001b[39m … \u001b[35mmax\u001b[39m\u001b[90m):  \u001b[39m\u001b[36m\u001b[1m2.082 s\u001b[22m\u001b[39m … \u001b[35m  2.114 s\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmin … max\u001b[90m): \u001b[39m1.71% … 1.72%\n Time  \u001b[90m(\u001b[39m\u001b[34m\u001b[1mmedian\u001b[22m\u001b[39m\u001b[90m):     \u001b[39m\u001b[34m\u001b[1m2.082 s              \u001b[22m\u001b[39m\u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmedian\u001b[90m):    \u001b[39m1.74%\n Time  \u001b[90m(\u001b[39m\u001b[32m\u001b[1mmean\u001b[22m\u001b[39m ± \u001b[32mσ\u001b[39m\u001b[90m):   \u001b[39m\u001b[32m\u001b[1m2.093 s\u001b[22m\u001b[39m ± \u001b[32m18.692 ms\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmean ± σ\u001b[90m):  \u001b[39m1.75% ± 0.05%\n\n  \u001b[34m█\u001b[39m\u001b[39m█\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[32m \u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[39m \n  \u001b[34m█\u001b[39m\u001b[39m█\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[32m▁\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m \u001b[39m▁\n  2.08 s\u001b[90m         Histogram: frequency by time\u001b[39m        2.11 s \u001b[0m\u001b[1m<\u001b[22m\n\n Memory estimate\u001b[90m: \u001b[39m\u001b[33m474.73 MiB\u001b[39m, allocs estimate\u001b[90m: \u001b[39m\u001b[33m11802671\u001b[39m.","category":"page"},{"location":"examples/multithreading/#Multithreaded-Batch-Execution","page":"Multithreading","title":"Multithreaded Batch Execution","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"In a multithreaded context we have to provide each thread it's own fmu, as they are not thread safe. To spread the execution of a function to multiple threads, the library Folds can be used.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"println(\"Multi Threaded\")\n@benchmark Folds.collect(runCalcFormatted(fmu, i) for (fmu, i) in zip(realFMUBatch, input_values))","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"Multi Threaded\n\n\n\n\n\nBenchmarkTools.Trial: 3 samples with 1 evaluation.\n Range \u001b[90m(\u001b[39m\u001b[36m\u001b[1mmin\u001b[22m\u001b[39m … \u001b[35mmax\u001b[39m\u001b[90m):  \u001b[39m\u001b[36m\u001b[1m2.084 s\u001b[22m\u001b[39m … \u001b[35m  2.105 s\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmin … max\u001b[90m): \u001b[39m1.72% … 1.72%\n Time  \u001b[90m(\u001b[39m\u001b[34m\u001b[1mmedian\u001b[22m\u001b[39m\u001b[90m):     \u001b[39m\u001b[34m\u001b[1m2.098 s              \u001b[22m\u001b[39m\u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmedian\u001b[90m):    \u001b[39m1.72%\n Time  \u001b[90m(\u001b[39m\u001b[32m\u001b[1mmean\u001b[22m\u001b[39m ± \u001b[32mσ\u001b[39m\u001b[90m):   \u001b[39m\u001b[32m\u001b[1m2.096 s\u001b[22m\u001b[39m ± \u001b[32m11.002 ms\u001b[39m  \u001b[90m┊\u001b[39m GC \u001b[90m(\u001b[39mmean ± σ\u001b[90m):  \u001b[39m1.74% ± 0.03%\n\n  \u001b[34m█\u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[32m \u001b[39m\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m \u001b[39m█\u001b[39m \u001b[39m \n  \u001b[34m█\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[32m▁\u001b[39m\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m▁\u001b[39m█\u001b[39m \u001b[39m▁\n  2.08 s\u001b[90m         Histogram: frequency by time\u001b[39m        2.11 s \u001b[0m\u001b[1m<\u001b[22m\n\n Memory estimate\u001b[90m: \u001b[39m\u001b[33m474.73 MiB\u001b[39m, allocs estimate\u001b[90m: \u001b[39m\u001b[33m11802686\u001b[39m.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"As you can see, there is a significant speed-up in the median execution time. But: The speed-up is often much smaller than Threads.nthreads(), this has different reasons. For a rule of thumb, the speed-up should be around n/2 on a n-core-processor with n threads for the Julia process.","category":"page"},{"location":"examples/multithreading/#Unload-FMU","page":"Multithreading","title":"Unload FMU","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"After calculating the data, the FMU is unloaded and all unpacked data on disc is removed.","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"fmiUnload(realFMU)\nfmiUnload.(realFMUBatch)","category":"page"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"1-element Vector{Nothing}:\n nothing","category":"page"},{"location":"examples/multithreading/#Summary","page":"Multithreading","title":"Summary","text":"","category":"section"},{"location":"examples/multithreading/","page":"Multithreading","title":"Multithreading","text":"In this tutorial it is shown how multi threading with Folds.jl can be used to improve the performance for calculating a Batch of FMUs.","category":"page"},{"location":"fmi2_lowlevel_library_constants/#FMI2-Constants-in-FMI-Import/Core-.jl","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMI2 Constants in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi2_lowlevel_library_constants/","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMI2 Constants in FMI Import/Core .jl","text":"fmi2True\nfmi2False\nfmi2StatusOK\nfmi2StatusWarning\nfmi2StatusPending\nfmi2StatusError\nfmi2StatusDiscard\nfmi2StatusFatal","category":"page"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2True","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2True","text":"Source: FMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section. All definitions in this section are provided in the header file “fmi2TypesPlatform.h”.\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2False","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2False","text":"Source: FMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nTo simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section. All definitions in this section are provided in the header file “fmi2TypesPlatform.h”.\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2StatusOK","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2StatusOK","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2StatusWarning","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2StatusWarning","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2StatusPending","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2StatusPending","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2StatusError","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2StatusError","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2StatusDiscard","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2StatusDiscard","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_library_constants/#FMICore.fmi2StatusFatal","page":"FMI2 Constants in FMI Import/Core .jl","title":"FMICore.fmi2StatusFatal","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"constant"},{"location":"fmi2_lowlevel_ME_functions/#FMI-for-Model-Exchange","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"","category":"section"},{"location":"fmi2_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"This chapter contains the interface description to access the equations of a dynamic system from a C program.","category":"page"},{"location":"fmi2_lowlevel_ME_functions/#Providing-Independent-Variables-and-Re-initialization-of-Caching","page":"FMI for Model Exchange","title":"Providing Independent Variables and Re-initialization of Caching","text":"","category":"section"},{"location":"fmi2_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"Depending on the situation, different variables need to be computed. In order to be efficient, it is important that the interface requires only the computation of variables that are needed in the present context. The state derivatives shall be reused from the previous call. This feature is called “caching of variables” in the sequel. Caching requires that the model evaluation can detect when the input arguments, like time or states, have changed.","category":"page"},{"location":"fmi2_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"fmi2SetTime\nfmi2SetContinuousStates","category":"page"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2SetTime","page":"FMI for Model Exchange","title":"FMICore.fmi2SetTime","text":"fmi2SetTime(c::FMU2Component, \n                time::fmi2Real; \n                soft::Bool=false,\n                track::Bool=true,\n                force::Bool=c.fmu.executionConfig.force,\n                time_shift::Bool=c.fmu.executionConfig.autoTimeShift)\n\nSet a new time instant and re-initialize caching of variables that depend on time, provided the newly provided time value is different to the previously set time value (variables that depend solely on constants or parameters need not to be newly computed in the sequel, but the previously computed values can be reused).\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ntime::fmi2Real: Argument time contains a value of type fmi2Real which is a alias type for Real data type. time sets the independent variable time t.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the command is only performed if the FMU is in an allowed state for this command.\n\n-track::Bool=true: If the Keyword track = true\n\ntime_shift::Bool=c.fmu.executionConfig.autoTimeShift:\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\nSee also fmi2SetTime.\n\n\n\n\n\nfmiSetTime(c::FMU2Component, t::Real)\n\nSet a new time instant and re-initialize caching of variables that depend on time.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nt::Real: Argument t contains a value of type Real. t sets the independent variable time t.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\nSee also fmi2SetTime\n\n\n\n\n\nSource: FMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\nSet a new time instant and re-initialize caching of variables that depend on time, provided the newly provided time value is different to the previously set time value (variables that depend solely on constants or parameters need not to be newly computed in the sequel, but the previously computed values can be reused).\n\n\n\n\n\nfmi2SetTime(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetTime(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2SetContinuousStates","page":"FMI for Model Exchange","title":"FMICore.fmi2SetContinuousStates","text":"fmiSetContinuousStates(c::FMU2Component,\n                             x::Union{AbstractArray{Float32},AbstractArray{Float64}})\n\nSet a new (continuous) state vector and reinitialize chaching of variables that depend on states.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx::Union{AbstractArray{Float32},AbstractArray{Float64}}:Argument x is the AbstractArray of the vector values of Float64 or Float32.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\nSee also fmi2SetContinuousStates.\n\n\n\n\n\nSource: FMISpec2.0.2[p.83]: 3.2.1 Providing Independent Variables and Re-initialization of Caching\n\nSet a new (continuous) state vector and re-initialize caching of variables that depend on the states. Argument nx is the length of vector x and is provided for checking purposes\n\n\n\n\n\nfmi2SetContinuousStates(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetContinuousStates(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#Evaluation-of-Model-Equations","page":"FMI for Model Exchange","title":"Evaluation of Model Equations","text":"","category":"section"},{"location":"fmi2_lowlevel_ME_functions/","page":"FMI for Model Exchange","title":"FMI for Model Exchange","text":"fmi2EnterEventMode\nfmi2NewDiscreteStates\nfmi2NewDiscreteStates!\nfmi2EnterContinuousTimeMode\nfmi2CompletedIntegratorStep\nfmi2CompletedIntegratorStep!\nfmi2GetDerivatives\nfmi2GetDerivatives!\nfmi2GetEventIndicators\nfmi2GetEventIndicators!\nfmi2GetContinuousStates\nfmi2GetContinuousStates!\nfmi2GetNominalsOfContinuousStates\nfmi2GetNominalsOfContinuousStates!","category":"page"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2EnterEventMode","page":"FMI for Model Exchange","title":"FMICore.fmi2EnterEventMode","text":"fmi2EnterEventMode(c::FMU2Component; soft::Bool=false)\n\nThe model enters Event Mode from the Continuous-Time Mode and discrete-time equations may become active (and relations are not “frozen”).\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the command is only performed if the FMU is in an allowed state for this command.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2EnterEventMode.\n\n\n\n\n\nSource: FMISpec2.0.2[p.84]: 3.2.2 Evaluation of Model Equations\n\nThe model enters Event Mode from the Continuous-Time Mode and discrete-time equations may become active (and relations are not “frozen”).\n\n\n\n\n\nfmi2EnterEventMode(fmu::FMU2)\n\nWrapper for fmi2EnterEventMode(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\nDEPRECATED     fmi2EnterEventMode(str::fmi2Struct)\n\nThe model enters Event Mode from the Continuous-Time Mode and discrete-time equations may become active (and relations are not “frozen”).\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMIImport.fmi2NewDiscreteStates","page":"FMI for Model Exchange","title":"FMIImport.fmi2NewDiscreteStates","text":"fmi2NewDiscreteStates(c::FMU2Component)\n\nReturns the next discrete states\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\neventInfo::fmi2EventInfo*: Strut with fmi2Boolean Variables\n\nMore detailed:\n\nnewDiscreteStatesNeeded::fmi2Boolean: If newDiscreteStatesNeeded = fmi2True the FMU should stay in Event Mode, and the FMU requires to set new inputs to the FMU to compute and get the outputs and to call\n\nfmi2NewDiscreteStates again. If all FMUs return newDiscreteStatesNeeded = fmi2False call fmi2EnterContinuousTimeMode.\n\nterminateSimulation::fmi2Boolean: If terminateSimulation = fmi2True call fmi2Terminate\nnominalsOfContinuousStatesChanged::fmi2Boolean: If nominalsOfContinuousStatesChanged = fmi2True then the nominal values of the states have changed due to the function call and can be inquired with fmi2GetNominalsOfContinuousStates.\nvaluesOfContinuousStatesChanged::fmi2Boolean: If valuesOfContinuousStatesChanged = fmi2True, then at least one element of the continuous state vector has changed its value due to the function call. The new values of the states can be retrieved with fmi2GetContinuousStates. If no element of the continuous state vector has changed its value, valuesOfContinuousStatesChanged must return fmi2False.\nnextEventTimeDefined::fmi2Boolean: If nextEventTimeDefined = fmi2True, then the simulation shall integrate at most until time = nextEventTime, and shall call fmi2EnterEventMode at this time instant. If integration is stopped before nextEventTime, the definition of nextEventTime becomes obsolete.\nnextEventTime::fmi2Real: next event if nextEventTimeDefined=fmi2True\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2NewDiscreteStates.\n\n\n\n\n\nfmi2NewDiscreteStates(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2NewDiscreteStates(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2NewDiscreteStates!","page":"FMI for Model Exchange","title":"FMICore.fmi2NewDiscreteStates!","text":"fmi2NewDiscreteStates!(c::FMU2Component, eventInfo::fmi2EventInfo)\n\nThe FMU is in Event Mode and the super dense time is incremented by this call.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\neventInfo::fmi2EventInfo*: Strut with fmi2Boolean Variables that\n\nMore detailed:\n\nnewDiscreteStatesNeeded::fmi2Boolean: If newDiscreteStatesNeeded = fmi2True the FMU should stay in Event Mode, and the FMU requires to set new inputs to the FMU to compute and get the outputs and to call\n\nfmi2NewDiscreteStates again. If all FMUs return newDiscreteStatesNeeded = fmi2False call fmi2EnterContinuousTimeMode.\n\nterminateSimulation::fmi2Boolean: If terminateSimulation = fmi2True call fmi2Terminate\nnominalsOfContinuousStatesChanged::fmi2Boolean: If nominalsOfContinuousStatesChanged = fmi2True then the nominal values of the states have changed due to the function call and can be inquired with fmi2GetNominalsOfContinuousStates.\nvaluesOfContinuousStatesChanged::fmi2Boolean: If valuesOfContinuousStatesChanged = fmi2True, then at least one element of the continuous state vector has changed its value due to the function call. The new values of the states can be retrieved with fmi2GetContinuousStates. If no element of the continuous state vector has changed its value, valuesOfContinuousStatesChanged must return fmi2False.\nnextEventTimeDefined::fmi2Boolean: If nextEventTimeDefined = fmi2True, then the simulation shall integrate at most until time = nextEventTime, and shall call fmi2EnterEventMode at this time instant. If integration is stopped before nextEventTime, the definition of nextEventTime becomes obsolete.\nnextEventTime::fmi2Real: next event if nextEventTimeDefined=fmi2True\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2NewDiscreteStates.\n\n\n\n\n\nSource: FMISpec2.0.2[p.84]: 3.2.2 Evaluation of Model Equations\n\nThe FMU is in Event Mode and the super dense time is incremented by this call.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2EnterContinuousTimeMode","page":"FMI for Model Exchange","title":"FMICore.fmi2EnterContinuousTimeMode","text":"fmi2EnterContinuousTimeMode(c::FMU2Component; soft::Bool=false)\n\nThe model enters Continuous-Time Mode and all discrete-time equations become inactive and all relations are “frozen”. This function has to be called when changing from Event Mode (after the global event iteration in Event Mode over all involved FMUs and other models has converged) into Continuous-Time Mode.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the command is only performed if the FMU is in an allowed state for this command.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2EnterContinuousTimeMode.\n\n\n\n\n\nSource: FMISpec2.0.2[p.85]: 3.2.2 Evaluation of Model Equations\n\nThe model enters Continuous-Time Mode and all discrete-time equations become inactive and all relations are “frozen”. This function has to be called when changing from Event Mode (after the global event iteration in Event Mode over all involved FMUs and other models has converged) into Continuous-Time Mode.\n\n\n\n\n\nfmi2EnterContinuousTimeMode(fmu::FMU2)\n\nWrapper for fmi2EnterContinuousTimeMode(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMIImport.fmi2CompletedIntegratorStep","page":"FMI for Model Exchange","title":"FMIImport.fmi2CompletedIntegratorStep","text":"fmiCompletedIntegratorStep(c::FMU2Component, noSetFMUStatePriorToCurrentPoint::fmi2Boolean)\n\nThis function must be called by the environment after every completed step\n\nArguments\n\nC::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nnoSetFMUStatePriorToCurrentPoint::fmi2Boolean: Argument noSetFMUStatePriorToCurrentPoint = fmi2True if fmi2SetFMUState  will no longer be called for time instants prior to current time in this simulation run.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\nenterEventMode::Array{fmi2Boolean, 1}: Returns enterEventMode[1] to signal to the environment if the FMU shall call fmi2EnterEventMode\nterminateSimulation::Array{fmi2Boolean, 1}: Returns terminateSimulation[1] to signal if the simulation shall be terminated.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2CompletedIntegratorStep.\n\n\n\n\n\nfmi2CompletedIntegratorStep(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2CompletedIntegratorStep(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2CompletedIntegratorStep!","page":"FMI for Model Exchange","title":"FMICore.fmi2CompletedIntegratorStep!","text":"fmi2CompletedIntegratorStep!(c::FMU2Component,\n                                noSetFMUStatePriorToCurrentPoint::fmi2Boolean,\n                                enterEventMode::Ref{fmi2Boolean},\n                                terminateSimulation::Ref{fmi2Boolean})\n\nThis function must be called by the environment after every completed step of the integrator provided the capability flag completedIntegratorStepNotNeeded = false.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nnoSetFMUStatePriorToCurrentPoint::fmi2Boolean: Argument noSetFMUStatePriorToCurrentPoint = fmi2True if fmi2SetFMUState  will no longer be called for time instants prior to current time in this simulation run.\nenterEventMode::Ref{fmi2Boolean}: Argument enterEventMode points to the return value (fmi2Boolean) which signals to the environment if the FMU shall call fmi2EnterEventMode. fmi2Boolean is an alias type for Boolean data type.\nterminateSimulation::Ref{fmi2Boolean}: Argument terminateSimulation points to the return value (fmi2Boolean) which signals signal if the simulation shall be terminated. fmi2Boolean is an alias type for Boolean data type.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2CompletedIntegratorStep!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.85]: 3.2.2 Evaluation of Model Equations\n\nThis function must be called by the environment after every completed step of the integrator provided the capability flag completedIntegratorStepNotNeeded = false. If enterEventMode == fmi2True, the event mode must be entered If terminateSimulation == fmi2True, the simulation shall be terminated\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMIImport.fmi2GetDerivatives","page":"FMI for Model Exchange","title":"FMIImport.fmi2GetDerivatives","text":"fmi2GetDerivatives(c::FMU2Component)\n\nCompute state derivatives at the current time instant and for the current states.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nderivatives::Array{fmi2Real}: Returns an array of fmi2Real values representing the derivatives for the current states. The ordering of the elements of the derivatives vector is identical to the ordering of the state\n\nvector.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetDerivatives!.\n\n\n\n\n\nfmi2GetDerivatives(fmu::FMU2)\n\nWrapper for fmi2GetDerivatives(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2GetDerivatives!","page":"FMI for Model Exchange","title":"FMICore.fmi2GetDerivatives!","text":"fmi2GetDerivatives!(c::FMU2Component,\n                   derivatives::AbstractArray{fmi2Real},\n                   nx::Csize_t)\n\nCompute state derivatives at the current time instant and for the current states.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nderivatives::AbstractArray{fmi2Real}: Argument derivatives contains values of type fmi2Real which is a alias type for Real data type.derivatives is the AbstractArray which contains the Real values of the vector that represent the derivatives. The ordering of the elements of the derivatives vector is identical to the ordering of the state vector.\nnx::Csize_t: Argument nx defines the length of vector derivatives and is provided for checking purposes\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetDerivatives!.\n\n\n\n\n\nfmi2GetDerivatives!(c::FMU2Component, derivatives::AbstractArray{fmi2Real})\n\nCompute state derivatives at the current time instant and for the current states.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nderivatives::Array{fmi2Real}: Stores fmi2Real values representing the derivatives for the current states. The ordering of the elements of the derivatives vector is identical to the ordering of the state vector.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetDerivatives!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.86]: 3.2.2 Evaluation of Model Equations\n\nCompute state derivatives at the current time instant and for the current states.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMIImport.fmi2GetEventIndicators","page":"FMI for Model Exchange","title":"FMIImport.fmi2GetEventIndicators","text":"fmi2GetEventIndicators(c::FMU2Component)\n\nReturns the event indicators of the FMU\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\neventIndicators::Array{fmi2Real}:The event indicators are returned as a vector represented by an array of \"fmi2Real\" values.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetEventIndicators!.\n\n\n\n\n\nfmi2GetEventIndicators(fmu::FMU2)\n\nWrapper for fmi2GetEventIndicators() without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2GetEventIndicators!","page":"FMI for Model Exchange","title":"FMICore.fmi2GetEventIndicators!","text":"fmi2GetEventIndicators!(c::FMU2Component, eventIndicators::AbstractArray{fmi2Real}, ni::Csize_t)\n\nCompute event indicators at the current time instant and for the current states.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\neventIndicators::AbstractArray{fmi2Real}: Argument eventIndicators contains values of type fmi2Real which is a alias type for Real data type.eventIndicators is the AbstractArray which contains the Real values of the vector that represent the event indicators.\nni::Csize_t: Argument ni defines the length of vector eventIndicators and is provided for checking purposes\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetEventIndicators!.\n\n\n\n\n\nfmi2GetEventIndicators!(c::FMU2Component, eventIndicators::AbstractArray{fmi2Real})\n\nReturns the event indicators of the FMU.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\neventIndicators::AbstractArray{fmi2Real}:The event indicators are in an AbstractArray represented by an array of \"fmi2Real\" values.\n\nReturns\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\n\n\n\n\nSource: FMISpec2.0.2[p.86]: 3.2.2 Evaluation of Model Equations\n\nCompute event indicators at the current time instant and for the current states.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMIImport.fmi2GetContinuousStates","page":"FMI for Model Exchange","title":"FMIImport.fmi2GetContinuousStates","text":"fmi2GetContinuousStates(c::FMU2Component)\n\nReturn the new (continuous) state vector x\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nx::Array{fmi2Real}: Returns an array of fmi2Real values representing the new continuous state vector x.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetEventIndicators!.\n\n\n\n\n\nfmi2GetContinuousStates(fmu::FMU2)fmi2ins\n\nWrapper for fmi2GetContinuousStates(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2GetContinuousStates!","page":"FMI for Model Exchange","title":"FMICore.fmi2GetContinuousStates!","text":"fmi2GetContinuousStates!(c::FMU2Component,\n                            x::AbstractArray{fmi2Real},\n                            nx::Csize_t)\n\nStores the new (continuous) state vector in x.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx::AbstractArray{fmi2Real}: Argument x contains values of type fmi2Real which is a alias type for Real data type.x is the AbstractArray which contains the Real values of the vector that represent the new state vector.\nnx::Csize_t: Argument nx defines the length of vector x and is provided for checking purposes\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetEventIndicators!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.86]: 3.2.2 Evaluation of Model Equations\n\nReturn the new (continuous) state vector x.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMIImport.fmi2GetNominalsOfContinuousStates","page":"FMI for Model Exchange","title":"FMIImport.fmi2GetNominalsOfContinuousStates","text":"fmi2GetNominalsOfContinuousStates(c::FMU2Component)\n\nReturn the new (continuous) state vector x\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nx::Array{fmi2Real}: Returns an array of fmi2Real values representing the new continuous state vector x.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetNominalsOfContinuousStates.\n\n\n\n\n\nfmi2GetNominalsOfContinuousStates(fmu::FMU2)\n\nWrapper for fmi2GetNominalsOfContinuousStates(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_ME_functions/#FMICore.fmi2GetNominalsOfContinuousStates!","page":"FMI for Model Exchange","title":"FMICore.fmi2GetNominalsOfContinuousStates!","text":"fmi2GetNominalsOfContinuousStates!(c::FMU2Component, x_nominal::AbstractArray{fmi2Real}, nx::Csize_t)\n\nStores the nominal values of the continuous states in x_nominal.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nx_nominal::AbstractArray{fmi2Real}: Argument x_nominal contains values of type fmi2Real which is a alias type for Real data type.x_nominal is the AbstractArray which contains the Real values of the vector that represent the nominal values of the continuous states.\nnx::Csize_t: Argument nx defines the length of vector x and is provided for checking purposes\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.83]: 3.2.2 Evaluation of Model Equations\n\nSee also fmi2GetEventIndicators!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.86]: 3.2.2 Evaluation of Model Equations\n\nReturn the nominal values of the continuous states.\n\n\n\n\n\n","category":"function"},{"location":"examples/simulate/#Simulate-an-FMU-in-different-modes","page":"Simulate","title":"Simulate an FMU in different modes","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"Tutorial by Johannes Stoljar, Tobias Thummerer","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"🚧 This tutorial is under revision and will be replaced by an up-to-date version soon 🚧","category":"page"},{"location":"examples/simulate/#License","page":"Simulate","title":"License","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/simulate/#Motivation","page":"Simulate","title":"Motivation","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"This Julia Package FMI.jl is motivated by the use of simulation models in Julia. Here the FMI specification is implemented. FMI (Functional Mock-up Interface) is a free standard (fmi-standard.org) that defines a container and an interface to exchange dynamic models using a combination of XML files, binaries and C code zipped into a single file. The user can thus use simulation models in the form of an FMU (Functional Mock-up Units). Besides loading the FMU, the user can also set values for parameters and states and simulate the FMU both as co-simulation and model exchange simulation.","category":"page"},{"location":"examples/simulate/#Introduction-to-the-example","page":"Simulate","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"In this example we want to show how fast and easy the simulation for an FMU is. For this purpose, the FMU is simulated in co-simulation mode and in model-exchange mode. After the FMU has been simulated, the simulation results are displayed in a graph. The graphs of the different modes are compared with each other. The used model is a one-dimensional spring pendulum with friction. The object-orientated structure of the SpringFrictionPendulum1D can be seen in the following graphic.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"(Image: svg)  ","category":"page"},{"location":"examples/simulate/#Target-group","page":"Simulate","title":"Target group","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"The example is primarily intended for users who work in the field of simulations. The example wants to show how simple it is to use FMUs in Julia.","category":"page"},{"location":"examples/simulate/#Other-formats","page":"Simulate","title":"Other formats","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/simulate/#Getting-started","page":"Simulate","title":"Getting started","text":"","category":"section"},{"location":"examples/simulate/#Installation-prerequisites","page":"Simulate","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":" Description Command Alternative\n1. Enter Package Manager via ] \n2. Install FMI via add FMI add \" https://github.com/ThummeTo/FMI.jl \"\n3. Install FMIZoo via add FMIZoo add \" https://github.com/ThummeTo/FMIZoo.jl \"\n4. Install Plots via add Plots ","category":"page"},{"location":"examples/simulate/#Code-section","page":"Simulate","title":"Code section","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"# imports\nusing FMI\nusing FMIZoo\nusing Plots","category":"page"},{"location":"examples/simulate/#Simulation-setup","page":"Simulate","title":"Simulation setup","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"Next, the start time and end time of the simulation are set. Finally, a step size is specified to store the results of the simulation at these time steps.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"tStart = 0.0\ntStep = 0.01\ntStop = 8.0\ntSave = tStart:tStep:tStop","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"0.0:0.01:8.0","category":"page"},{"location":"examples/simulate/#Import-FMU","page":"Simulate","title":"Import FMU","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"In the next lines of code the FMU model from FMIZoo.jl is loaded and the information about the FMU is shown.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"# we use an FMU from the FMIZoo.jl\npathToFMU = get_model_filename(\"SpringFrictionPendulum1D\", \"Dymola\", \"2022x\")\n\nmyFMU = fmiLoad(pathToFMU)\n# fmiLoad(\"path/to/myFMU.fmu\"; unpackPath = \"path/to/unpacked/fmu/\")\n\nfmiInfo(myFMU)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"#################### Begin information for FMU ####################\n\tModel name:\t\t\tSpringFrictionPendulum1D\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{2e178ad3-5e9b-48ec-a7b2-baa5669efc0c}\n\tGeneration tool:\t\tDymola Version 2022x (64-bit), 2021-10-08\n\tGeneration time:\t\t2022-05-19T06:54:12Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t24\n\tInputs:\t\t\t\t0\n\tOutputs:\t\t\t0\n\tStates:\t\t\t\t2\n\t\t33554432 [\"mass.s\"]\n\t\t33554433 [\"mass.v\", \"mass.v_relfric\"]\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tSpringFrictionPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tSpringFrictionPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################","category":"page"},{"location":"examples/simulate/#Simulate-FMU","page":"Simulate","title":"Simulate FMU","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"In the following, the FMU is simulated in the two different simulation modes.","category":"page"},{"location":"examples/simulate/#Simulate-as-Co-Simulation","page":"Simulate","title":"Simulate as Co-Simulation","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"In the next steps the recorded values are defined. The first state is the position of the mass and the second state is the velocity. In the function fmiSimulateCS() the FMU is simulated in co-simulation mode (CS) with an adaptive step size but with fixed save points tSave. In addition, the start and end time and the recorded variables are specified.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"vrs = [\"mass.s\", \"mass.v\"]\n\ndataCS = fmiSimulateCS(myFMU, (tStart, tStop); recordValues=vrs, saveat=tSave)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"Model name:\n\tSpringFrictionPendulum1D\nSuccess:\n\ttrue\nf(x)-Evaluations:\n\tIn-place: 0\n\tOut-of-place: 0\nJacobian-Evaluations:\n\t∂ẋ_∂x: 0\n\t∂ẋ_∂u: 0\n\t∂y_∂x: 0\n\t∂y_∂u: 0\n\t∂e_∂x: 0\n\t∂e_∂u: 0\nGradient-Evaluations:\n\t∂ẋ_∂t: 0\n\t∂y_∂t: 0\n\t∂e_∂t: 0\nCallback-Evaluations:\n\tCondition (event-indicators): 0\n\tTime-Choice (event-instances): 0\n\tAffect (event-handling): 0\n\tSave values: 0\n\tSteps completed: 0\nValues [801]:\n\t0.0\t(0.5, 0.0)\n\t0.01\t(0.5002235448486548, 0.042692491939260585)\n\t0.02\t(0.5008715291319449, 0.08568000508550636)\n\t0.03\t(0.5019478597521578, 0.12892136998736314)\n\t0.04\t(0.5034570452098334, 0.17232325681284336)\n\t0.05\t(0.5053993458877354, 0.2158440857658765)\n\t0.06\t(0.5077764240578201, 0.259420181133082)\n\t0.07\t(0.5105886522837868, 0.30295578207463486)\n\t0.08\t(0.5138351439717114, 0.3464184707972189)\n\t...\n\t8.0\t(1.0713672543616686, -1.0008145180651074e-10)\nEvents [0]:","category":"page"},{"location":"examples/simulate/#Simulate-as-Model-Exchange","page":"Simulate","title":"Simulate as Model-Exchange","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"In the function fmiSimulateME() the FMU is simulated in model-exchange mode (ME) with an adaptive step size but with fixed save points tSave. In addition, the start and end time are specified. In contrast to the co-simulation, the values to be stored are not specified here, since the states and events of the FMU are always output as well. The identifiers given above just correspond to the states of the FMU.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"dataME = fmiSimulateME(myFMU, (tStart, tStop); saveat=tSave)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"\u001b[34mSimulating ME-FMU ... 100%|██████████████████████████████| Time: 0:00:10\u001b[39m\n\n\n\n\n\nModel name:\n\tSpringFrictionPendulum1D\nSuccess:\n\ttrue\nf(x)-Evaluations:\n\tIn-place: 1377\n\tOut-of-place: 0\nJacobian-Evaluations:\n\t∂ẋ_∂x: 0\n\t∂ẋ_∂u: 0\n\t∂y_∂x: 0\n\t∂y_∂u: 0\n\t∂e_∂x: 0\n\t∂e_∂u: 0\nGradient-Evaluations:\n\t∂ẋ_∂t: 0\n\t∂y_∂t: 0\n\t∂e_∂t: 0\nCallback-Evaluations:\n\tCondition (event-indicators): 1717\n\tTime-Choice (event-instances): 0\n\tAffect (event-handling): 6\n\tSave values: 0\n\tSteps completed: 131\nStates [801]:\n\t0.0\t[0.5, 0.0]\n\t0.01\t[0.5002131418270838, 0.042689450733423825]\n\t0.02\t[0.5008548874900927, 0.08570846009092127]\n\t0.03\t[0.5019281657668402, 0.12898390160770806]\n\t0.04\t[0.5034351795297135, 0.17244393632491417]\n\t0.05\t[0.5053774247131727, 0.2160182108112464]\n\t0.06\t[0.5077556991013406, 0.2596379123127993]\n\t0.07\t[0.5105701153011459, 0.3032358504004333]\n\t0.08\t[0.5138201146588774, 0.3467464532244224]\n\t...\n\t8.0\t[1.0666322778272936, -7.60398591662422e-5]\nEvents [6]:\n\tState-Event #11 @ 0.0s\n\tState-Event #11 @ 0.994s\n\tState-Event #19 @ 1.9883s\n\tState-Event #11 @ 2.9831s\n\tState-Event #19 @ 3.9789s\n\tState-Event #11 @ 4.977s","category":"page"},{"location":"examples/simulate/#Plotting-FMU","page":"Simulate","title":"Plotting FMU","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"After the simulation is finished the results of the FMU for the co-simulation and model-exchange mode can be plotted. In the plot for the FMU it can be seen that the oscillation continues to decrease due to the effect of the friction. If you simulate long enough, the oscillation comes to a standstill in a certain time.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"fmiPlot(dataCS)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"(Image: svg)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"fmiPlot(dataME)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"(Image: svg)","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"From both graphs it can be seen that the simulation calculates exactly the same results.","category":"page"},{"location":"examples/simulate/#Unload-FMU","page":"Simulate","title":"Unload FMU","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"After plotting the data, the FMU is unloaded and all unpacked data on disc is removed.","category":"page"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"fmiUnload(myFMU)","category":"page"},{"location":"examples/simulate/#Summary","page":"Simulate","title":"Summary","text":"","category":"section"},{"location":"examples/simulate/","page":"Simulate","title":"Simulate","text":"Based on this tutorial it can be seen that simulating in the different mode is very easy, and it only takes a few commands to simulate the FMU. ","category":"page"},{"location":"fmi3_lowlevel_library_constants/#FMI3-Constants-in-FMI-Import/Core-.jl","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMI3 Constants in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi3_lowlevel_library_constants/","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMI3 Constants in FMI Import/Core .jl","text":"fmi3True\nfmi3False\nfmi3StatusOK\nfmi3StatusWarning\nfmi3StatusDiscard\nfmi3StatusError\nfmi3StatusFatal\nfmi3VariableNamingConventionFlat\nfmi3VariableNamingConventionStructured","category":"page"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3True","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3True","text":"fmi3Boolean TODO\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3False","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3False","text":"fmi3Boolean TODO\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3StatusOK","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3StatusOK","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.3. Status Returned by Functions Defines the status flag (an enumeration of type fmi3Status defined in file fmi3FunctionTypes.h) that is returned by functions to indicate the success of the function call: The status has the following meaning:\n\nfmi3OK: The call was successful. The output argument values are defined.\nfmi3Warning: A non-critical problem was detected, but the computation can continue. The output argument values are defined. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings.\n\n[In certain applications, e.g. in a prototyping environment, warnings may be acceptable. For production environments warnings should be treated like errors unless they can be safely ignored.]\n\nfmi3Discard: The call was not successful and the FMU is in the same state as before the call. The output argument values are not defined, but the computation can continue. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. Advanced simulation algorithms can try alternative approaches to drive the simulation by calling the function with different arguments or calling another function. Otherwise the simulation algorithm has to treat this return code like fmi3Error and has to terminate the simulation.\n\n[Examples for usage of fmi3Discard are handling of min/max violation, or signal numerical problems during model evaluation forcing smaller step sizes.]\n\nfmi3Error: The call failed. The output argument values are undefined and the simulation cannot be continued. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. If a function returns fmi3Error, it is possible to restore a previously retrieved FMU state by calling fmi3SetFMUState. Otherwise fmi3FreeInstance or fmi3Reset must be called. When detecting illegal arguments or a function call not allowed in the current state according to the respective state machine, the FMU must return fmi3Error. Other instances of this FMU are not affected by the error.\nfmi3Fatal: The state of all instances of the model is irreparably corrupted. [For example, due to a runtime exception such as access violation or integer division by zero during the execution of an FMI function.] Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings, if still possible. It is not allowed to call any other function for any instance of the FMU.\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3StatusWarning","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3StatusWarning","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.3. Status Returned by Functions Defines the status flag (an enumeration of type fmi3Status defined in file fmi3FunctionTypes.h) that is returned by functions to indicate the success of the function call: The status has the following meaning:\n\nfmi3OK: The call was successful. The output argument values are defined.\nfmi3Warning: A non-critical problem was detected, but the computation can continue. The output argument values are defined. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings.\n\n[In certain applications, e.g. in a prototyping environment, warnings may be acceptable. For production environments warnings should be treated like errors unless they can be safely ignored.]\n\nfmi3Discard: The call was not successful and the FMU is in the same state as before the call. The output argument values are not defined, but the computation can continue. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. Advanced simulation algorithms can try alternative approaches to drive the simulation by calling the function with different arguments or calling another function. Otherwise the simulation algorithm has to treat this return code like fmi3Error and has to terminate the simulation.\n\n[Examples for usage of fmi3Discard are handling of min/max violation, or signal numerical problems during model evaluation forcing smaller step sizes.]\n\nfmi3Error: The call failed. The output argument values are undefined and the simulation cannot be continued. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. If a function returns fmi3Error, it is possible to restore a previously retrieved FMU state by calling fmi3SetFMUState. Otherwise fmi3FreeInstance or fmi3Reset must be called. When detecting illegal arguments or a function call not allowed in the current state according to the respective state machine, the FMU must return fmi3Error. Other instances of this FMU are not affected by the error.\nfmi3Fatal: The state of all instances of the model is irreparably corrupted. [For example, due to a runtime exception such as access violation or integer division by zero during the execution of an FMI function.] Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings, if still possible. It is not allowed to call any other function for any instance of the FMU.\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3StatusDiscard","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3StatusDiscard","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.3. Status Returned by Functions Defines the status flag (an enumeration of type fmi3Status defined in file fmi3FunctionTypes.h) that is returned by functions to indicate the success of the function call: The status has the following meaning:\n\nfmi3OK: The call was successful. The output argument values are defined.\nfmi3Warning: A non-critical problem was detected, but the computation can continue. The output argument values are defined. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings.\n\n[In certain applications, e.g. in a prototyping environment, warnings may be acceptable. For production environments warnings should be treated like errors unless they can be safely ignored.]\n\nfmi3Discard: The call was not successful and the FMU is in the same state as before the call. The output argument values are not defined, but the computation can continue. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. Advanced simulation algorithms can try alternative approaches to drive the simulation by calling the function with different arguments or calling another function. Otherwise the simulation algorithm has to treat this return code like fmi3Error and has to terminate the simulation.\n\n[Examples for usage of fmi3Discard are handling of min/max violation, or signal numerical problems during model evaluation forcing smaller step sizes.]\n\nfmi3Error: The call failed. The output argument values are undefined and the simulation cannot be continued. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. If a function returns fmi3Error, it is possible to restore a previously retrieved FMU state by calling fmi3SetFMUState. Otherwise fmi3FreeInstance or fmi3Reset must be called. When detecting illegal arguments or a function call not allowed in the current state according to the respective state machine, the FMU must return fmi3Error. Other instances of this FMU are not affected by the error.\nfmi3Fatal: The state of all instances of the model is irreparably corrupted. [For example, due to a runtime exception such as access violation or integer division by zero during the execution of an FMI function.] Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings, if still possible. It is not allowed to call any other function for any instance of the FMU.\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3StatusError","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3StatusError","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.3. Status Returned by Functions Defines the status flag (an enumeration of type fmi3Status defined in file fmi3FunctionTypes.h) that is returned by functions to indicate the success of the function call: The status has the following meaning:\n\nfmi3OK: The call was successful. The output argument values are defined.\nfmi3Warning: A non-critical problem was detected, but the computation can continue. The output argument values are defined. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings.\n\n[In certain applications, e.g. in a prototyping environment, warnings may be acceptable. For production environments warnings should be treated like errors unless they can be safely ignored.]\n\nfmi3Discard: The call was not successful and the FMU is in the same state as before the call. The output argument values are not defined, but the computation can continue. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. Advanced simulation algorithms can try alternative approaches to drive the simulation by calling the function with different arguments or calling another function. Otherwise the simulation algorithm has to treat this return code like fmi3Error and has to terminate the simulation.\n\n[Examples for usage of fmi3Discard are handling of min/max violation, or signal numerical problems during model evaluation forcing smaller step sizes.]\n\nfmi3Error: The call failed. The output argument values are undefined and the simulation cannot be continued. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. If a function returns fmi3Error, it is possible to restore a previously retrieved FMU state by calling fmi3SetFMUState. Otherwise fmi3FreeInstance or fmi3Reset must be called. When detecting illegal arguments or a function call not allowed in the current state according to the respective state machine, the FMU must return fmi3Error. Other instances of this FMU are not affected by the error.\nfmi3Fatal: The state of all instances of the model is irreparably corrupted. [For example, due to a runtime exception such as access violation or integer division by zero during the execution of an FMI function.] Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings, if still possible. It is not allowed to call any other function for any instance of the FMU.\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3StatusFatal","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3StatusFatal","text":"Source: FMISpec3.0, Version D5ef1c1: 2.2.3. Status Returned by Functions Defines the status flag (an enumeration of type fmi3Status defined in file fmi3FunctionTypes.h) that is returned by functions to indicate the success of the function call: The status has the following meaning:\n\nfmi3OK: The call was successful. The output argument values are defined.\nfmi3Warning: A non-critical problem was detected, but the computation can continue. The output argument values are defined. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings.\n\n[In certain applications, e.g. in a prototyping environment, warnings may be acceptable. For production environments warnings should be treated like errors unless they can be safely ignored.]\n\nfmi3Discard: The call was not successful and the FMU is in the same state as before the call. The output argument values are not defined, but the computation can continue. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. Advanced simulation algorithms can try alternative approaches to drive the simulation by calling the function with different arguments or calling another function. Otherwise the simulation algorithm has to treat this return code like fmi3Error and has to terminate the simulation.\n\n[Examples for usage of fmi3Discard are handling of min/max violation, or signal numerical problems during model evaluation forcing smaller step sizes.]\n\nfmi3Error: The call failed. The output argument values are undefined and the simulation cannot be continued. Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings. If a function returns fmi3Error, it is possible to restore a previously retrieved FMU state by calling fmi3SetFMUState. Otherwise fmi3FreeInstance or fmi3Reset must be called. When detecting illegal arguments or a function call not allowed in the current state according to the respective state machine, the FMU must return fmi3Error. Other instances of this FMU are not affected by the error.\nfmi3Fatal: The state of all instances of the model is irreparably corrupted. [For example, due to a runtime exception such as access violation or integer division by zero during the execution of an FMI function.] Function logMessage should be called by the FMU with further information before returning this status, respecting the current logging settings, if still possible. It is not allowed to call any other function for any instance of the FMU.\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3VariableNamingConventionFlat","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3VariableNamingConventionFlat","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.7.5.1. Variable Naming Conventions\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_constants/#FMICore.fmi3VariableNamingConventionStructured","page":"FMI3 Constants in FMI Import/Core .jl","title":"FMICore.fmi3VariableNamingConventionStructured","text":"Source: FMISpec3.0, Version D5ef1c1: 2.4.7.5.1. Variable Naming Conventions\n\n\n\n\n\n","category":"constant"},{"location":"fmi3_lowlevel_library_functions/#FMI-Common-Concepts-for-Model-Exchange-and-Co-Simulation","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"In both cases, FMI defines an input/output block of a dynamic model where the distribution of the block, the platform dependent header file, several access functions, as well as the schema files are identical.","category":"page"},{"location":"fmi3_lowlevel_library_functions/#Opening-and-closing-FMUs","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Opening and closing FMUs","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3Unzip\nfmi3Load\nfmi3Reload\nfmi3Unload","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Unzip","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Unzip","text":"fmi3Unzip(pathToFMU::String; unpackPath=nothing, cleanup=true)\n\nCreate a copy of the .fmu file as a .zip folder and unzips it. Returns the paths to the zipped and unzipped folders.\n\nArguments\n\npathToFMU::String: The folder path to the .zip folder.\n\nKeywords\n\nunpackPath=nothing: Via optional argument unpackPath, a path to unpack the FMU can be specified (default: system temporary directory).\ncleanup=true: The cleanup option controls whether the temporary directory is automatically deleted when the process exits.\n\nReturns\n\nunzippedAbsPath::String: Contains the Path to the uzipped Folder.\nzipAbsPath::String: Contains the Path to the zipped Folder.\n\nSee also mktempdir.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Load","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Load","text":"fmi3Load(pathToFMU::String; unpackPath=nothing, type=nothing, cleanup=true)\n\nSets the properties of the fmu by reading the modelDescription.xml. Retrieves all the pointers of binary functions.\n\nArguments\n\npathToFMU::String: The folder path to the .fmu file.\n\nKeywords\n\nunpackPath=nothing: Via optional argument unpackPath, a path to unpack the FMU can be specified (default: system temporary directory).\ntype=nothing: Defines whether a Co-Simulation or Model Exchange is present\ncleanup=true: The cleanup option controls whether the temporary directory is automatically deleted when the process exits.\n\nReturns\n\nReturns the instance of the FMU struct.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.4.7  Model Variables\n\nSee also .\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Reload","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Reload","text":"fmi3Reload(fmu::FMU3)\n\nReloads the FMU-binary. This is useful, if the FMU does not support a clean reset implementation.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Unload","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Unload","text":"function fmi3Unload(fmu::FMU3, cleanUp::Bool = true)\n\nUnload a FMU. Free the allocated memory, close the binaries and remove temporary zip and unziped FMU model description.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\ncleanUp::Bool= true: Defines if the file, link, or empty directory should be deleted.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#Creation,-Destruction-and-Logging-of-FMU-Instances","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Creation, Destruction and Logging of FMU Instances","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3InstantiateCoSimulation\nfmi3InstantiateCoSimulation!\nfmi3InstantiateModelExchange\nfmi3InstantiateModelExchange!\nfmi3InstantiateScheduledExecution\nfmi3InstantiateScheduledExecution!\nfmi3FreeInstance!\nfmi3SetDebugLogging","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3InstantiateCoSimulation","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3InstantiateCoSimulation","text":"Source: FMISpec3.0, Version D5ef1c1:: 2.3.1. Super State: FMU State Setable\n\nThis function instantiates a Co-Simulation FMU (see Section 4). It is allowed to call this function only if modelDescription.xml includes a <CoSimulation> element.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3InstantiateCoSimulation!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3InstantiateCoSimulation!","text":"fmi3InstantiateCoSimulation!(fmu::FMU3; instanceName::String=fmu.modelName, type::fmi3Type=fmu.type, pushInstances::Bool = true, visible::Bool = false, loggingOn::Bool = fmu.executionConfig.loggingOn, externalCallbacks::Bool = fmu.executionConfig.externalCallbacks, \n    eventModeUsed::Bool = false, ptrIntermediateUpdate=nothing, logStatusOK::Bool=true, logStatusWarning::Bool=true, logStatusDiscard::Bool=true, logStatusError::Bool=true, logStatusFatal::Bool=true)\n\nCreate a new coSimulation instance of the given fmu, adds a logger if logginOn == true.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\n\nKeywords\n\ninstanceName::String=fmu.modelName: Name of the instance\ntype::fmi3Type=fmu.type: Defines whether a Co-Simulation or Model Exchange is present\npushInstances::Bool = true: Defines if the fmu instances should be pushed in the application.\nvisible::Bool = false if the FMU should be started with graphic interface, if supported (default=false)\nloggingOn::Bool = fmu.executionConfig.loggingOn if the FMU should log and display function calls (default=false)\nexternalCallbacks::Bool = fmu.executionConfig.externalCallbacks if an external shared library should be used for the fmi3CallbackFunctions, this may improve readability of logging messages (default=false)\neventModeUsed::Bool = false: Defines if the FMU instance can use the event mode. (default=false)\nptrIntermediateUpdate=nothing: Points to a function handling intermediate Updates (defalut=nothing) \nlogStatusOK::Bool=true whether to log status of kind fmi3OK (default=true)\nlogStatusWarning::Bool=true whether to log status of kind fmi3Warning (default=true)\nlogStatusDiscard::Bool=true whether to log status of kind fmi3Discard (default=true)\nlogStatusError::Bool=true whether to log status of kind fmi3Error (default=true)\nlogStatusFatal::Bool=true whether to log status of kind fmi3Fatal (default=true)\n\nReturns\n\nReturns the instance of a new FMU coSimulation instance.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7  Model variables\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\nSee also fmi3InstantiateCoSimulation.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3InstantiateModelExchange","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3InstantiateModelExchange","text":"Source: FMISpec3.0, Version D5ef1c1:: 2.3.1. Super State: FMU State Setable\n\nThis function instantiates a Model Exchange FMU (see Section 3). It is allowed to call this function only if modelDescription.xml includes a <ModelExchange> element.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3InstantiateModelExchange!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3InstantiateModelExchange!","text":"fmi3InstantiateModelExchange!(fmu::FMU3; instanceName::String=fmu.modelName, type::fmi3Type=fmu.type, pushInstances::Bool = true, visible::Bool = false, loggingOn::Bool = fmu.executionConfig.loggingOn, externalCallbacks::Bool = fmu.executionConfig.externalCallbacks,\n    logStatusOK::Bool=true, logStatusWarning::Bool=true, logStatusDiscard::Bool=true, logStatusError::Bool=true, logStatusFatal::Bool=true)\n\nCreate a new modelExchange instance of the given fmu, adds a logger if logginOn == true.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\n\nKeywords\n\ninstanceName::String=fmu.modelName: Name of the instance\ntype::fmi3Type=fmu.type: Defines whether a Co-Simulation or Model Exchange is present\npushInstances::Bool = true: Defines if the fmu instances should be pushed in the application.\nvisible::Bool = false if the FMU should be started with graphic interface, if supported (default=false)\nloggingOn::Bool = fmu.executionConfig.loggingOn if the FMU should log and display function calls (default=false)\nexternalCallbacks::Bool = fmu.executionConfig.externalCallbacks if an external shared library should be used for the fmi3CallbackFunctions, this may improve readability of logging messages (default=false)\nlogStatusOK::Bool=true whether to log status of kind fmi3OK (default=true)\nlogStatusWarning::Bool=true whether to log status of kind fmi3Warning (default=true)\nlogStatusDiscard::Bool=true whether to log status of kind fmi3Discard (default=true)\nlogStatusError::Bool=true whether to log status of kind fmi3Error (default=true)\nlogStatusFatal::Bool=true whether to log status of kind fmi3Fatal (default=true)\n\nReturns\n\nReturns the instance of a new FMU modelExchange instance.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7  Model variables\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\nSee also fmi3InstantiateModelExchange.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3InstantiateScheduledExecution","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3InstantiateScheduledExecution","text":"Source: FMISpec3.0, Version D5ef1c1:: 2.3.1. Super State: FMU State Setable\n\nThis function instantiates a Scheduled Execution FMU (see Section 4). It is allowed to call this function only if modelDescription.xml includes a <ScheduledExecution> element.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3InstantiateScheduledExecution!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3InstantiateScheduledExecution!","text":"fmi3InstantiateScheduledExecution!(fmu::FMU3; ptrlockPreemption::Ptr{Cvoid}, ptrunlockPreemption::Ptr{Cvoid}, instanceName::String=fmu.modelName, type::fmi3Type=fmu.type, pushInstances::Bool = true, visible::Bool = false, loggingOn::Bool = fmu.executionConfig.loggingOn, externalCallbacks::Bool = fmu.executionConfig.externalCallbacks, \n    logStatusOK::Bool=true, logStatusWarning::Bool=true, logStatusDiscard::Bool=true, logStatusError::Bool=true, logStatusFatal::Bool=true)\n\nCreate a new ScheduledExecution instance of the given fmu, adds a logger if logginOn == true.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\n\nKeywords\n\nptrlockPreemption::Ptr{Cvoid}: Points to a function handling locking Preemption\nptrunlockPreemption::Ptr{Cvoid}: Points to a function handling unlocking Preemption\ninstanceName::String=fmu.modelName: Name of the instance\ntype::fmi3Type=fmu.type: Defines whether a Co-Simulation or Model Exchange is present\npushInstances::Bool = true: Defines if the fmu instances should be pushed in the application.\nvisible::Bool = false if the FMU should be started with graphic interface, if supported (default=false)\nloggingOn::Bool = fmu.executionConfig.loggingOn if the FMU should log and display function calls (default=false)\nexternalCallbacks::Bool = fmu.executionConfig.externalCallbacks if an external shared library should be used for the fmi3CallbackFunctions, this may improve readability of logging messages (default=false)\nlogStatusOK::Bool=true whether to log status of kind fmi3OK (default=true)\nlogStatusWarning::Bool=true whether to log status of kind fmi3Warning (default=true)\nlogStatusDiscard::Bool=true whether to log status of kind fmi3Discard (default=true)\nlogStatusError::Bool=true whether to log status of kind fmi3Error (default=true)\nlogStatusFatal::Bool=true whether to log status of kind fmi3Fatal (default=true)\n\nReturns\n\nReturns the instance of a new FMU ScheduledExecution instance.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7  Model variables\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\nSee also fmi3InstantiateScheduledExecution.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3FreeInstance!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3FreeInstance!","text":"fmi3FreeInstance!(c::FMU3Instance; popInstance::Bool = true)\n\nDisposes the given instance, unloads the loaded model, and frees all the allocated memory and other resources that have been allocated by the functions of the FMU interface. If a null pointer is provided for “c”, the function call is ignored (does not have an effect).\n\nRemoves the component from the FMUs component list.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\npopInstance::Bool=true: If the Keyword popInstance = true the freed instance is deleted\n\nReturns\n\nnothing\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0, Version D5ef1c1: 2.3.1. Super State: FMU State Setable\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.1. Super State: FMU State Setable\n\nDisposes the given instance, unloads the loaded model, and frees all the allocated memory and other resources that have been allocated by the functions of the FMU interface. If a NULL pointer is provided for argument instance, the function call is ignored (does not have an effect).\n\n\n\n\n\nfmi3FreeInstance!(fmu::FMU3)\n\nWrapper for fmi3FreeInstance!(c::FMU3Instance; popInstance::Bool = true) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetDebugLogging","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetDebugLogging","text":"fmi3SetDebugLogging(c::FMU3Instance, logginOn::fmi3Boolean, nCategories::UInt, categories::Ptr{Nothing})\n\nControl the use of the logging callback function, version independent.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nlogginOn::fmi3Boolean: If loggingOn = fmi3True, debug logging is enabled for the log categories specified in categories, otherwise it is disabled. Type fmi3Boolean is defined as an alias Type for the C-Type Boolean and is to be used with fmi3True and fmi3False.\nnCategories::UInt: Argument nCategories defines the length of the argument categories.\ncategories::Ptr{Nothing}:\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\nSee also fmi3SetDebugLogging.\n\n\n\n\n\nfmi3SetDebugLogging(c::FMU3Instance)\n\nSet the DebugLogger for the FMU.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi3InstanceStateInstantiated.\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\nSee also fmi3SetDebugLogging.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.1. Super State: FMU State Setable\n\nThe function controls debug logging that is output via the logger function callback. If loggingOn = fmi3True, debug logging is enabled, otherwise it is switched off.\n\n\n\n\n\nfmi3SetDebugLogging(fmu::FMU3)\n\nWrapper for fmi3SetDebugLogging(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#Initialization,-Termination,-and-Resetting-an-FMU","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Initialization, Termination, and Resetting an FMU","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"This section documents functions that deal with initialization, termination, resetting of an FMU.","category":"page"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3EnterInitializationMode\nfmi3ExitInitializationMode\nfmi3EnterConfigurationMode\nfmi3ExitConfigurationMode\nfmi3Terminate\nfmi3Reset","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3EnterInitializationMode","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3EnterInitializationMode","text":"fmi3EnterInitializationMode(c::FMU3Instance, toleranceDefined::fmi3Boolean,\n    tolerance::fmi3Float64,\n    startTime::fmi3Float64,\n    stopTimeDefined::fmi3Boolean,\n    stopTime::fmi3Float64)\n\nInforms the FMU to enter Initialization Mode. Before calling this function, all variables with attribute <Datatype initial = \"exact\" or \"approx\"> can be set with the “fmi3SetXXX” functions (the ScalarVariable attributes are defined in the Model Description File, see section 2.4.7). Setting other variables is not allowed. Also sets the simulation start and stop time.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\ntoleranceDefined::fmi3Boolean: Arguments toleranceDefined depend on the FMU type:\nfmuType = fmi3ModelExchange: If toleranceDefined = fmi3True, then the model is called with a numerical integration scheme where the step size is controlled by using tolerance for error estimation. In such a case, all numerical algorithms used inside the model (for example, to solve non-linear algebraic equations) should also operate with an error estimation of an appropriate smaller relative tolerance.\nfmuType = fmi3CoSimulation: If toleranceDefined = fmi3True, then the communication interval of the slave is controlled by error estimation.  In case the slave utilizes a numerical integrator with variable step size and error estimation, it is suggested to use “tolerance” for the error estimation of the internal integrator (usually as relative tolerance). An FMU for Co-Simulation might ignore this argument.\ntolerance::fmi3Float64: Argument tolerance is the desired tolerance\nstartTime::fmi3Float64: Argument startTime can be used to check whether the model is valid within the given boundaries or to allocate memory which is necessary for storing results. It is the fixed initial value of the independent variable and if the independent variable is time, startTime is the starting time of initializaton.\nstopTimeDefined::fmi3Boolean:  If stopTimeDefined = fmi3True, then stopTime is the defined final value of the independent variable and if stopTimeDefined = fmi3False, then no final value\n\nof the independent variable is defined and argument stopTime is meaningless.\n\nstopTime::fmi3Float64: Argument stopTime can be used to check whether the model is valid within the given boundaries or to allocate memory which is necessary for storing results. It is the fixed final value of the independent variable and if the independent variable is “time”, stopTime is the stop time of the simulation.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3EnterInitializationMode.\n\n\n\n\n\nfmi3EnterInitializationMode(c::FMU3Instance, startTime::Union{Real, Nothing} = nothing, stopTime::Union{Real, Nothing} = nothing; tolerance::Union{Real, Nothing} = nothing)\n\nFMU enters Initialization mode.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nstartTime::Union{Real, Nothing} = nothing: startTime is a real number which sets the value of starting time of the experiment. The default value is set automatically if doing nothing (default = nothing).\nstopTime::Union{Real, Nothing} = nothing: stopTime is a real number which sets the value of ending time of the experiment. The default value is set automatically if doing nothing (default = nothing).\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: tolerance is a real number which sets the value of tolerance range. The default value is set automatically if doing nothing (default = nothing).\n\nReturns\n\nReturns a warning if str.state is not called in fmi3InstanceStateInstantiated.\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3EnterInitializationMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.2. State: Instantiated\n\nInforms the FMU to enter Initialization Mode. Before calling this function, all variables with attribute <Datatype initial = \"exact\" or \"approx\"> can be set with the “fmi3SetXXX” functions (the ScalarVariable attributes are defined in the Model Description File, see section 2.4.7). Setting other variables is not allowed. Also sets the simulation start and stop time.\n\n\n\n\n\nfmi3EnterInitializationMode(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3EnterInitializationMode(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3ExitInitializationMode","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3ExitInitializationMode","text":"fmi3ExitInitializationMode(c::FMU3Instance)\n\nInforms the FMU to exit Initialization Mode.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.3. State: Initialization Mode\n\nSee also fmi3ExitInitializationMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.3. State: Initialization Mode\n\nInforms the FMU to exit Initialization Mode.\n\n\n\n\n\nfmi3ExitInitializationMode(fmu::FMU3)\n\nWrapper for fmi3ExitInitializationMode(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3EnterConfigurationMode","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3EnterConfigurationMode","text":"fmi3EnterConfigurationMode(c::FMU3Instance; soft::Bool=false)\n\nIf the importer needs to change structural parameters, it must move the FMU into Configuration Mode using fmi3EnterConfigurationMode.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state  fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.2. State: Instantiated\n\nSee also fmi3EnterConfigurationMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.2. State: Instantiated\n\nIf the importer needs to change structural parameters, it must move the FMU into Configuration Mode using fmi3EnterConfigurationMode.\n\n\n\n\n\nfmi3EnterConfigurationMode(fmu::FMU3)\n\nWrapper for fmi3EnterConfigurationMode(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3ExitConfigurationMode","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3ExitConfigurationMode","text":"fmi3ExitConfigurationMode(c::FMU3Instance; soft::Bool=false)\n\nExits the Configuration Mode and returns to state Instantiated.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state  fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.6. State: Configuration Mode\n\nSee also fmi3ExitConfigurationMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.6. State: Configuration Mode\n\nExits the Configuration Mode and returns to state Instantiated.\n\n\n\n\n\nfmi3ExitConfigurationMode(fmu::FMU3)\n\nWrapper for fmi3ExitConfigurationMode(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3Terminate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3Terminate","text":"fmi3Terminate(c::FMU3Instance; soft::Bool=false)\n\nInforms the FMU that the simulation run is terminated.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state  fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.4. Super State: Initialized\n\nSee also fmi3Terminate.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.4. Super State: Initialized\n\nInforms the FMU that the simulation run is terminated.\n\n\n\n\n\nfmi3Terminate(fmu::FMU3)\n\nWrapper for fmi3Terminate(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3Reset","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3Reset","text":"fmi3Reset(c::FMU3Instance; soft::Bool = false)\n\nIs called by the environment to reset the FMU after a simulation run. The FMU goes into the same state as if fmi3InstantiateXXX would have been called.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.1. Super State: FMU State Setable\n\nSee also fmi3Reset.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.1. Super State: FMU State Setable\n\nIs called by the environment to reset the FMU after a simulation run. The FMU goes into the same state as if fmi3InstantiateXXX would have been called.\n\n\n\n\n\nfmi3Reset(fmu::FMU3)\n\nWrapper for fmi3Reset(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#Getting-and-Setting-Variable-Values","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Getting and Setting Variable Values","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"All variable values of an FMU are identified with a variable handle called “value reference”. The handle is defined in the modelDescription.xml file (as attribute “valueReference” in element “ScalarVariable”). Element “valueReference” might not be unique for all variables. If two or more variables of the same base data type (such as fmi3Float64) have the same valueReference, then they have identical values but other parts of the variable definition might be different (for example, min/max attributes).","category":"page"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3Get\nfmi3Get!\nfmi3GetFloat32\nfmi3GetFloat32!\nfmi3GetFloat64\nfmi3GetFloat64!\nfmi3GetInt8\nfmi3GetInt8!\nfmi3GetInt16\nfmi3GetInt16!\nfmi3GetInt32\nfmi3GetInt32!\nfmi3GetInt64\nfmi3GetInt64!\nfmi3GetUInt8\nfmi3GetUInt8!\nfmi3GetUInt16\nfmi3GetUInt16!\nfmi3GetUInt32\nfmi3GetUInt32!\nfmi3GetUInt64\nfmi3GetUInt64!\nfmi3GetBoolean\nfmi3GetBoolean!\nfmi3GetString\nfmi3GetString!\nfmi3GetBinary\nfmi3GetBinary!\nfmi3Set\nfmi3SetFloat32\nfmi3SetFloat64\nfmi3SetInt8\nfmi3SetInt16\nfmi3SetInt32\nfmi3SetInt64\nfmi3SetUInt8\nfmi3SetUInt16\nfmi3SetUInt32\nfmi3SetUInt64\nfmi3SetBoolean\nfmi3SetString\nfmi3SetBinary","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Get","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Get","text":"fmi3Get(inst::FMU3Instance, vrs::fmi3ValueReferenceFormat)\n\nReturns the specific value of fmi3Variable containing the modelVariables with the identical fmi3ValueReference in an array.\n\nArguments\n\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvrs::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\ndstArray::Array{Any,1}(undef, length(vrs)): Stores the specific value of fmi3Variable containing the modelVariables with the identical fmi3ValueReference to the input variable vr (vr = vrs[i]). dstArray is a 1-Dimensional Array that has the same length as vrs.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\n\n\n\n\nfmi3Get(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3Get(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Get!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Get!","text":"fmi3Get!(inst::FMU3Instance, vrs::fmi3ValueReferenceFormat, dstArray::AbstractArray)\n\nStores the specific value of fmi3Variable containing the modelVariables with the identical fmi3ValueReference and returns an array that indicates the Status.\n\nArguments\n\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvrs::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\ndstArray::AbstractArray: Stores the specific value of fmi3Variable containing the modelVariables with the identical fmi3ValueReference to the input variable vr (vr = vrs[i]). dstArray has the same length as vrs.\n\nReturns\n\nretcodes::Array{fmi3Status}: Returns an array of length length(vrs) with Type fmi3Status. Type fmi3Status is an enumeration and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\n\n\n\n\nfmi3Get!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3Get!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetFloat32","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetFloat32","text":"fmi3GetFloat32(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Float32 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Float32}: returns values of an array of fmi3Float32 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetFloat32.\n\n\n\n\n\nfmi3GetFloat32(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetFloat32(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetFloat32!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetFloat32!","text":"fmi3GetFloat32!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Float32}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Float32}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetFloat32!.\n\n\n\n\n\nfmi3GetFloat32!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Float32})\n\nWrites the real values of an array of variables in the given field\n\nfmi3GetFloat32! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Float32}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetFloat32!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetFloat32!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetFloat32!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetFloat64","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetFloat64","text":"fmi3GetFloat64(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Float64 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Float64}: returns values of an array of fmi3Float64 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetFloat64.\n\n\n\n\n\nfmi3GetFloat64(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetFloat64(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetFloat64!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetFloat64!","text":"fmi3GetFloat64!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Float64}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Float64}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetFloat64!.\n\n\n\n\n\nfmi3GetFloat64!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Float64})\n\nWrites the real values of an array of variables in the given field\n\nfmi3GetFloat64! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Float64}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetFloat64!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetFloat64!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetFloat64!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetInt8","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetInt8","text":"fmi3GetInt8(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Int8 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Int8}: returns values of an array of fmi3Int8 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt8.\n\n\n\n\n\nfmi3GetInt8(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt8(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetInt8!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetInt8!","text":"fmi3GetInt8!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int8}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int8}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt8!.\n\n\n\n\n\nfmi3GetInt8!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Int8})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetInt8! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Int8}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt8!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetInt8!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt8!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetInt16","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetInt16","text":"fmi3GetInt16(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Int16 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Int16}: returns values of an array of fmi3Int16 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt16.\n\n\n\n\n\nfmi3GetInt16(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt16(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetInt16!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetInt16!","text":"fmi3GetInt16!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int16}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int16}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt16!.\n\n\n\n\n\nfmi3GetInt16!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Int16})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetInt16! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Int16}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt16!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetInt16!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt16!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetInt32","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetInt32","text":"fmi3GetInt32(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Int32 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Int32}: returns values of an array of fmi3Int32 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt32.\n\n\n\n\n\nfmi3GetInt32(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt32(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetInt32!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetInt32!","text":"fmi3GetInt32!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int32}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int32}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt32!.\n\n\n\n\n\nfmi3GetInt32!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Int32})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetInt32! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Int32}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt32!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetInt32!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt32!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetInt64","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetInt64","text":"fmi3GetInt64(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Int64 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Int64}: returns values of an array of fmi3Int64 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt64.\n\n\n\n\n\nfmi3GetInt64(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt64(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetInt64!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetInt64!","text":"fmi3GetInt64!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int64}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int64}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt64!.\n\n\n\n\n\nfmi3GetInt64!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Int64})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetInt64! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Int64}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetInt64!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetInt64!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetInt64!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetUInt8","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetUInt8","text":"fmi3GetUInt8(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3UInt8 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3UInt8}: returns values of an array of fmi3UInt8 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt8.\n\n\n\n\n\nfmi3GetUInt8(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt8(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetUInt8!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetUInt8!","text":"fmi3GetUInt8!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt8}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt8}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt8!.\n\n\n\n\n\nfmi3GetUInt8!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3UInt8})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetUInt8! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3UInt8}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt8!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetUInt8!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt8!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetUInt16","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetUInt16","text":"fmi3GetUInt16(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3UInt16 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3UInt16}: returns values of an array of fmi3UInt16 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt16.\n\n\n\n\n\nfmi3GetUInt16(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt16(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetUInt16!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetUInt16!","text":"fmi3GetUInt16(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt16}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt16}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt16!.\n\n\n\n\n\nfmi3GetUInt16!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3UInt16})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetUInt16! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3UInt16}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt16!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetUInt16!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt16!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetUInt32","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetUInt32","text":"fmi3GetUInt32(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3UInt32 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3UInt32}: returns values of an array of fmi3UInt32 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt32.\n\n\n\n\n\nfmi3GetUInt32(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt32(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetUInt32!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetUInt32!","text":"fmi3GetUInt32!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt32}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt32}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt32!.\n\n\n\n\n\nfmi3GetUInt32!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3UInt32})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetUInt32! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3UInt32}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt32!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetUInt32!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt32!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetUInt64","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetUInt64","text":"fmi3GetUInt64(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3UInt64 variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3UInt64}: returns values of an array of fmi3UInt64 variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt64.\n\n\n\n\n\nfmi3GetUInt64(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt64(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetUInt64!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetUInt64!","text":"fmi3GetUInt64!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt64}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt64}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt64!.\n\n\n\n\n\nfmi3GetUInt64!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3UInt64})\n\nWrites the integer values of an array of variables in the given field\n\nfmi3GetUInt64! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3UInt64}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetUInt64!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetUInt64!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetUInt64!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetBoolean","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetBoolean","text":"fmi3GetBoolean(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Boolean variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Boolean}: returns values of an array of fmi3Boolean variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetBoolean.\n\n\n\n\n\nfmi3GetBoolean(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetBoolean(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetBoolean!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetBoolean!","text":"fmi3GetBoolean!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Boolean}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Boolean}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetBoolean!.\n\n\n\n\n\nfmi3GetBoolean!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Boolean})\n\nWrites the boolean values of an array of variables in the given field\n\nfmi3GetBoolean! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Boolean}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetBoolean!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetBoolean!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetBoolean!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetString","text":"fmi3GetString(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3String variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3String}: returns values of an array of fmi3String variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetString.\n\n\n\n\n\nfmi3GetString(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetString(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetString!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetString!","text":"fmi3GetString!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3String}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3String}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetString!.\n\n\n\n\n\nfmi3GetString!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3String})\n\nWrites the string values of an array of variables in the given field\n\nfmi3GetString! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3String}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetString!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetString!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetString!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetBinary","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetBinary","text":"fmi3GetBinary(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Binary variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Binary}: returns values of an array of fmi3Binary variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetBinary.\n\n\n\n\n\nfmi3GetBinary(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetBinary(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetBinary!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetBinary!","text":"fmi3GetBinary!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, valueSizes::AbstractArray{Csize_t}, value::AbstractArray{fmi3Binary}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalueSizes::AbstractArray{Csize_t}: Argument valueSizes defines the size of a binary element of each variable.\nvalue::AbstractArray{fmi3Binary}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetBinary!.\n\n\n\n\n\nfmi3GetBinary!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Binary})\n\nWrites the binary values of an array of variables in the given field\n\nfmi3GetBinary! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Binary}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetBinary!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValues - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetBinary!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetBinary!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3Set","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3Set","text":"fmi3Set(inst::FMU3Instance, vrs::fmi3ValueReferenceFormat, srcArray::AbstractArray; filter=nothing)\n\nStores the specific value of fmi3Variable containing the modelVariables with the identical fmi3ValueReference and returns an array that indicates the Status.\n\nArguments\n\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvrs::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nsrcArray::AbstractArray: Stores the specific value of fmi3Variable containing the modelVariables with the identical fmi3ValueReference to the input variable vr (vr = vrs[i]). srcArray has the same length as vrs.\n\nKeywords\n\nfilter=nothing: whether the individual values of \"fmi3Variable\" are to be stored\n\nReturns\n\nretcodes::Array{fmi3Status}: Returns an array of length length(vrs) with Type fmi3Status. Type fmi3Status is an enumeration and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\n\n\n\n\nfmi3Set(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3Set(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetFloat32","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetFloat32","text":"fmi3SetFloat32(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Float32}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Float32}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetFloat32.\n\n\n\n\n\nfmi3SetFloat32(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3Float32}, fmi3Float32})\n\nSet the values of an array of real variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Float32}, fmi3Float32}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetFloat32.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetFloat32(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetFloat32(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetFloat64","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetFloat64","text":"fmi3SetFloat64(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Float64}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Float64}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetFloat64.\n\n\n\n\n\nfmi3SetFloat64(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3Float64}, fmi3Float64})\n\nSet the values of an array of real variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Float64}, fmi3Float64}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetFloat64.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetFloat64(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetFloat64(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetInt8","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetInt8","text":"fmi3SetInt8(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int8}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int8}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\n\n\n\n\nfmi3SetInt8(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3Int8}, fmi3Int8})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Int8}, fmi3Int8}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt8.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetInt8(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetInt8(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetInt16","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetInt16","text":"fmi3SetInt16(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int16}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int16}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt16.\n\n\n\n\n\nfmi3SetInt16(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3Int16}, fmi3Int16})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Int16}, fmi3Int16}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt16.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetInt16(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetInt16(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetInt32","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetInt32","text":"fmi3SetInt32(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int32}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int32}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt32.\n\n\n\n\n\nfmi3SetInt32(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3Int32}, fmi3Int32})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Int32}, fmi3Int32}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt32.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetInt32(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetInt32(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetInt64","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetInt64","text":"fmi3SetInt64(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Int64}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Int64}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt64.\n\n\n\n\n\nfmi3SetInt64(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3Int64}, fmi3Int64})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Int64}, fmi3Int64}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetInt64.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetInt64(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetInt64(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetUInt8","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetUInt8","text":"fmi3SetUInt8(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt8}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt8}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt8.\n\n\n\n\n\nfmi3SetUInt8(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3UInt8}, fmi3UInt8})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3UInt8}, fmi3UInt8}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt8.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetUInt8(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetUInt8(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetUInt16","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetUInt16","text":"fmi3SetUInt16(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt16}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt16}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\n\n\n\n\nfmi3SetUInt16(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3UInt16}, fmi3UInt16})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3UInt16}, fmi3UInt16}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt16.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetUInt16(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetUInt16(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetUInt32","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetUInt32","text":"fmi3SetInt32(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt32}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt32}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt32.\n\n\n\n\n\nfmi3SetUInt32(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3UInt32}, fmi3UInt32})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3UInt32}, fmi3UInt32}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt32.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetUInt32(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetUInt32(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetUInt64","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetUInt64","text":"fmi3SetUInt64(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3UInt64}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3UInt64}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:     - fmi3OK: all well     - fmi3Warning: things are not quite right, but the computation can continue     - fmi3Discard: if the slave computed successfully only a subinterval of the communication step     - fmi3Error: the communication step could not be carried out at all     - fmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt64.\n\n\n\n\n\nfmi3SetUInt64(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{fmi3UInt64}, fmi3UInt64})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3UInt64}, fmi3UInt64}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetUInt64.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetUInt64(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetUInt64(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetBoolean","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetBoolean","text":"fmi3SetBoolean(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Boolean}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3Boolean}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetBoolean.\n\n\n\n\n\nfmi3SetBoolean(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{Bool}, Bool})\n\nSet the values of an array of boolean variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{Bool}, Bool}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetBoolean.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetBoolean(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetBoolean!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetString","text":"fmi3SetString(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3String}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi3String}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetString.\n\n\n\n\n\nfmi3SetString(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::Union{AbstractArray{String}, String})\n\nSet the values of an array of string variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{String}, String}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetString.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetString(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetString(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetBinary","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetBinary","text":"fmi3SetBinary(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, valueSizes::AbstractArray{Csize_t}, value::AbstractArray{fmi3Binary}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalueSizes::AbstractArray{Csize_t}: Argument valueSizes defines the size of a binary element of each variable.\nvalue::AbstractArray{fmi3Binary}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetBinary.\n\n\n\n\n\nfmi3SetBinary(c::FMU3Instance, vr::fmi3ValueReferenceFormat, valueSizes::Union{AbstractArray{Csize_t}, Csize_t}, values::Union{AbstractArray{fmi3Binary}, fmi3Binary})\n\nSet the values of an array of binary variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalueSizes::Union{AbstractArray{Csize_t}, Csize_t}: Argument valueSizes defines the size of a binary element of each variable.\nvalues::Union{AbstractArray{fmi3Binary}, fmi3Binary}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetBinary.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetBinary(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetBinary(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#Getting-and-Setting-the-Complete-FMU-State","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Getting and Setting the Complete FMU State","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"The FMU has an internal state consisting of all values that are needed to continue a simulation. This internal state consists especially of the values of the continuous-time states, iteration variables, parameter values, input values, delay buffers, file identifiers, and FMU internal status information. With the functions of this section, the internal FMU state can be copied and the pointer to this copy is returned to the environment. The FMU state copy can be set as actual FMU state, in order to continue the simulation from it.","category":"page"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3GetFMUState\nfmi3GetFMUState!\nfmi3SetFMUState\nfmi3FreeFMUState!\nfmi3SerializeFMUState\nfmi3SerializeFMUState!\nfmi3SerializedFMUStateSize\nfmi3SerializedFMUStateSize!\nfmi3DeSerializeFMUState\nfmi3DeSerializeFMUState!\nfmi3UpdateDiscreteStates\nfmi3EvaluateDiscreteStates","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetFMUState","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetFMUState","text":"fmi3GetFMUState(c::FMU3Instance)\n\nMakes a copy of the internal FMU state and returns a pointer to this copy.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nReturn state is a pointer to a copy of the internal FMU state.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3GetFMUState.\n\n\n\n\n\nfmi3GetFMUstate(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetFMUstate(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetFMUState!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetFMUState!","text":"fmi3GetFMUState!(c::FMU3Instance, FMUstate::Ref{fmi3FMUState})\n\nMakes a copy of the internal FMU state and returns a pointer to this copy\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nFMUstate::Ref{fmi3FMUstate}:If on entry FMUstate == NULL, a new allocation is required. If FMUstate != NULL, then FMUstate points to a previously returned FMUstate that has not been modified since.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3GetFMUState!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.4. Getting and Setting the Complete FMU State\n\nfmi3GetFMUstate makes a copy of the internal FMU state and returns a pointer to this copy\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetFMUState","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetFMUState","text":"fmi3SetFMUState(c::FMU3Instance, FMUstate::fmi3FMUState)\n\nCopies the content of the previously copied FMUstate back and uses it as actual new FMU state.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nFMUstate::fmi3FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3SetFMUState.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.4. Getting and Setting the Complete FMU State\n\nfmi3SetFMUstate copies the content of the previously copied FMUstate back and uses it as actual new FMU state.\n\n\n\n\n\nfmi3SetFMUState(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetFMUState(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3FreeFMUState!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3FreeFMUState!","text":"fmi3FreeFMUState!(c::FMU3Instance, FMUstate::Ref{fmi3FMUState})\n\nFrees all memory and other resources allocated with the fmi3GetFMUstate call for this FMUstate.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nFMUstate::fmi3FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\n\n\n\n\nfmi3FreeFMUState!(c::FMU3Instance, state::fmi3FMUState)\n\nFree the allocated memory for the FMU state.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nstate::fmi3FMUState: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nReturn singleton instance of type Nothing, if there is no value to return (as in a C void function) or when a variable or field holds no value.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.4. Getting and Setting the Complete FMU State\n\nfmi3FreeFMUstate frees all memory and other resources allocated with the fmi3GetFMUstate call for this FMUstate.\n\n\n\n\n\nfmi3FreeFMUState!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3FreeFMUState!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3SerializeFMUState","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3SerializeFMUState","text":"fmi3SerializeFMUState(c::FMU3Instance, state::fmi3FMUState)\n\nSerializes the data referenced by the pointer FMUstate and copies this data into the byte vector serializedState of length size to be provided by the environment.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nstate::fmi3FMUState: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nserializedState:: Array{fmi3Byte}: Return serializedState contains the copy of the serialized data referenced by the pointer FMUstate\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3SerializeFMUState.\n\n\n\n\n\nfmi3SerializeFMUState(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SerializeFMUState(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SerializeFMUState!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SerializeFMUState!","text":"fmi3SerializeFMUState!(c::FMU3Instance, FMUstate::fmi3FMUState, serialzedState::AbstractArray{fmi3Byte}, size::Csize_t)\n\nSerializes the data which is referenced by pointer FMUState and copies this data in to the byte vector serializedState of length size, that must be provided by the environment.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nFMUstate::fmi3FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\nserialzedState::AbstractArray{fmi3Byte}: Argument serializedState contains the copy of the serialized data referenced by the pointer FMUstate.\nsize::Ref{Csize_t}: Argument size is an object that safely references a value of type Csize_t and defines the size of the byte vector in which the FMUstate can be stored.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3SerializeFMUState!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.4. Getting and Setting the Complete FMU State\n\nfmi3SerializeFMUstate serializes the data which is referenced by pointer FMUstate and copies this data in to the byte vector serializedState of length size\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3SerializedFMUStateSize","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3SerializedFMUStateSize","text":"fmi3SerializedFMUStateSize(c::FMU3Instance, state::fmi3FMUState)\n\nReturns the size of the byte vector in which the FMUstate can be stored.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nstate::fmi3FMUState: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nReturn size is an object that safely references a value of type Csize_t.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3SerializedFMUStateSize.\n\n\n\n\n\nfmi3SerializedFMUStateSize(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SerializedFMUStateSize(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SerializedFMUStateSize!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SerializedFMUStateSize!","text":"fmi3SerializedFMUStateSize!(c::FMU3Instance, FMUstate::fmi3FMUState, size::Ref{Csize_t})\n\nFrees all memory and other resources allocated with the fmi3GetFMUstate call for this FMUstate.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nFMUstate::fmi3FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\nsize::Ref{Csize_t}: Argument size is an object that safely references a value of type Csize_t and defines the size of the byte vector in which the FMUstate can be stored.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3SerializedFMUStateSize!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.4. Getting and Setting the Complete FMU State\n\nfmi3SerializedFMUstateSize returns the size of the byte vector which is needed to store FMUstate in it.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3DeSerializeFMUState","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3DeSerializeFMUState","text":"fmi3SerializeFMUState(c::FMU3Instance, state::fmi3FMUState)\n\nSerializes the data referenced by the pointer FMUstate and copies this data into the byte vector serializedState of length size to be provided by the environment.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nserializedState::Array{fmi3Byte}: Argument serializedState contains the fmi3Byte field to be deserialized.\n\nReturns\n\nReturn state is a pointer to a copy of the internal FMU state.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3DeSerializeFMUState.\n\n\n\n\n\nfmi3DeSerializeFMUState(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3DeSerializeFMUState(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3DeSerializeFMUState!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3DeSerializeFMUState!","text":"fmi3DeSerializeFMUState!(c::FMU3Instance, serialzedState::AbstractArray{fmi3Byte}, size::Csize_t, FMUstate::Ref{fmi3FMUState})\n\nDeserializes the byte vector serializedState of length size, constructs a copy of the FMU state and stores the FMU state in the given address of the reference FMUstate, the pointer to this copy.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nFMUstate::fmi3FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\nserialzedState::AbstractArray{fmi3Byte}: Argument serializedState contains the copy of the serialized data referenced by the pointer FMUstate.\nsize::Ref{Csize_t}: Argument size is an object that safely references a value of type Csize_t and defines the size of the byte vector in which the FMUstate can be stored.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.4. Getting and Setting the Complete FMU State\n\nSee also fmi3DeSerializeFMUState!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.4. Getting and Setting the Complete FMU State\n\nfmi3DeSerializeFMUstate deserializes the byte vector serializedState of length size, constructs a copy of the FMU state and returns FMUstate, the pointer to this copy.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3UpdateDiscreteStates","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3UpdateDiscreteStates","text":"fmi3UpdateDiscreteStates(c::FMU3Instance, discreteStatesNeedUpdate::Ref{fmi3Boolean}, terminateSimulation::Ref{fmi3Boolean}, \n                                nominalsOfContinuousStatesChanged::Ref{fmi3Boolean}, valuesOfContinuousStatesChanged::Ref{fmi3Boolean},\n                                nextEventTimeDefined::Ref{fmi3Boolean}, nextEventTime::Ref{fmi3Float64})\n\nThis function is called to signal a converged solution at the current super-dense time instant. fmi3UpdateDiscreteStates must be called at least once per super-dense time instant.\n\nTODO Arguments\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\ndiscreteStatesNeedUpdate::Ref{fmi3Boolean}: \nterminateSimulation::Ref{fmi3Boolean}: \nnominalsOfContinuousStatesChanged::Ref{fmi3Boolean}: \nvaluesOfContinuousStatesChanged::Ref{fmi3Boolean}: \nnextEventTimeDefined::Ref{fmi3Boolean}: \nnextEventTime::Ref{fmi3Float64}: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.5. State: Event Mode\n\n\n\n\n\nfmi3UpdateDiscreteStates(c::FMU3Instance)\n\nThis function is called to signal a converged solution at the current super-dense time instant. fmi3UpdateDiscreteStates must be called at least once per super-dense time instant.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nTODO returns\n\nReturns\n\ndiscreteStatesNeedUpdate\nterminateSimulation\nnominalsOfContinuousStatesChanged\nvaluesOfContinuousStatesChanged\nnextEventTimeDefined\nnextEventTime\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.3.5. State: Event Mode\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.5. State: Event Mode\n\nThis function is called to signal a converged solution at the current super-dense time instant. fmi3UpdateDiscreteStates must be called at least once per super-dense time instant.\n\n\n\n\n\nfmi3UpdateDiscreteStates(fmu::FMU3)\n\nWrapper for fmi3UpdateDiscreteStates(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3EvaluateDiscreteStates","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3EvaluateDiscreteStates","text":"fmi3EvaluateDiscreteStates(c::FMU3Instance)\n\nThis function is called to trigger the evaluation of fdisc to compute the current values of discrete states from previous values.  The FMU signals the support of fmi3EvaluateDiscreteStates via the capability flag providesEvaluateDiscreteStates.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.3. State: Initialization Mode\n\nSee also fmi3EvaluateDiscreteStates.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.3. State: Initialization Mode\n\nThis function is called to trigger the evaluation of fdisc to compute the current values of discrete states from previous values.  The FMU signals the support of fmi3EvaluateDiscreteStates via the capability flag providesEvaluateDiscreteStates.\n\n\n\n\n\nfmi3EvaluateDiscreteStates(fmu::FMU3)\n\nWrapper for fmi3EvaluateDiscreteStates(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#Getting-Partial-Dervatives","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Getting Partial Dervatives","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"It is optionally possible to provide evaluation of partial derivatives for an FMU. For Model Exchange, this means computing the partial derivatives at a particular time instant. For Co-Simulation, this means to compute the partial derivatives at a particular communication point. One function is provided to compute directional derivatives. This function can be used to construct the desired partial derivative matrices.","category":"page"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3GetDirectionalDerivative\nfmi3GetDirectionalDerivative!\nfmi3SampleDirectionalDerivative\nfmi3SampleDirectionalDerivative!\nfmi3GetContinuousStateDerivatives\nfmi3GetContinuousStateDerivatives!\nfmi3GetAdjointDerivative!\nfmi3GetOutputDerivatives\nfmi3GetOutputDerivatives!\nfmi3GetJacobian\nfmi3GetJacobian!\nfmi3GetFullJacobian\nfmi3GetFullJacobian!","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetDirectionalDerivative","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetDirectionalDerivative","text":"fmi3GetDirectionalDerivative(c::FMU3Instance,\n    unknowns::AbstractArray{fmi3ValueReference},\n    knowns::AbstractArray{fmi3ValueReference},\n    seed::AbstractArray{fmi3Float64})\n\nWrapper Function call to compute the partial derivative with respect to the variables unknowns.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3) and Co-Simulation (section 4). In every Mode, the general form of the FMU equations are: unknowns = 𝐡(knowns, rest)\n\nunknowns: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><ContinuousStateDerivative>).\nEvent Mode (ModelExchange/CoSimulation): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nknowns: Real input variables of function h that changes its value in the actual Mode.\nrest: Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔunknowns = (δh / δknowns) Δknowns\n\nArguments\n\nc::FMU3Instance Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nunknowns::AbstracArray{fmi3ValueReference}: Argument unknowns contains values of typefmi3ValueReference which are identifiers of a variable value of the model. unknowns can be equated with unknowns(variable described above).\nknowns::AbstractArray{fmi3ValueReference}: Argument knowns contains values of type fmi3ValueReference which are identifiers of a variable value of the model.knowns can be equated with knowns(variable described above).\nseed::AbstractArray{fmi3Float64}:The vector values Compute the partial derivative with respect to the given entries in vector knowns with the matching evaluate of sensitivity.\n\nReturns\n\nsensitivity::Array{fmi3Float64}: Return sensitivity contains the directional derivative vector values.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.11. Getting Partial Derivatives\n\nSee also fmi3GetDirectionalDerivative.\n\n\n\n\n\nfmi3GetDirectionalDerivative(c::FMU3Instance,\n    unknowns::AbstractArray{fmi3ValueReference},\n    knowns::AbstractArray{fmi3ValueReference},\n    seed::fmi3Float64)\n\nWrapper Function call to compute the partial derivative with respect to the variables unknowns.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3) and Co-Simulation (section 4). In every Mode, the general form of the FMU equations are: unknowns = 𝐡(knowns, rest)\n\nunknowns: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><ContinuousStateDerivative>).\nEvent Mode (ModelExchange/CoSimulation): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nknowns: Real input variables of function h that changes its value in the actual Mode.\nrest: Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔunknowns = (δh / δknowns) Δknowns\n\nArguments\n\nc::FMU3Instance Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nunknowns::AbstracArray{fmi3ValueReference}: Argument unknowns contains values of typefmi3ValueReference which are identifiers of a variable value of the model. unknowns can be equated with unknowns(variable described above).\nknowns::AbstractArray{fmi3ValueReference}: Argument knowns contains values of type fmi3ValueReference which are identifiers of a variable value of the model.knowns can be equated with knowns(variable described above).\nseed::fmi3Float64 = 1.0:  If no seed value is passed the value seed = 1.0 is used. Compute the partial derivative with respect to knowns with the value seed = 1.0.  # gehört das zu den v_rest values\n\nReturns\n\nsensitivity::Array{fmi3Float64}: Return sensitivity contains the directional derivative vector values.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.11. Getting Partial Derivatives\n\nSee also fmi3GetDirectionalDerivative.\n\n\n\n\n\nfmi3GetDirectionalDerivative(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetDirectionalDerivative(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetDirectionalDerivative!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetDirectionalDerivative!","text":"fmi3GetDirectionalDerivative!(c::FMU3Instance,\n                                   unknowns::AbstractArray{fmi3ValueReference},\n                                   nUnknowns::Csize_t,\n                                   knowns::AbstractArray{fmi3ValueReference},\n                                   nKnowns::Csize_t,\n                                   seed::AbstractArray{fmi3Float64},\n                                   nSeed::Csize_t,\n                                   sensitivity::AbstractArray{fmi3Float64},\n                                   nSensitivity::Csize_t)\n\nWrapper Function call to compute the partial derivative with respect to the variables unknowns.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3) and Co-Simulation (section 4). In every Mode, the general form of the FMU equations are: unknowns = 𝐡(knowns, rest)\n\nunknowns: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><ContinuousStateDerivative>).\nEvent Mode (ModelExchange/CoSimulation): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nknowns: Real input variables of function h that changes its value in the actual Mode.\nrest: Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔunknowns = (δh / δknowns) Δknowns\n\nArguments\n\nc::FMU3Instance Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nunknowns::AbstracArray{fmi3ValueReference}: Argument unknowns contains values of typefmi3ValueReference which are identifiers of a variable value of the model. unknowns can be equated with unknowns(variable described above).\nnUnknowns::Csize_t:\nknowns::AbstractArray{fmi3ValueReference}: Argument knowns contains values of type fmi3ValueReference which are identifiers of a variable value of the model.knowns can be equated with knowns(variable described above).\nnKnowns::Csize_t:\nseed::AbstractArray{fmi3Float64}:The vector values Compute the partial derivative with respect to the given entries in vector knowns with the matching evaluate of sensitivity.\nnKnowns::Csize_t:\nsensitivity::AbstractArray{fmi3Float64}: Stores the directional derivative vector values.\nnKnowns::Csize_t:\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.11. Getting Partial Derivatives\n\nSee also fmi3GetDirectionalDerivative.\n\n\n\n\n\nfmi3GetDirectionalDerivative!(c::FMU3Instance,\n    unknowns::AbstractArray{fmi3ValueReference},\n    knowns::AbstractArray{fmi3ValueReference},\n    sensitivity::AbstractArray{fmi3Float64},\n    seed::AbstractArray{fmi3Float64})\n\nWrapper Function call to compute the partial derivative with respect to the variables unknowns.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3) and Co-Simulation (section 4). In every Mode, the general form of the FMU equations are: unknowns = 𝐡(knowns, rest)\n\nunknowns: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><ContinuousStateDerivative>).\nEvent Mode (ModelExchange/CoSimulation): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nknowns: Real input variables of function h that changes its value in the actual Mode.\nrest: Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔunknowns = (δh / δknowns) Δknowns\n\nArguments\n\nc::FMU3Instance Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nunknowns::AbstracArray{fmi3ValueReference}: Argument unknowns contains values of typefmi3ValueReference which are identifiers of a variable value of the model. unknowns can be equated with unknowns(variable described above).\nknowns::AbstractArray{fmi3ValueReference}: Argument knowns contains values of type fmi3ValueReference which are identifiers of a variable value of the model.knowns can be equated with knowns(variable described above).\nsensitivity::AbstractArray{fmi3Float64}: Stores the directional derivative vector values.\nseed::AbstractArray{fmi3Float64}:The vector values Compute the partial derivative with respect to the given entries in vector knowns with the matching evaluate of sensitivity.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.11. Getting Partial Derivatives\n\nSee also fmi3GetDirectionalDerivative!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.11. Getting Partial Derivatives\n\nThis function computes the directional derivatives v{sensitivity} = J ⋅ v{seed} of an FMU.\n\nunknowns - contains value references to the unknowns.\n\nnUnknowns - contains the length of argument unknowns.\n\nknowns - contains value references of the knowns.\n\nnKnowns - contains the length of argument knowns.\n\nseed - contains the components of the seed vector.\n\nnSeed - contains the length of seed.\n\nsensitivity - contains the components of the sensitivity vector.\n\nnSensitivity - contains the length of sensitivity.\n\nThis function can only be called if the 'ProvidesDirectionalDerivatives' tag in the ModelDescription is set.\n\n\n\n\n\nfmi3GetDirectionalDerivative!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetDirectionalDerivative!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3SampleDirectionalDerivative","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3SampleDirectionalDerivative","text":"fmi3SampleDirectionalDerivative(c::FMU3Instance,\nvUnknown_ref::AbstractArray{fmi3ValueReference},\nvKnown_ref::AbstractArray{fmi3ValueReference},\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing)\n\nThis function samples the directional derivative by manipulating corresponding values (central differences).\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔvunknown = (δh / δvknown) Δv_known\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvUnknown_ref::AbstractArray{fmi3ValueReference}: Argument vUnknown_ref contains values of typefmi3ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi3ValueReference}: Argument vKnown_ref contains values of type fmi3ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\ndvUnkonwn::Array{fmi3Float64}: Argument vUnknown_ref contains values of typefmi3ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(see function fmi3GetDirectionalDerivative!).\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7  Model Variables\n\nSee also fmi3GetDirectionalDerivative! ,fmi3GetDirectionalDerivative.\n\n\n\n\n\nfunction fmi3SampleDirectionalDerivative(c::FMU3Instance,\n    vUnknown_ref::Array{fmi3ValueReference},\n    vKnown_ref::Array{fmi3ValueReference},\n    steps::Array{fmi3Float64} = ones(fmi3Float64, length(vKnown_ref)).*1e-5)\n\nWrapper for fmi3SampleDirectionalDerivative! with dvUnknown initialized with zeros\n\nReturning dvUnknown, modified by fmi3SampleDirectionalDerivative! call.\n\n\n\n\n\nfmi3SampleDirectionalDerivative(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SampleDirectionalDerivative(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3SampleDirectionalDerivative!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3SampleDirectionalDerivative!","text":"fmi3SampleDirectionalDerivative!(c::FMU3Instance,\nvUnknown_ref::AbstractArray{fmi3ValueReference},\nvKnown_ref::AbstractArray{fmi3ValueReference},\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing)\n\nThis function samples the directional derivative by manipulating corresponding values (central differences).\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔvunknown = (δh / δvknown) Δv_known\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvUnknown_ref::AbstractArray{fmi3ValueReference}: Argument vUnknown_ref contains values of typefmi3ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi3ValueReference}: Argument vKnown_ref contains values of type fmi3ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nnothing\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7  Model Variables\n\nSee also fmi3GetDirectionalDerivative! ,fmi3GetDirectionalDerivative.\n\n\n\n\n\nfmi3SampleDirectionalDerivative!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SampleDirectionalDerivative!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetContinuousStateDerivatives","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetContinuousStateDerivatives","text":"fmi3GetContinuousStateDerivatives(c::FMU3Instance)\n\nCompute state derivatives at the current time instant and for the current states.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nReturns\n\nderivatives::Array{fmi3Float64}: Returns an array of fmi3Float64 values representing the derivatives for the current states. The ordering of the elements of the derivatives vector is identical to the ordering of the state\n\nvector.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3GetContinuousStateDerivatives.\n\n\n\n\n\nfmi3GetContinuousStateDerivatives(fmu::FMU3)\n\nWrapper for fmi3GetContinuousStateDerivatives(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetContinuousStateDerivatives!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetContinuousStateDerivatives!","text":"fmi3GetContinuousStateDerivatives!(c::FMU3Instance,\n                        derivatives::AbstractArray{fmi3Float64},\n                        nx::Csize_t)\n\nCompute state derivatives at the current time instant and for the current states.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nderivatives::AbstractArray{fmi3Float64}: Argument derivatives contains values of type fmi3Float64 which is a alias type for Real data type.derivatives is the AbstractArray which contains the Real values of the vector that represent the derivatives. The ordering of the elements of the derivatives vector is identical to the ordering of the state vector.\nnx::Csize_t: Argument nx defines the length of vector derivatives and is provided for checking purposes\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3GetContinuousStateDerivatives!.\n\n\n\n\n\nfmi3GetContinuousStateDerivatives!(c::FMU3Instance, derivatives::Array{fmi3Float64})\n\nCompute state derivatives at the current time instant and for the current states.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nderivatives::AbstractArray{fmi3Float64}: Argument derivatives contains values of type fmi3Float64 which is a alias type for Real data type.derivatives is the AbstractArray which contains the Real values of the vector that represent the derivatives. The ordering of the elements of the derivatives vector is identical to the ordering of the state vector.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 3.2.1. State: Continuous-Time Mode\n\nSee also fmi3GetContinuousStateDerivatives!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 3.2.1. State: Continuous-Time Mode\n\nCompute first-oder state derivatives at the current time instant and for the current states.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetAdjointDerivative!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetAdjointDerivative!","text":"fmi3GetAdjointDerivative!(c::FMU3Instance,\n            unknowns::AbstractArray{fmi3ValueReference},\n            nUnknowns::Csize_t,\n            knowns::AbstractArray{fmi3ValueReference},\n            nKnowns::Csize_t,\n            seed::AbstractArray{fmi3Float64},\n            nSeed::Csize_t,\n            sensitivity::AbstractArray{fmi3Float64},\n            nSensitivity::Csize_t)\n\nWrapper Function call to compute the partial derivative with respect to the variables unknowns.\n\nComputes the adjoint derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3) and Co-Simulation (section 4). In every Mode, the general form of the FMU equations are: unknowns = 𝐡(knowns, rest)\n\nunknowns: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><ContinuousStateDerivative>).\nEvent Mode (ModelExchange/CoSimulation): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nknowns: Real input variables of function h that changes its value in the actual Mode.\nrest: Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔunknowns = (δh / δknowns) Δknowns\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nunknowns::AbstracArray{fmi3ValueReference}: Argument unknowns contains values of typefmi3ValueReference which are identifiers of a variable value of the model. unknowns can be equated with unknowns(variable described above).\nnUnknowns::Csize_t:\nknowns::AbstractArray{fmi3ValueReference}: Argument knowns contains values of type fmi3ValueReference which are identifiers of a variable value of the model.knowns can be equated with knowns(variable described above).\nnKnowns::Csize_t:\nseed::AbstractArray{fmi3Float64}:The vector values Compute the partial derivative with respect to the given entries in vector knowns with the matching evaluate of sensitivity.\nnKnowns::Csize_t:\nsensitivity::AbstractArray{fmi3Float64}: Stores the adjoint derivative vector values.\nnKnowns::Csize_t:\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.11. Getting Partial Derivatives\n\nSee also fmi3GetAdjointDerivative!.\n\n\n\n\n\nfmi3GetAdjointDerivative!(c::FMU3Instance,\n    unknowns::AbstractArray{fmi3ValueReference},\n    knowns::AbstractArray{fmi3ValueReference},\n    sensitivity::AbstractArray{fmi3Float64},\n    seed::AbstractArray{fmi3Float64})\n\nWrapper Function call to compute the partial derivative with respect to the variables unknowns.\n\nComputes the adjoint derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3) and Co-Simulation (section 4). In every Mode, the general form of the FMU equations are: unknowns = 𝐡(knowns, rest)\n\nunknowns: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknown> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Output> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><ContinuousStateDerivative>).\nEvent Mode (ModelExchange/CoSimulation): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Output> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Output> with type Real and variability = continuous or discrete. If <ModelStructure><ContinuousStateDerivative> is present, also the variables listed here as state derivatives.\nknowns: Real input variables of function h that changes its value in the actual Mode.\nrest: Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔunknowns = (δh / δknowns) Δknowns\n\nArguments\n\nc::FMU3Instance Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nunknowns::AbstracArray{fmi3ValueReference}: Argument unknowns contains values of typefmi3ValueReference which are identifiers of a variable value of the model. unknowns can be equated with unknowns(variable described above).\nknowns::AbstractArray{fmi3ValueReference}: Argument knowns contains values of type fmi3ValueReference which are identifiers of a variable value of the model.knowns can be equated with knowns(variable described above).\nsensitivity::AbstractArray{fmi3Float64}: Stores the directional derivative vector values.\nseed::AbstractArray{fmi3Float64}:The vector values Compute the partial derivative with respect to the given entries in vector knowns with the matching evaluate of sensitivity.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.11. Getting Partial Derivatives\n\nSee also fmi3GetAdjointDerivative!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.11. Getting Partial Derivatives\n\nThis function computes the adjoint derivatives v^T{sensitivity}= v^T{seed} ⋅ J of an FMU.\n\nunknowns - contains value references to the unknowns.\n\nnUnknowns - contains the length of argument unknowns.\n\nknowns - contains value references of the knowns.\n\nnKnowns - contains the length of argument knowns.\n\nseed - contains the components of the seed vector.\n\nnSeed - contains the length of seed.\n\nsensitivity - contains the components of the sensitivity vector.\n\nnSensitivity - contains the length of sensitivity.\n\nThis function can only be called if the 'ProvidesAdjointDerivatives' tag in the ModelDescription is set.\n\n\n\n\n\nfmi3GetAdjointDerivative!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetAdjointDerivative!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetOutputDerivatives","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetOutputDerivatives","text":"fmi3GetOutputDerivatives!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nValueReferences::Csizet, order::AbstractArray{fmi3Int32}, values::AbstractArray{fmi3Float64}, nValues::Csizet)\n\nRetrieves the n-th derivative of output values.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::Array{fmi3ValueReference}: Argument vr is an array of nValueReferences value handels called \"ValueReference\" that t define the variables whose derivatives shall be set.\norder::Array{fmi3Int32}: Argument order is an array of fmi3Int32 values witch specifys the corresponding order of derivative of the real input variable.\n\nReturns\n\nvalue::AbstactArray{fmi3Float64}: Return value is an array which represents a vector with the values of the derivatives.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.12. Getting Derivatives of Continuous Outputs\n\nSee also fmi3GetOutputDerivatives.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetOutputDerivatives!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetOutputDerivatives!","text":"fmi3GetOutputDerivatives!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nValueReferences::Csize_t, order::AbstractArray{fmi3Int32}, values::AbstractArray{fmi3Float64}, nValues::Csize_t)\n\nRetrieves the n-th derivative of output values.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::Array{fmi3ValueReference}: Argument vr is an array of nValueReferences value handels called \"ValueReference\" that t define the variables whose derivatives shall be set.\nnValueReferences::Csize_t: Argument nValueReferences defines the size of vr.\norder::Array{fmi3Int32}: Argument order is an array of fmi3Int32 values witch specifys the corresponding order of derivative of the real input variable.\nvalues::Array{fmi3Float64}: Argument values is an array with the actual values of these variables.\nnValues::Csize_t: Argument nValues defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.12. Getting Derivatives of Continuous Outputs\n\nSee also fmi3GetOutputDerivatives!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.12. Getting Derivatives of Continuous Outputs\n\nRetrieves the n-th derivative of output values.\n\nvalueReferences - is a vector of value references that define the variables whose derivatives shall be retrieved. If multiple derivatives of a variable shall be retrieved, list the value reference multiple times.\n\nnValueReferences - is the dimension of the arguments valueReferences and orders.\n\norders - contains the orders of the respective derivative (1 means the first derivative, 2 means the second derivative, …, 0 is not allowed).  If multiple derivatives of a variable shall be retrieved, provide a list of them in the orders array, corresponding to a multiply occurring value reference in the valueReferences array. The highest order of derivatives retrievable can be determined by the 'maxOutputDerivativeOrder' tag in the ModelDescription.\n\nvalues - is a vector with the values of the derivatives. The order of the values elements is derived from a twofold serialization: the outer level corresponds to the combination of a value reference (e.g., valueReferences[k]) and order (e.g., orders[k]), and the inner level to the serialization of variables as defined in Section 2.2.6.1. The inner level does not exist for scalar variables.\n\nnValues - is the size of the argument values. nValues only equals nValueReferences if all corresponding output variables are scalar variables.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetJacobian","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetJacobian","text":"fmi3GetJacobian(inst::FMU3Instance,\n    rdx::AbstractArray{fmi3ValueReference},\n    rx::AbstractArray{fmi3ValueReference};\n    steps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing)\n\nBuilds the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function returns the jacobian ∂rdx / ∂rx.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. For optimization, if the FMU's model description has the optional entry 'dependencies', only dependent variables are sampled/retrieved. This drastically boosts performance for systems with large variable count (like CFD).\n\nArguments\n\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nrdx::AbstractArray{fmi3ValueReference}: Argument rdx contains values of typefmi3ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi3ValueReference}: Argument rx contains values of type fmi3ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nmat::Array{fmi3Float64}: Return mat contains the jacobian ∂rdx / ∂rx.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\n\n\n\n\nfmi3GetJacobian(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetJacobian(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetJacobian!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetJacobian!","text":"function fmi3GetJacobian!(jac::AbstractMatrix{fmi3Float64},\n    comp::FMU3Instance,\n    rdx::AbstractArray{fmi3ValueReference},\n    rx::AbstractArray{fmi3ValueReference};\n    steps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing)\n\nFills the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function stores the jacobian ∂rdx / ∂rx in an AbstractMatrix jac.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. For optimization, if the FMU's model description has the optional entry 'dependencies', only dependent variables are sampled/retrieved. This drastically boosts performance for systems with large variable count (like CFD).\n\nArguments\n\njac::AbstractMatrix{fmi3Float64}: Stores the the jacobian ∂rdx / ∂rx.\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nrdx::AbstractArray{fmi3ValueReference}: Argument rdx contains values of typefmi3ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi3ValueReference}: Argument rx contains values of type fmi3ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nnothing\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\n\n\n\n\nfmi3GetJacobian!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetJacobian!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetFullJacobian","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetFullJacobian","text":"fmi3GetFullJacobian(inst::FMU3Instance,\n    rdx::AbstractArray{fmi3ValueReference},\n    rx::AbstractArray{fmi3ValueReference};\n    steps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing)\n\nBuilds the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function returns the jacobian ∂rdx / ∂rx.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. No performance optimization, for an optimized version use fmi3GetJacobian.\n\nArguments\n\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nrdx::AbstractArray{fmi3ValueReference}: Argument rdx contains values of typefmi3ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi3ValueReference}: Argument rx contains values of type fmi3ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nmat::Array{fmi3Float64}: Return mat contains the jacobian ∂rdx / ∂rx.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\nSee also fmi3GetFullJacobian!\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetFullJacobian!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetFullJacobian!","text":"fmi3GetFullJacobian!(jac::Matrix{fmi3Float64},\n    inst::FMU3Instance,\n    rdx::AbstractArray{fmi3ValueReference},\n    rx::AbstractArray{fmi3ValueReference};\n    steps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing)\n\nFills the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function returns the jacobian ∂rdx / ∂rx.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. No performance optimization, for an optimized version use fmi3GetJacobian.\n\nArguments\n\njac::AbstractMatrix{fmi3Float64}: Stores the the jacobian ∂rdx / ∂rx.\ninst::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nrdx::AbstractArray{fmi3ValueReference}: Argument rdx contains values of typefmi3ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi3ValueReference}: Argument rx contains values of type fmi3ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi3Float64}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#TODO:-Clockstuff","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"TODO: Clockstuff","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3GetIntervalDecimal!\nfmi3SetIntervalDecimal\nfmi3GetIntervalFraction!\nfmi3SetIntervalFraction\nfmi3GetShiftDecimal!\nfmi3GetShiftFraction!\nfmi3GetClock\nfmi3GetClock!\nfmi3SetClock\nfmi3ActivateModelPartition\nfmi3CallbackClockUpdate","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetIntervalDecimal!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetIntervalDecimal!","text":"fmi3GetIntervalDecimal!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, intervals::AbstractArray{fmi3Float64}, qualifiers::fmi3IntervalQualifier)\n\nfmi3GetIntervalDecimal retrieves the interval until the next clock tick.\n\nFor input Clocks it is allowed to call this function to query the next activation interval. For changing aperiodic Clock, this function must be called in every Event Mode where this clock was activated. For countdown aperiodic Clock, this function must be called in every Event Mode. Clock intervals are computed in fmi3UpdateDiscreteStates (at the latest), therefore, this function should be called after fmi3UpdateDiscreteStates. For information about fmi3IntervalQualifiers, call ?fmi3IntervalQualifier\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nintervals::AbstractArray{fmi3Float64}: \nqualifiers::fmi3IntervalQualifier: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.9. Clocks\n\nSee also fmi3GetIntervalDecimal!.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetIntervalDecimal","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetIntervalDecimal","text":"fmi3SetIntervalDecimal(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, intervals::AbstractArray{fmi3Float64})\n\nSets the interval until the next clock tick\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nintervals::AbstractArray{fmi3Float64}: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.9. Clocks\n\nSee also fmi3SetIntervalDecimal.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetIntervalFraction!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetIntervalFraction!","text":"fmi3GetIntervalFraction!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, intervalCounters::AbstractArray{fmi3UInt64}, resolutions::AbstractArray{fmi3UInt64}, qualifiers::fmi3IntervalQualifier)\n\nfmi3GetIntervalFraction retrieves the interval until the next clock tick.\n\nFor input Clocks it is allowed to call this function to query the next activation interval. For changing aperiodic Clock, this function must be called in every Event Mode where this clock was activated. For countdown aperiodic Clock, this function must be called in every Event Mode. Clock intervals are computed in fmi3UpdateDiscreteStates (at the latest), therefore, this function should be called after fmi3UpdateDiscreteStates. For information about fmi3IntervalQualifiers, call ?fmi3IntervalQualifier\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nintervalCounters::AbstractArray{fmi3UInt64}: \nresolutions::AbstractArray{fmi3UInt64}: \nqualifiers::fmi3IntervalQualifier: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.9. Clocks\n\nSee also fmi3GetIntervalFraction!.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetIntervalFraction","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetIntervalFraction","text":"fmi3SetIntervalFraction(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, intervalCounters::AbstractArray{fmi3UInt64}, resolutions::AbstractArray{fmi3UInt64})\n\nSets the interval until the next clock tick. Only allowed if the attribute 'supportsFraction' is set.\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nintervalCounters::AbstractArray{fmi3UInt64}: \nresolutions::AbstractArray{fmi3UInt64}: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.9. Clocks\n\nSee also fmi3SetIntervalFraction.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetShiftDecimal!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetShiftDecimal!","text":"fmi3GetShiftDecimal!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, shifts::AbstractArray{fmi3Float64})\n\nfmi3GetShiftDecimal retrieves the delay to the first Clock tick from the FMU.\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nshifts::AbstractArray{fmi3Float64}:\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.9. Clocks\n\nSee also fmi3GetShiftDecimal!.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetShiftFraction!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetShiftFraction!","text":"fmi3GetShiftFraction!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, shiftCounters::AbstractArray{fmi3UInt64}, resolutions::AbstractArray{fmi3UInt64})\n\nfmi3GetShiftFraction retrieves the delay to the first Clock tick from the FMU.\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nshiftCounters::AbstractArray{fmi3UInt64}:\nresolutions::AbstractArray{fmi3UInt64}:\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.9. Clocks\n\nSee also fmi3GetShiftFraction!.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetClock","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetClock","text":"fmi3GetClock(c::FMU3Instance, vr::fmi3ValueReferenceFormat)\n\nGet the values of an array of fmi3Clock variables.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi3Clock}: returns values of an array of fmi3Clock variables with the dimension of fmi3ValueReferenceFormat length.\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetClock.\n\n\n\n\n\nfmi3GetClock(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetClock(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetClock!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetClock!","text":"fmi3GetClock!(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Clock}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalue::AbstractArray{fmi3Clock}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetClock!.\n\n\n\n\n\nfmi3GetClock!(c::FMU3Instance, vr::fmi3ValueReferenceFormat, values::AbstractArray{fmi3Clock})\n\nWrites the clock values of an array of variables in the given field\n\nfmi3GetClock! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi3Clock}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3GetClock!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3GetClock!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetClock!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3SetClock","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3SetClock","text":"fmi3SetClock(c::FMU3Instance, vr::AbstractArray{fmi3ValueReference}, nvr::Csize_t, value::AbstractArray{fmi3Clock}, nvalue::Csize_t)\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::AbstractArray{fmi3ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalue::AbstractArray{fmi3Clock}: Argument values is an AbstractArray with the actual values of these variables.\nnvalue::Csize_t: Argument nvalue defines the size of values.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetClock.\n\n\n\n\n\nfmi3SetClock(c::FMU3Instance, vr::fmi3ValueReferenceFormat, valueSizes::Union{AbstractArray{Csize_t}, Csize_t}, values::Union{AbstractArray{fmi3Clock}, fmi3Clock})\n\nSet the values of an array of clock variables\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{AbstractArray{fmi3Clock}, fmi3Clock}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.6.2. Getting and Setting Variable Values\n\nSee also fmi3SetClock.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.2.6.2. Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference.\n\nnValue - is different from nvr if the value reference represents an array and therefore are more values tied to a single value reference.\n\n\n\n\n\nfmi3SetClock(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3SetClock(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3ActivateModelPartition","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3ActivateModelPartition","text":"fmi3ActivateModelPartition(c::FMU3Instance, vr::fmi3ValueReference, activationTime::AbstractArray{fmi3Float64})\n\nDuring Clock Activation Mode (see 5.2.2.) after fmi3ActivateModelPartition has been called for a calculated, tunable or changing Clock the FMU provides the information on when the Clock will tick again, i.e. when the corresponding model partition has to be scheduled the next time.\n\nEach fmi3ActivateModelPartition call is associated with the computation of an exposed model partition of the FMU and therefore to an input Clock.\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReference: Argument vr is the value handel called \"ValueReference\" that define the variable that shall be inquired.\nactivationTime::AbstractArray{fmi3Float64}: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 5.2.2. State: Clock Activation Mode\n\nSee also fmi3ActivateModelPartition.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3CallbackClockUpdate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3CallbackClockUpdate","text":"fmi3CallbackLogger(_instanceEnvironment::Ptr{FMU3InstanceEnvironment},\n    _status::Cuint,\n    _category::Ptr{Cchar},\n    _message::Ptr{Cchar})\n\nA model partition of a Scheduled Execution FMU calls fmi3CallbackClockUpdate to signal that a triggered output Clock ticked or a new interval for a countdown Clock is available. fmi3CallbackClockUpdate switches the FMU itself then into the Clock Update Mode (see 5.2.3.). The callback may be called from several model partitions.\n\nArguments\n\n_instanceEnvironment::Ptr{FMU3InstanceEnvironment}: is the instance name of the model that calls this function. \n\nReturns\n\nnothing\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0, Version D5ef1c1: 5.2.2. State: Clock Activation Mode\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#Conversion-functions","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Conversion functions","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3StringToValueReference\nfmi3ValueReferenceToString\nfmi3StringToCausality\nfmi3CausalityToString\nfmi3StringToVariability\nfmi3VariabilityToString\nfmi3StringToStatus\nfmi3StatusToString\nfmi3StringToDependencyKind\nfmi3DependencyKindToString\nfmi3StringToInitial\nfmi3InitialToString\nfmi3IntervalQualifierToString\nfmi3StringToIntervalQualifier\nfmi3StringToType\nfmi3TypeToString\nfmi3VariableNamingConventionToString\nfmi3StringToVariableNamingConvention","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3StringToValueReference","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3StringToValueReference","text":"Returns an array of ValueReferences coresponding to the variable names.\n\n\n\n\n\nReturns the ValueReference coresponding to the variable name.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3ValueReferenceToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3ValueReferenceToString","text":"Returns an array of variable names matching a fmi3ValueReference.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToCausality","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToCausality","text":"fmi3StringToCausality(s::AbstractString)\n\nConvert s (\"parameter\", \"calculatedParameter\", \"structuralParameter\", \"input\", \"output\", \"local\", \"independent\") to the corresponding fmi3Causality.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3CausalityToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3CausalityToString","text":"ToDo.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToVariability","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToVariability","text":"fmi3StringToVariability(s::AbstractString)\n\nConvert s (\"constant\", \"fixed\", \"tunable\", \"discrete\", \"continuous\") to the corresponding fmi3Variability.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3VariabilityToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3VariabilityToString","text":"fmi3VariabilityToString(c::fmi3Variability)\n\nConvert fmi3Variability c to the corresponding String (\"constant\", \"fixed\", \"tunable\", \"discrete\", \"continuous\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToStatus","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToStatus","text":"fmi3CausalityToString(c::fmi3Causality)\n\nConvert fmi3Causality c to the corresponding String (\"parameter\", \"calculatedParameter\", \"structuralParameter\", \"input\", \"output\", \"local\", \"independent\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StatusToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StatusToString","text":"fmi3StatusToString(status::Union{fmi3Status, Integer})\n\nConverts fmi3Status status into a String (\"OK\", \"Warning\", \"Discard\", \"Error\", \"Fatal\", \"Unknown\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToDependencyKind","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToDependencyKind","text":"fmi3StringToDependencyKind(s::AbstractString)\n\nConvert s (\"independent\", \"dependent\", \"constant\", \"fixed\", \"tunable\", \"discrete\") to the corresponding fmi3DependencyKind.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3DependencyKindToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3DependencyKindToString","text":"fmi3DependencyKindToString(c::fmi3DependencyKind)\n\nConvert fmi3DependencyKind c to the corresponding String (\"independent\", \"dependent\", \"constant\", \"fixed\", \"tunable\", \"discrete\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToInitial","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToInitial","text":"fmi3StringToInitial(s::AbstractString)\n\nConvert s (\"approx\", \"exact\", \"calculated\") to the corresponding fmi3Initial.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3InitialToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3InitialToString","text":"fmi3InitialToString(c::fmi3Initial)\n\nConvert fmi3Initial c to the corresponding String (\"approx\", \"exact\", \"calculated\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3IntervalQualifierToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3IntervalQualifierToString","text":"fmi3IntervalQualifierToString(c::fmi3IntervalQualifier)\n\nConvert fmi3IntervalQualifier c to the corresponding String (\"intervalNotYetKnown\", \"intervalUnchanged\", \"intervalChanged\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToIntervalQualifier","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToIntervalQualifier","text":"fmi3StringToIntervalQualifier(s::AbstractString)\n\nConvert s (\"intervalNotYetKnown\", \"intervalUnchanged\", \"intervalChanged\") to the corresponding fmi3IntervalQualifier.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToType","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToType","text":"fmi3StringToType(s::AbstractString)\n\nConvert s (\"coSimulation\", \"modelExchange\", \"scheduledExecution\") to the corresponding fmi3Type.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3TypeToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3TypeToString","text":"fmi3TypeToString(c::fmi3Type)\n\nConvert fmi3Type c to the corresponding String (\"coSimulation\", \"modelExchange\", \"scheduledExecution\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3VariableNamingConventionToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3VariableNamingConventionToString","text":"fmi3VariableNamingConventionToString(c::fmi3VariableNamingConvention)\n\nConvert fmi3VariableNamingConvention c to the corresponding String (\"flat\", \"structured\").\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3StringToVariableNamingConvention","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3StringToVariableNamingConvention","text":"fmi3StringToVariableNamingConvention(s::AbstractString)\n\nConvert s (\"flat\", \"structured\") to the corresponding fmi3VariableNamingConvention.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#External/Additional-functions","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"External/Additional functions","text":"","category":"section"},{"location":"fmi3_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi3ModelVariablesForValueReference\nfmi3GetStartValue\n\nfmi3GetNumberOfVariableDependencies!\nfmi3GetVariableDependencies!","category":"page"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3ModelVariablesForValueReference","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3ModelVariablesForValueReference","text":"Returns the model variable(s) fitting the value reference.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMIImport.fmi3GetStartValue","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi3GetStartValue","text":"fmi3GetStartValue(md::fmi3ModelDescription, vrs::fmi3ValueReferenceFormat = md.valueReferences)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nmd::fmi3ModelDescription: Struct which provides the static information of ModelVariables.\nvrs::fmi3ValueReferenceFormat = md.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nfirst optional function: starts::Array{fmi3ValueReferenceFormat}: start/default value for a given value reference\nsecond optional function:starts::fmi3ValueReferenceFormat: start/default value for a given value reference\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\n\n\n\n\nfmi3GetStartValue(fmu::FMU3, vrs::fmi3ValueReferenceFormat = fmu.modelDescription.valueReferences)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nfmu::FMU3: Mutable struct representing a FMU and all it instantiated instances in the FMI 3.0 Standard.\nvrs::fmi3ValueReferenceFormat = md.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nfirst optional function: starts::Array{fmi3ValueReferenceFormat}: start/default value for a given value reference\nsecond optional function:starts::fmi3ValueReferenceFormat: start/default value for a given value reference\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\n\n\n\n\nfmi3GetStartValue(c::FMU3Instance, vrs::fmi3ValueReferenceFormat = c.fmu.modelDescription.valueReferences)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvrs::fmi3ValueReferenceFormat = md.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi3ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi3ValueReference, Array{fmi3ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nfirst optional function: starts::Array{fmi3ValueReferenceFormat}: start/default value for a given value reference\nsecond optional function:starts::fmi3ValueReferenceFormat: start/default value for a given value reference\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.4.7 Model Variables\n\n\n\n\n\nfmi3GetStartValue(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3GetStartValue(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetNumberOfVariableDependencies!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetNumberOfVariableDependencies!","text":"fmi3GetNumberOfVariableDependencies!(c::FMU3Instance, vr::fmi3ValueReference, nvr::Ref{Csize_t})\n\nThe number of dependencies of a given variable, which may change if structural parameters are changed, can be retrieved by calling fmi3GetNumberOfVariableDependencies.\n\nThis information can only be retrieved if the 'providesPerElementDependencies' tag in the ModelDescription is set.\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReference: Argument vr is the value handel called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.10. Dependencies of Variables\n\nSee also fmi3GetNumberOfVariableDependencies!.\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_library_functions/#FMICore.fmi3GetVariableDependencies!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi3GetVariableDependencies!","text":"fmi3GetVariableDependencies!(c::FMU3Instance, vr::fmi3ValueReference, elementIndiceOfDependents::AbstractArray{Csize_t}, independents::AbstractArray{fmi3ValueReference},  \n    elementIndiceOfInpendents::AbstractArray{Csize_t}, dependencyKind::AbstractArray{fmi3DependencyKind}, ndependencies::Csize_t)\n\nThe actual dependencies (of type dependenciesKind) can be retrieved by calling the function fmi3GetVariableDependencies:\n\nArguments\n\nc::FMU3Instance: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\nvr::fmi3ValueReference: Argument vr is the value handel called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nelementIndiceOfDependents::AbstractArray{Csize_t}: must point to a buffer of size_t values of size nDependencies allocated by the calling environment.    It is filled in by this function with the element index of the dependent variable that dependency information is provided for. The element indices start with 1. Using the element index 0 means all elements of the variable. (Note: If an array has more than one dimension the indices are serialized in the same order as defined for values in Section 2.2.6.1.)\nindependents::AbstractArray{fmi3ValueReference}:  must point to a buffer of fmi3ValueReference values of size nDependencies allocated by the calling environment.    It is filled in by this function with the value reference of the independent variable that this dependency entry is dependent upon.\nelementIndiceOfInpendents::AbstractArray{Csize_t}: must point to a buffer of size_t values of size nDependencies allocated by the calling environment.    It is filled in by this function with the element index of the independent variable that this dependency entry is dependent upon. The element indices start with 1. Using the element index 0 means all elements of the variable. (Note: If an array has more than one dimension the indices are serialized in the same order as defined for values in Section 2.2.6.1.)\ndependencyKind::AbstractArray{fmi3DependencyKind}: must point to a buffer of dependenciesKind values of size nDependencies allocated by the calling environment.    It is filled in by this function with the enumeration value describing the dependency of this dependency entry.\nndependencies::Csize_t: specifies the number of dependencies that the calling environment allocated space for in the result buffers, and should correspond to value obtained by calling fmi3GetNumberOfVariableDependencies.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.2.10. Dependencies of Variables\n\nSee also fmi3GetVariableDependencies!.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_types/#FMI2-Types-in-FMI-Import/Core-.jl","page":"FMI2 Types in FMI Import/Core .jl","title":"FMI2 Types in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi2_lowlevel_library_types/","page":"FMI2 Types in FMI Import/Core .jl","title":"FMI2 Types in FMI Import/Core .jl","text":"FMU2\nFMU2Component\nFMU2ComponentEnvironment\nFMU2InputFunction\nfmi2Struct\nfmi2StructMD\nfmi2Initial\nFMU2Solution\nfmi2ScalarVariable\nfmi2SimpleType\nfmi2Type\nfmi2Unit\nfmi2Char\nFMIImport.fmi2ValueReferenceFormat\nfmi2Variability\nfmi2VariableDependency\nfmi2DependencyKind\nfmi2EventInfo\nFMU2Event\nFMU2ExecutionConfiguration\nfmi2Status\nfmi2Annotation\nfmi2ModelDescription\nfmi2FMUstate\nfmi2StatusKind\nfmi2Causality","category":"page"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2","text":"The mutable struct representing a FMU (and a container for all its instances) in the FMI 2.0.2 Standard. Also contains the paths to the FMU and ZIP folder as well als all the FMI 2.0.2 function pointers.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2Component","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2Component","text":"The mutable struct represents an allocated instance of an FMU in the FMI 2.0.2 Standard.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2ComponentEnvironment","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2ComponentEnvironment","text":"Source: FMISpec 2.0.3 [p.16f]\n\nThis is a pointer to a data structure in the simulation environment that calls the FMU. Using this pointer, data from the modelDescription.xml file [(for example, mapping of valueReferences to variable names)] can be transferred between the simulation environment and the logger function (see [FMISpec 2.0.3] section 2.1.5).\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2InputFunction","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2InputFunction","text":"ToDo: Doc String\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMIImport.fmi2Struct","page":"FMI2 Types in FMI Import/Core .jl","title":"FMIImport.fmi2Struct","text":"Union containing a FMU2 or a FMU2Component\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMIImport.fmi2StructMD","page":"FMI2 Types in FMI Import/Core .jl","title":"FMIImport.fmi2StructMD","text":"Union containing a FMU2, a FMU2Component or a fmi2ModelDescription\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Initial","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Initial","text":"Source: FMISpec2.0.2[p.48]: 2.2.7 Definition of Model Variables (ModelVariables)\n\nEnumeration that defines how the variable is initialized. It is not allowed to provide a value for initial if causality = \"input\" or \"independent\":\n\n\"exact\": The variable is initialized with the start value (provided under Real, Integer, Boolean, String or Enumeration). \"approx\": The variable is an iteration variable of an algebraic loop and the iteration at initialization starts with the start value. \"calculated\": The variable is calculated from other variables during initialization. It is not allowed to provide a “start” value. If initial is not present, it is defined by the table below based on causality and variability. If initial = exact or approx, or causality = ″input″, a start value must be provided. If initial = calculated, or causality = ″independent″, it is not allowed to provide a start value. If fmiSetXXX is not called on a variable with causality = ″input″, then the FMU must use the start value as value of this input. Added prefix \"fmi2\" to help with redefinition of constans in enums.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2Solution","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2Solution","text":"The mutable struct representing a specific Solution of a FMI2 FMU.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2ScalarVariable","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2ScalarVariable","text":"Source: FMISpec2.0.2[p.46]: 2.2.7 Definition of Model Variables (ModelVariables)\n\nThe fmi2ScalarVariable specifies the type and argument of every exposed variable in the fmu\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2SimpleType","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2SimpleType","text":"Source: FMISpec2.0.3[p.40]: 2.2.3 Definition of Types (TypeDefinitions)\n\nThe fmi2SimpleType describes the attributes of a type definition.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Type","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Type","text":"Source: FMISpec2.0.2[p.19]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nArgument fmuType defines the type of the FMU:\n\nfmi2ModelExchange: FMU with initialization and events; between events simulation of continuous systems is performed with external integrators from the environment.\nfmi2CoSimulation: Black box interface for co-simulation.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Unit","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Unit","text":"Source: FMISpec2.0.3[p.35]: 2.2.2 Definition of Units (UnitDefinitions)\n\nElement “UnitDefinitions ” of fmiModelDescription.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Char","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Char","text":"Source: FMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nFMI2 Data Types To simplify porting, no C types are used in the function interfaces, but the alias types are defined in this section. All definitions in this section are provided in the header file “fmi2TypesPlatform.h”.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMIImport.fmi2ValueReferenceFormat","page":"FMI2 Types in FMI Import/Core .jl","title":"FMIImport.fmi2ValueReferenceFormat","text":"Union of (wildcard for) all ways to describe and pass a fmi2ValueReference (e.g. String, Int64, Array, fmi2ValueReference, ...)\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Variability","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Variability","text":"Source: FMISpec2.0.2[p.49]: 2.2.7 Definition of Model Variables (ModelVariables)\n\nEnumeration that defines the time dependency of the variable, in other words, it defines the time instants when a variable can change its value.\n\n\"constant\": The value of the variable never changes. \"fixed\": The value of the variable is fixed after initialization, in other words, after fmi2ExitInitializationMode was called the variable value does not change anymore. \"tunable\": The value of the variable is constant between external events (ModelExchange) and between Communication Points (Co-Simulation) due to changing variables with causality = \"parameter\" or \"input\" and variability = \"tunable\". Whenever a parameter or input signal with variability = \"tunable\" changes, an event is triggered externally (ModelExchange), or the change is performed at the next Communication Point (Co-Simulation) and the variables with variability = \"tunable\" and causality = \"calculatedParameter\" or \"output\" must be newly computed. \"discrete\": ModelExchange: The value of the variable is constant between external and internal events (= time, state, step events defined implicitly in the FMU). Co-Simulation: By convention, the variable is from a “real” sampled data system and its value is only changed at Communication Points (also inside the slave). \"continuous\": Only a variable of type = “Real” can be “continuous”. ModelExchange: No restrictions on value changes. Co-Simulation: By convention, the variable is from a differential The default is “continuous”. Added prefix \"fmi2\" to help with redefinition of constans in enums.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2VariableDependency","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2VariableDependency","text":"Mutable Struct representing existance and kind of dependencies of an Unknown on Known Variables in Continuous-Time and Event Mode (ME) and at Communication Points (CS)\n\nSee also FMI2.0.3 Spec fmi2VariableDependency [p.60]\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2DependencyKind","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2DependencyKind","text":"Types of dependency:\n\nfmi2DependencyKindDependent: no particular structure, f(v)\nfmi2DependencyKindConstant: constant factor, c*v (for Real valued variables only)\nfmi2DependencyKindFixed: tunable factor, p*v (for Real valued variables only)\nfmi2DependencyKindDependent: discrete factor, d*v (for Real valued variables only)\n\nSource: FMI2.0.3 Spec for fmi2VariableDependency [p.60] \n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2EventInfo","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2EventInfo","text":"Source: FMISpec2.0.2[p.84]: 3.2.2 Evaluation of Model Equations\n\nIf return argument fmi2eventInfo.newDiscreteStatesNeeded = fmi2True, the FMU should stay in Event Mode, and the FMU requires to set new inputs to the FMU (fmi2SetXXX on inputs) to compute and get the outputs (fmi2GetXXX on outputs) and to call fmi2NewDiscreteStates again. Depending on the connection with other FMUs, the environment shall\n\ncall fmi2Terminate, if terminateSimulation = fmi2True is returned by at least one FMU.\ncall fmi2EnterContinuousTimeMode if all FMUs return newDiscreteStatesNeeded = fmi2False.\nstay in Event Mode otherwise.\n\nWhen the FMU is terminated, it is assumed that an appropriate message is printed by the logger function (see section 2.1.5) to explain the reason for the termination. If nominalsOfContinuousStatesChanged = fmi2True, then the nominal values of the states have changed due to the function call and can be inquired with fmi2GetNominalsOfContinuousStates. If valuesOfContinuousStatesChanged = fmi2True. then at least one element of the continuous state vector has changed its value due to the function call. The new values of the states can be retrieved with fmi2GetContinuousStates or individually for each state for which reinit = \"true\" by calling getReal. If no element of the continuous state vector has changed its value, valuesOfContinuousStatesChanged must return fmi2False. [If fmi2True would be returned in this case, an infinite event loop may occur.] If nextEventTimeDefined = fmi2True, then the simulation shall integrate at most until time = nextEventTime, and shall call fmi2EnterEventMode at this time instant. If integration is stopped before nextEventTime, for example, due to a state event, the definition of nextEventTime becomes obsolete.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2Event","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2Event","text":"Container for event related information.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.FMU2ExecutionConfiguration","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.FMU2ExecutionConfiguration","text":"A mutable struct representing the excution configuration of a FMU. For FMUs that have issues with calls like fmi2Reset or fmi2FreeInstance, this is pretty useful.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Status","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Status","text":"Source: FMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nStatus returned by functions. The status has the following meaning:\n\nfmi2OK – all well\nfmi2Warning – things are not quite right, but the computation can continue. Function “logger” was called in the model (see below), and it is expected that this function has shown the prepared information message to the user.\nfmi2Discard – this return status is only possible if explicitly defined for the corresponding function\n\n(ModelExchange: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2SetContinuousStates, fmi2GetReal, fmi2GetDerivatives, fmi2GetContinuousStates, fmi2GetEventIndicators; CoSimulation: fmi2SetReal, fmi2SetInteger, fmi2SetBoolean, fmi2SetString, fmi2DoStep, fmiGetXXXStatus): For “model exchange”: It is recommended to perform a smaller step size and evaluate the model equations again, for example because an iterative solver in the model did not converge or because a function is outside of its domain (for example sqrt(<negative number>)). If this is not possible, the simulation has to be terminated. For “co-simulation”: fmi2Discard is returned also if the slave is not able to return the required status information. The master has to decide if the simulation run can be continued. In both cases, function “logger” was called in the FMU (see below) and it is expected that this function has shown the prepared information message to the user if the FMU was called in debug mode (loggingOn = fmi2True). Otherwise, “logger” should not show a message.\n\nfmi2Error – the FMU encountered an error. The simulation cannot be continued with this FMU instance. If one of the functions returns fmi2Error, it can be tried to restart the simulation from a formerly stored FMU state by calling fmi2SetFMUstate.\n\nThis can be done if the capability flag canGetAndSetFMUstate is true and fmi2GetFMUstate was called before in non-erroneous state. If not, the simulation cannot be continued and fmi2FreeInstance or fmi2Reset must be called afterwards.4 Further processing is possible after this call; especially other FMU instances are not affected. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user.\n\nfmi2Fatal – the model computations are irreparably corrupted for all FMU instances. [For example, due to a run-time exception such as access violation or integer division by zero during the execution of an fmi function]. Function “logger” was called in the FMU (see below), and it is expected that this function has shown the prepared information message to the user. It is not possible to call any other function for any of the FMU instances.\nfmi2Pending – this status is returned only from the co-simulation interface, if the slave executes the function in an asynchronous way. That means the slave starts to compute but returns immediately. The master has to call fmi2GetStatus(..., fmi2DoStepStatus) to determine if the slave has finished the computation. Can be returned only by fmi2DoStep and by fmi2GetStatus (see section 4.2.3).\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Annotation","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Annotation","text":"A not further specified annotation struct.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2ModelDescription","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2ModelDescription","text":"Source: FMISpec2.0.2[p.34]: 2.2.1 Definition of an FMU (fmiModelDescription)\n\nThe “ModelVariables” element of fmiModelDescription is the central part of the model description. It provides the static information of all exposed variables.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2FMUstate","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2FMUstate","text":"fmi2FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant. This allows to restart a simulation from a previous FMU state.\n\nSource: FMI2.0.3 Spec [p.17]; See also section 2.1.8\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2StatusKind","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2StatusKind","text":"Source: FMISpec2.0.2[p.106]: 4.2.3 Retrieving Status Information from the Slave\n\nCoSimulation specific Enum representing state of FMU after fmi2DoStep returned fmi2Pending.\n\n\n\n\n\n","category":"type"},{"location":"fmi2_lowlevel_library_types/#FMICore.fmi2Causality","page":"FMI2 Types in FMI Import/Core .jl","title":"FMICore.fmi2Causality","text":"Source: FMISpec2.0.2[p.48]: 2.2.7 Definition of Model Variables (ModelVariables)\n\nEnumeration that defines the causality of the variable. Allowed values of this enumeration:\n\n\"parameter\": Independent parameter (a data value that is constant during the simulation and is provided by the environment and cannot be used in connections). variability must be \"fixed\" or \"tunable\". initial must be exact or not present (meaning exact). \"calculatedParameter\": A data value that is constant during the simulation and is computed during initialization or when tunable parameters change. variability must be \"fixed\" or \"tunable\". initial must be \"approx\", \"calculated\" or not present (meaning calculated). \"input\": The variable value can be provided from another model or slave. It is not allowed to define initial. \"output\": The variable value can be used by another model or slave. The algebraic relationship to the inputs is defined via the dependencies attribute of <fmiModelDescription><ModelStructure><Outputs><Unknown>. \"local\": Local variable that is calculated from other variables or is a continuous-time state (see section 2.2.8). It is not allowed to use the variable value in another model or slave. \"independent\": The independent variable (usually “time”). All variables are a function of this independent variable. variability must be \"continuous\". At most one ScalarVariable of an FMU can be defined as \"independent\". If no variable is defined as \"independent\", it is implicitly present with name = \"time\" and unit = \"s\". If one variable is defined as \"independent\", it must be defined as \"Real\" without a \"start\" attribute. It is not allowed to call function fmi2SetReal on an \"independent\" variable. Instead, its value is initialized with fmi2SetupExperiment and after initialization set by fmi2SetTime for ModelExchange and by arguments currentCommunicationPoint and communicationStepSize of fmi2DoStep for CoSimulation. [The actual value can be inquired with fmi2GetReal.] The default of causality is “local”. A continuous-time state must have causality = \"local\" or \"output\", see also section 2.2.8. [causality = \"calculatedParameter\" and causality = \"local\" with variability = \"fixed\" or \"tunable\" are similar. The difference is that a calculatedParameter can be used in another model or slave, whereas a local variable cannot. For example, when importing an FMU in a Modelica environment, a \"calculatedParameter\" should be imported in a public section as final parameter, whereas a \"local\" variable should be imported in a protected section of the model.] Added prefix \"fmi2\" to help with redefinition of constans in enums.\n\n\n\n\n\n","category":"type"},{"location":"examples/parameter_optimization/#FMU-Parameter-Optimization","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Tutorial by Tobias Thummerer","category":"page"},{"location":"examples/parameter_optimization/#License","page":"FMU Parameter Optimization","title":"License","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/parameter_optimization/#Introduction-to-the-example","page":"FMU Parameter Optimization","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"This example shows how a parameter optimization can be set up for a FMU. The goal is to fit FMU parameters (and initial states), so that a reference trajectory is fit as good as possible.","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Note, that this tutorial covers optimization without gradient information. Basically, FMI.jl supports gradient based optimization, too.","category":"page"},{"location":"examples/parameter_optimization/#Other-formats","page":"FMU Parameter Optimization","title":"Other formats","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/parameter_optimization/#Getting-started","page":"FMU Parameter Optimization","title":"Getting started","text":"","category":"section"},{"location":"examples/parameter_optimization/#Installation-prerequisites","page":"FMU Parameter Optimization","title":"Installation prerequisites","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":" Description Command\n1. Enter Package Manager via ]\n2. Install FMI via add FMI\n3. Install FMIZoo via add FMIZoo\n4. Install Optim  via add Optim\n5. Install Plots  via add Plots","category":"page"},{"location":"examples/parameter_optimization/#Code-section","page":"FMU Parameter Optimization","title":"Code section","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"# imports\nusing FMI\nusing FMIZoo\nusing Optim\nusing Plots","category":"page"},{"location":"examples/parameter_optimization/#Simulation-setup","page":"FMU Parameter Optimization","title":"Simulation setup","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Next, the start time and end time of the simulation are set.","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"tStart = 0.0\ntStop = 5.0\ntStep = 0.1\ntSave = tStart:tStep:tStop","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"0.0:0.1:5.0","category":"page"},{"location":"examples/parameter_optimization/#Import-FMU","page":"FMU Parameter Optimization","title":"Import FMU","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"In the next lines of code the FMU model from FMIZoo.jl is loaded and the information about the FMU is shown.","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"# we use an FMU from the FMIZoo.jl\nfmu = fmiLoad(\"SpringPendulum1D\", \"Dymola\", \"2022x\"; type=:ME)\nfmiInfo(fmu)","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"#################### Begin information for FMU ####################\n\tModel name:\t\t\tSpringPendulum1D\n\tFMI-Version:\t\t\t2.0\n\tGUID:\t\t\t\t{fc15d8c4-758b-48e6-b00e-5bf47b8b14e5}\n\tGeneration tool:\t\tDymola Version 2022x (64-bit), 2021-10-08\n\tGeneration time:\t\t2022-05-19T06:54:23Z\n\tVar. naming conv.:\t\tstructured\n\tEvent indicators:\t\t0\n\tInputs:\t\t\t\t0\n\tOutputs:\t\t\t0\n\tStates:\t\t\t\t2\n\t\t33554432 [\"mass.s\"]\n\t\t33554433 [\"mass.v\"]\n\tSupports Co-Simulation:\t\ttrue\n\t\tModel identifier:\tSpringPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n\t\tVar. com. steps:\ttrue\n\t\tInput interpol.:\ttrue\n\t\tMax order out. der.:\t1\n\tSupports Model-Exchange:\ttrue\n\t\tModel identifier:\tSpringPendulum1D\n\t\tGet/Set State:\t\ttrue\n\t\tSerialize State:\ttrue\n\t\tDir. Derivatives:\ttrue\n##################### End information for FMU #####################","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Now, the optimization objective (the function to minimize) needs to be defined. In this case, we just want to do a simulation and compare it to a regular sin wave.","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"s_tar = 1.0 .+ sin.(tSave)\n\n# a function to simulate the FMU for given parameters\nfunction simulateFMU(p)\n    s0, v0, c, m = p # unpack parameters: s0 (start position), v0 (start velocity), c (spring constant) and m (pendulum mass)\n\n    # pack the parameters into a dictionary\n    paramDict = Dict{String, Any}()\n    paramDict[\"spring.c\"] = c \n    paramDict[\"mass.m\"] = m\n\n    # pack the start state\n    x0 = [s0, v0]\n\n    # simulate with given start stae and parameters\n    sol = fmiSimulate(fmu, (tStart, tStop); x0=x0, parameters=paramDict, saveat=tSave)\n\n    # get state with index 1 (the position) from the solution\n    s_res = fmiGetSolutionState(sol, 1; isIndex=true) \n\n    return s_res\nend\n\n# the optimization objective\nfunction objective(p)\n    s_res = simulateFMU(p)\n\n    # return the position error sum between FMU simulation (s_res) and target (s_tar)\n    return sum(abs.(s_tar .- s_res))    \nend","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"objective (generic function with 1 method)","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Now let's see how far we are away for our guess parameters:","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"s0 = 0.0 \nv0 = 0.0\nc = 1.0\nm = 1.0 \np = [s0, v0, c, m]\n\nobj_before = objective(p) # not really good!","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"\u001b[34mSimulating ME-FMU ... 100%|██████████████████████████████| Time: 0:00:08\u001b[39m\n\n\n\n\n\n54.43219974960283","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Let's have a look on the differences:","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"s_fmu = simulateFMU(p); # simulate the position\n\nplot(tSave, s_fmu; label=\"FMU\")\nplot!(tSave, s_tar; label=\"Optimization target\")","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"(Image: svg)","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Not that good. So let's do a bit of optimization!","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"opt = Optim.optimize(objective, p; iterations=250) # do max. 250 iterations\nobj_after = opt.minimum # much better!\np_res = opt.minimizer # the optimized parameters","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"4-element Vector{Float64}:\n 1.000000090936486\n 0.9779757996615742\n 0.130860011492463\n 0.11402874395172038","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Looks promising, let's have a look on the results plot:","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"s_fmu = simulateFMU(p_res); # simulate the position\n\nplot(tSave, s_fmu; label=\"FMU\")\nplot!(tSave, s_tar; label=\"Optimization target\")","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"(Image: svg)","category":"page"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"Actually a pretty fit! If you have higher requirements, check out the Optim.jl library.","category":"page"},{"location":"examples/parameter_optimization/#Summary","page":"FMU Parameter Optimization","title":"Summary","text":"","category":"section"},{"location":"examples/parameter_optimization/","page":"FMU Parameter Optimization","title":"FMU Parameter Optimization","text":"This tutorial showed how a parameter (and start value) optimization can be performed on a FMU with a gradient free optimizer. This tutorial will be extended soon to further show how convergence for large parameter spaces can be improoved!","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMI-Common-Concepts-for-Model-Exchange-and-Co-Simulation","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"In both cases, FMI defines an input/output block of a dynamic model where the distribution of the block, the platform dependent header file, several access functions, as well as the schema files are identical.","category":"page"},{"location":"fmi2_lowlevel_library_functions/#Opening-and-closing-FMUs","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Opening and closing FMUs","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2Unzip\nfmi2Load\nfmi2Reload\nfmi2Unload","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Unzip","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Unzip","text":"fmi2Unzip(pathToFMU::String; unpackPath=nothing, cleanup=true)\n\nCreate a copy of the .fmu file as a .zip folder and unzips it. Returns the paths to the zipped and unzipped folders.\n\nArguments\n\npathToFMU::String: The folder path to the .zip folder.\n\nKeywords\n\nunpackPath=nothing: Via optional argument unpackPath, a path to unpack the FMU can be specified (default: system temporary directory).\ncleanup=true: The cleanup option controls whether the temporary directory is automatically deleted when the process exits.\n\nReturns\n\nunzippedAbsPath::String: Contains the Path to the uzipped Folder.\nzipAbsPath::String: Contains the Path to the zipped Folder.\n\nSee also mktempdir.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Load","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Load","text":"fmi2Load(pathToFMU::String;\n            unpackPath=nothing,\n            type=nothing,\n            cleanup=true)\n\nSets the properties of the fmu by reading the modelDescription.xml. Retrieves all the pointers of binary functions.\n\nArguments\n\npathToFMU::String: The folder path to the .fmu file.\n\nKeywords\n\nunpackPath=nothing: Via optional argument unpackPath, a path to unpack the FMU can be specified (default: system temporary directory).\ntype=nothing: Defines whether a Co-Simulation or Model Exchange is present\ncleanup=true: The cleanup option controls whether the temporary directory is automatically deleted when the process exits.\n\nReturns\n\nReturns the instance of the FMU struct.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Reload","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Reload","text":"fmi2Reload(fmu::FMU2)\n\nReloads the FMU-binary. This is useful, if the FMU does not support a clean reset implementation.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Unload","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Unload","text":"fmi2Unload(fmu::FMU2, cleanUp::Bool = true)\n\nUnload a FMU. Free the allocated memory, close the binaries and remove temporary zip and unziped FMU model description.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\ncleanUp::Bool= true: Defines if the file and directory should be deleted.\n\nKeywords\n\nsecure_pointers=true whether pointers to C-functions should be overwritten with dummies with Julia assertions, instead of pointing to dead memory (slower, but more user safe)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#Creation,-Destruction-and-Logging-of-FMU-Instances","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Creation, Destruction and Logging of FMU Instances","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2Instantiate!\nfmi2Instantiate\nfmi2FreeInstance!\nfmi2SetDebugLogging","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Instantiate!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Instantiate!","text":"fmi2Instantiate!(fmu::FMU2;\n                    instanceName::String=fmu.modelName,\n                    type::fmi2Type=fmu.type,\n                    pushComponents::Bool = true,\n                    visible::Bool = false,\n                    loggingOn::Bool = fmu.executionConfig.loggingOn,\n                    externalCallbacks::Bool = fmu.executionConfig.externalCallbacks,\n                    logStatusOK::Bool=true,\n                    logStatusWarning::Bool=true,\n                    logStatusDiscard::Bool=true,\n                    logStatusError::Bool=true,\n                    logStatusFatal::Bool=true,\n                    logStatusPending::Bool=true)\n\nCreate a new instance of the given fmu, adds a logger if logginOn == true.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\ninstanceName::String=fmu.modelName: Name of the instance\ntype::fmi2Type=fmu.type: Defines whether a Co-Simulation or Model Exchange is present\npushComponents::Bool = true: Defines if the fmu components should be pushed in the application.\nvisible::Bool = false if the FMU should be started with graphic interface, if supported (default=false)\nloggingOn::Bool = fmu.executionConfig.loggingOn if the FMU should log and display function calls (default=false)\nexternalCallbacks::Bool = fmu.executionConfig.externalCallbacks if an external shared library should be used for the fmi2CallbackFunctions, this may improve readability of logging messages (default=false)\nlogStatusOK::Bool=true whether to log status of kind fmi2OK (default=true)\nlogStatusWarning::Bool=true whether to log status of kind fmi2Warning (default=true)\nlogStatusDiscard::Bool=true whether to log status of kind fmi2Discard (default=true)\nlogStatusError::Bool=true whether to log status of kind fmi2Error (default=true)\nlogStatusFatal::Bool=true whether to log status of kind fmi2Fatal (default=true)\nlogStatusPending::Bool=true whether to log status of kind fmi2Pending (default=true)\n\nReturns\n\nReturns the instance of a new FMU component.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\nSee also fmi2Instantiate.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2Instantiate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2Instantiate","text":"Source: FMISpec2.0.2[p.19]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nThe function returns a new instance of an FMU.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2FreeInstance!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2FreeInstance!","text":"Source: FMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nDisposes the given instance, unloads the loaded model, and frees all the allocated memory and other resources that have been allocated by the functions of the FMU interface. If a null pointer is provided for “c”, the function call is ignored (does not have an effect).\n\nRemoves the component from the FMUs component list.\n\n\n\n\n\nfmi2FreeInstance!(fmu::FMU2)\n\nWrapper for fmi2FreeInstance!(c::FMU2Component; popComponent::Bool = true) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetDebugLogging","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetDebugLogging","text":"fmi2SetDebugLogging(c::FMU2Component, logginOn::fmi2Boolean, nCategories::Unsigned, categories::Ptr{Nothing})\n\nControl the use of the logging callback function, version independent.\n\nArguments\n\nc::FMU2Component: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nlogginOn::fmi2Boolean: If loggingOn = fmi2True, debug logging is enabled for the log categories specified in categories, otherwise it is disabled. Type fmi2Boolean is defined as an alias Type for the C-Type Boolean and is to be used with fmi2True and fmi2False.\nnCategories::Unsigned: Argument nCategories defines the length of the argument categories.\ncategories::Ptr{Nothing}:\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nSee also fmi2SetDebugLogging.\n\n\n\n\n\nfmi2SetDebugLogging(c::FMU2Component)\n\nControl the use of the logging callback function, version independent.\n\nArguments\n\nc::FMU2Component: Argument c is a mutable struct representing an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nSee also fmi2SetDebugLogging.\n\n\n\n\n\nSource: FMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nThe function controls debug logging that is output via the logger function callback. If loggingOn = fmi2True, debug logging is enabled, otherwise it is switched off.\n\n\n\n\n\nfmi2SetDebugLogging(fmu::FMU2)\n\nWrapper for fmi2SetDebugLogging(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#Initialization,-Termination,-and-Resetting-an-FMU","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Initialization, Termination, and Resetting an FMU","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2SetupExperiment\nfmi2EnterInitializationMode\nfmi2ExitInitializationMode\nfmi2Terminate\nfmi2Reset","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetupExperiment","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetupExperiment","text":"fmi2SetupExperiment(c::FMU2Component, toleranceDefined::fmi2Boolean, tolerance::fmi2Real, startTime::fmi2Real, stopTimeDefined::fmi2Boolean, stopTime::fmi2Real)\n\nInforms the FMU to setup the experiment. This function must be called after fmi2Instantiate and before fmi2EnterInitializationMode is called.\n\nArguments\n\nc::FMU2Component: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\ntoleranceDefined::fmi2Boolean: Arguments toleranceDefined depend on the FMU type:\nfmuType = fmi2ModelExchange: If toleranceDefined = fmi2True, then the model is called with a numerical integration scheme where the step size is controlled by using tolerance for error estimation. In such a case, all numerical algorithms used inside the model (for example, to solve non-linear algebraic equations) should also operate with an error estimation of an appropriate smaller relative tolerance.\nfmuType = fmi2CoSimulation: If toleranceDefined = fmi2True, then the communication interval of the slave is controlled by error estimation.  In case the slave utilizes a numerical integrator with variable step size and error estimation, it is suggested to use “tolerance” for the error estimation of the internal integrator (usually as relative tolerance). An FMU for Co-Simulation might ignore this argument.\nstartTime::fmi2Real: Argument startTime can be used to check whether the model is valid within the given boundaries or to allocate memory which is necessary for storing results. It is the fixed initial value of the independent variable and if the independent variable is time, startTime is the starting time of initializaton.\nstopTimeDefined::fmi2Boolean:  If stopTimeDefined = fmi2True, then stopTime is the defined final value of the independent variable and if stopTimeDefined = fmi2False, then no final value\n\nof the independent variable is defined and argument stopTime is meaningless.\n\nstopTime::fmi2Real: Argument stopTime can be used to check whether the model is valid within the given boundaries or to allocate memory which is necessary for storing results. It is the fixed final value of the independent variable and if the independent variable is “time”, stopTime is the stop time of the simulation.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nSee also fmi2SetupExperiment.\n\n\n\n\n\nfmi2SetupExperiment(c::FMU2Component, \n                        startTime::Union{Real, Nothing} = nothing, \n                        stopTime::Union{Real, Nothing} = nothing; \n                        tolerance::Union{Real, Nothing} = nothing)\n\nSetup the simulation but without defining all of the parameters.\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct representing an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstartTime::Union{Real, Nothing} = nothing: startTime is a real number which sets the value of starting time of the experiment. The default value is set automatically if doing nothing (default = nothing).\nstopTime::Union{Real, Nothing} = nothing: stopTime is a real number which sets the value of ending time of the experiment. The default value is set automatically if doing nothing (default = nothing).\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: tolerance is a real number which sets the value of tolerance range. The default value is set automatically if doing nothing (default = nothing).\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInstantiated.\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2SetupExperiment.\n\n\n\n\n\nSource: FMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nInforms the FMU to setup the experiment. This function must be called after fmi2Instantiate and before fmi2EnterInitializationMode is called.The function controls debug logging that is output via the logger function callback. If loggingOn = fmi2True, debug logging is enabled, otherwise it is switched off.\n\n\n\n\n\nfmi2SetupExperiment(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetupExperiment(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2EnterInitializationMode","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2EnterInitializationMode","text":"fmi2EnterInitializationMode(c::FMU2Component)\n\nInforms the FMU to enter Initialization Mode. Before calling this function, all variables with attribute <ScalarVariable initial = \"exact\" or \"approx\"> can be set with the “fmi2SetXXX” functions (the ScalarVariable attributes are defined in the Model Description File, see section 2.2.7). Setting other variables is not allowed. Furthermore, fmi2SetupExperiment must be called at least once before calling fmi2EnterInitializationMode, in order that startTime is defined.\n\nArguments\n\nc::FMU2Component: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nSee also fmi2EnterInitializationMode.\n\n\n\n\n\nSource: FMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nInforms the FMU to enter Initialization Mode. Before calling this function, all variables with attribute <ScalarVariable initial = \"exact\" or \"approx\"> can be set with the “fmi2SetXXX” functions (the ScalarVariable attributes are defined in the Model Description File, see section 2.2.7). Setting other variables is not allowed. Furthermore, fmi2SetupExperiment must be called at least once before calling fmi2EnterInitializationMode, in order that startTime is defined.\n\n\n\n\n\nfmi2EnterInitializationMode(fmu::FMU2)\n\nWrapper for fmi2EnterInitializationMode(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2ExitInitializationMode","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2ExitInitializationMode","text":"fmi2ExitInitializationMode(c::FMU2Component)\n\nInforms the FMU to exit Initialization Mode.\n\nArguments\n\nc::FMU2Component: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nSee also fmi2EnterInitializationMode.\n\n\n\n\n\nSource: FMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nInforms the FMU to exit Initialization Mode.\n\n\n\n\n\nfmi2ExitInitializationMode(fmu::FMU2)\n\nWrapper for fmi2ExitInitializationMode(c::FMU2Component) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2Terminate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2Terminate","text":"fmi2Terminate(c::FMU2Component; soft::Bool=false)\n\nInforms the FMU that the simulation run is terminated.\n\nArguments\n\nc::FMU2Component: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the command is only performed if the FMU is in an allowed state for this command.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.22]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.22]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nSee also fmi2Terminate.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nInforms the FMU that the simulation run is terminated.\n\n\n\n\n\nfmi2Terminate(fmu::FMU2)\n\nWrapper for fmi2Terminate(c::FMU2Component; soft::Bool=false) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2Reset","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2Reset","text":"fmi2Reset(c::FMU2Component; soft::Bool=false)\n\nIs called by the environment to reset the FMU after a simulation run. The FMU goes into the same state as if fmi2Instantiate would have been called.All variables have their default values. Before starting a new run, fmi2SetupExperiment and fmi2EnterInitializationMode have to be called.\n\nArguments\n\nc::FMU2Component: Argument c is a Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the command is only performed if the FMU is in an allowed state for this command.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.3 Link: https://fmi-standard.org/\nFMISpec2.0.3[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.3[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.3[p.22]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nSee also fmi2Terminate.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.6 Initialization, Termination, and Resetting an FMU\n\nIs called by the environment to reset the FMU after a simulation run. The FMU goes into the same state as if fmi2Instantiate would have been called.\n\n\n\n\n\nfmi2Reset(fmu::FMU2)\n\nWrapper for fmi2Reset(c::FMU2Component; soft::Bool=false) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#Getting-and-Setting-Variable-Values","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Getting and Setting Variable Values","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"All variable values of an FMU are identified with a variable handle called “value reference”. The handle is defined in the modelDescription.xml file (as attribute “valueReference” in element “ScalarVariable”). Element “valueReference” might not be unique for all variables. If two or more variables of the same base data type (such as fmi2Real) have the same valueReference, then they have identical values but other parts of the variable definition might be different (for example, min/max attributes).","category":"page"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2Get\nfmi2Get!\nfmi2Set\nfmi2GetReal\nfmi2GetReal!\nfmi2GetInteger\nfmi2GetInteger!\nfmi2GetBoolean\nfmi2GetBoolean!\nfmi2GetString\nfmi2GetString!\nfmi2SetReal\nfmi2SetInteger\nfmi2SetBoolean\nfmi2SetString","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Get","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Get","text":"fmi2Get(comp::FMU2Component, vrs::fmi2ValueReferenceFormat)\n\nReturns the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference in an array.\n\nArguments\n\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvrs::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\ndstArray::Array{Any,1}(undef, length(vrs)): Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). dstArray is a 1-Dimensional Array that has the same length as vrs.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\nfmi2Get(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2Get(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Get!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Get!","text":"fmi2Get!(comp::FMU2Component, vrs::fmi2ValueReferenceFormat, dstArray::AbstractArray)\n\nStores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference and returns an array that indicates the Status.\n\nArguments\n\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvrs::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\ndstArray::AbstractArray: Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). dstArray has the same length as vrs.\n\nReturns\n\nretcodes::Array{fmi2Status}: Returns an array of length length(vrs) with Type fmi2Status. Type fmi2Status is an enumeration and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\nfmi2Get!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2Get!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2Set","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2Set","text":"fmi2Set(comp::FMU2Component,\n            vrs::fmi2ValueReferenceFormat,\n            srcArray::AbstractArray;\n            filter=nothing)\n\nStores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference and returns an array that indicates the Status.\n\nArguments\n\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvrs::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nsrcArray::AbstractArray: Stores the specific value of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr (vr = vrs[i]). srcArray has the same length as vrs.\n\nKeywords\n\nfilter=nothing: It is applied to each ModelVariable to determine if it should be updated.\n\nReturns\n\nretcodes::Array{fmi2Status}: Returns an array of length length(vrs) with Type fmi2Status. Type fmi2Status is an enumeration and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\n\n\n\n\nfmi2Set(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2Set(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetReal","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetReal","text":"fmi2GetReal(c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nGet the values of an array of fmi2Real variables.\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fm2Real}: Returns values of an array of fmi2Real variables with the dimension of fmi2ValueReferenceFormat length.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetReal.\n\n\n\n\n\nfmi2GetReal(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetReal(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetReal!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetReal!","text":"fmi2GetReal!(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::AbstractArray{fmi2Real})\n\nFunctions to get and set values of variables idetified by their valueReference\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fm2Real}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nSee also fmi2GetReal!.\n\n\n\n\n\nfmi2GetReal!(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::AbstractArray{fmi2Real})\n\nGet the values of an array of fmi2Real variables.\n\nrites the real values of an array of variables in the given field\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fm2Real}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetReal!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2GetReal!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetReal!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetInteger","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetInteger","text":"fmi2GetInteger(c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nReturns the integer values of an array of variables\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi2Integer}: Return values is an array with the actual values of these variables.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetInteger!\n\n\n\n\n\nfmi2GetInteger(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetInteger(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetInteger!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetInteger!","text":"fmi2GetInteger!(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::AbstractArray{fmi2Integer})\n\nWrites the integer values of an array of variables in the given field\n\nfmi2GetInteger! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an AbstractArray of nvr value handels, called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi2Integer}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetInteger!.\n\n\n\n\n\nfmi2GetInteger!(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::AbstractArray{fmi2Integer})\n\nWrites the integer values of an array of variables in the given field\n\nfmi2GetInteger! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::Array{fmi2Integer}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetInteger!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2GetInteger!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetInteger!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetBoolean","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetBoolean","text":"fmi2GetBoolean(c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nGet the values of an array of fmi2Boolean variables.\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi2Boolean}: Return values is an array with the actual values of these variables.\n\nSee also fmi2GetBoolean!.\n\n\n\n\n\nfmi2GetBoolean(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetBoolean(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetBoolean!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetBoolean!","text":"fmi2GetBoolean!(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::AbstractArray{fmi2Boolean})\n\nWrites the boolean values of an array of variables in the given field\n\nfmi2GetBoolean! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an AbstractArray of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalue::AbstractArray{fmi2Boolean}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetBoolean!.\n\n\n\n\n\nfmi2GetBoolean!(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::AbstractArray{fmi2Boolean})\n\nWrites the boolean values of an array of variables in the given field\n\nfmi2GetBoolean! is only possible for arrays of values, please use an array instead of a scalar.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi2Boolean}: Argument value is an array with the actual values of these variables\n\nReturns\n\nReturn singleton instance of type Nothing, if there is no value to return (as in a C void function) or when a variable or field holds no value.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetBoolean!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2GetBoolean!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetBoolean!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetString","text":"fmi2GetString(c::FMU2Component, vr::fmi2ValueReferenceFormat)\n\nGet the values of an array of fmi2String variables.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nvalues::Array{fmi2String}:  Return values is an array with the actual values of these variables.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetString!.\n\n\n\n\n\nfmi2GetString(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetString(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetString!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetString!","text":"fmi2GetString!(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::Union{AbstractArray{Ptr{Cchar}}, AbstractArray{Ptr{UInt8}}})\n\nFunctions to get and set values of variables idetified by their valueReference\n\nThese functions are especially used to get the actual values of output variables if a model is connected with other models.\n\nArguments\n\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalue::Union{AbstractArray{Ptr{Cchar}, AbstractArray{Ptr{UInt8}}}: The value argument is an AbstractArray of values whose memory address refers to data of type Cchar or UInt8and describes a vector with the actual values of these. variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nSee also fmi2GetString!.\n\n\n\n\n\nfmi2GetString!(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::AbstractArray{fmi2String})\n\nWrites the string values of an array of variables in the given field\n\nThese functions are especially used to get the actual values of output variables if a model is connected with other models.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::AbstractArray{fmi2String}: Argument values is an AbstractArray with the actual values of these variables\n\nReturns\n\nReturn singleton instance of type Nothing, if there is no value to return (as in a C void function) or when a variable or field holds no value.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetString!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2GetString!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetString!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetReal","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetReal","text":"fmi2SetReal(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::AbstractArray{fmi2Real})\n\nFunctions to get and set values of variables idetified by their valueReference\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an AbstractArray of nvr value handels, called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fm2Real}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nSee also fmi2GetReal.\n\n\n\n\n\nfmi2SetReal(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{AbstractArray{<:Real}, <:Real})\n\nSet the values of an array of real variables\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Wildcards for how a user can pass a fmi[X]ValueReference\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{Array{<:Real}, <:Real}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2SetReal.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2SetReal(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetReal(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetInteger","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetInteger","text":"fmi2SetInteger(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::AbstractArray{fmi2Integer})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an AbstractArray of nvr value handels, called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalues::AbstractArray{fmi2Integer}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetInteger!.\n\n\n\n\n\nfmi2SetInteger(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{AbstractArray{<:Integer}, <:Integer})\n\nSet the values of an array of integer variables\n\nArguments\n\nc::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nc::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nvalues::Union{Array{<:Integer}, <:Integer}: Argument values is an array or a single value with type Integer or any subtyp\n\nReturns\n\nstatus::fmi2Status: Return status indicates the success of the function call.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2SetInteger.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2SetInteger(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetInteger(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetBoolean","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetBoolean","text":"fmi2SetBoolean(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::AbstractArray{fmi2Boolean})\n\nFunctions to get and set values of variables idetified by their valueReference\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalue::AbstractArray{fmi2Boolean}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetBoolean.\n\n\n\n\n\nfmi2SetBoolean(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{AbstractArray{Bool}, Bool})\n\nSet the values of an array of boolean variables\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{Array{Bool}, Bool}: Argument values is an array or a single value with type Boolean or any subtyp\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2GetBoolean!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2SetBoolean(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetBoolean(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetString","text":"fmi2SetString(c::FMU2Component, vr::AbstractArray{fmi2ValueReference}, nvr::Csize_t, value::Union{AbstractArray{Ptr{Cchar}}, AbstractArray{Ptr{UInt8}}})\n\nSet the values of an array of string variables\n\nFor the exact rules on which type of variables fmi2SetXXX can be called see FMISpec2.0.2 section 2.2.7 , as well as FMISpec2.0.2 section 3.2.3 in case of ModelExchange and FMISpec2.0.2 section 4.2.4 in case ofCoSimulation.\n\nArguments\n\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::AbstractArray{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variable that shall be inquired.\nnvr::Csize_t: Argument nvr defines the size of vr.\nvalue::Union{AbstractArray{Ptr{Cchar}, AbstractArray{Ptr{UInt8}}}: The value argument is an AbstractArray of values whose memory address refers to data of type Cchar or UInt8and describes a vector with the actual values of these. variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nSee also fmi2GetString!.\n\n\n\n\n\nfmi2SetString(c::FMU2Component, vr::fmi2ValueReferenceFormat, values::Union{AbstractArray{String}, String})\n\nSet the values of an array of string variables\n\nFor the exact rules on which type of variables fmi2SetXXX can be called see FMISpec2.0.2 section 2.2.7 , as well as FMISpec2.0.2 section 3.2.3 in case of ModelExchange and FMISpec2.0.2 section 4.2.4 in case of CoSimulation.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::fmi2ValueReferenceFormat: Argument vr defines the value references of the variables.\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nvalues::Union{Array{String}, String}: Argument values is an array or a single value with type String.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\nFMISpec2.0.2[p.46]: 2.2.7 Definition of Model Variables\nFMISpec2.0.2[p.46]: 3.2.3 State Machine of Calling Sequence\nFMISpec2.0.2[p.108]: 4.2.4 State Machine of Calling Sequence from Master to Slave\n\nSee also fmi2SetString.\n\n\n\n\n\nSource: FMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nFunctions to get and set values of variables idetified by their valueReference\n\n\n\n\n\nfmi2SetString(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetString(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#Getting-and-Setting-the-Complete-FMU-State","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Getting and Setting the Complete FMU State","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"The FMU has an internal state consisting of all values that are needed to continue a simulation. This internal state consists especially of the values of the continuous-time states, iteration variables, parameter values, input values, delay buffers, file identifiers, and FMU internal status information. With the functions of this section, the internal FMU state can be copied and the pointer to this copy is returned to the environment. The FMU state copy can be set as actual FMU state, in order to continue the simulation from it.","category":"page"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2GetFMUstate\nfmi2GetFMUstate!\nfmi2SetFMUstate\nfmi2FreeFMUstate!\nfmi2SerializedFMUstateSize\nfmi2SerializedFMUstateSize!\nfmi2SerializeFMUstate\nfmi2SerializeFMUstate!\nfmi2DeSerializeFMUstate\nfmi2DeSerializeFMUstate!","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetFMUstate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetFMUstate","text":"fmi2GetFMUstate(c::FMU2Component)\n\nMakes a copy of the internal FMU state and returns a pointer to this copy.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturn state is a pointer to a copy of the internal FMU state.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2GetFMUstate.\n\n\n\n\n\nfmi2GetFMUstate(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetFMUstate(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetFMUstate!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetFMUstate!","text":"fmi2GetFMUstate!(c::FMU2Component, FMUstate::Ref{fmi2FMUstate})\n\nMakes a copy of the internal FMU state and returns a pointer to this copy.\n\nArguments\n\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nFMUstate::Ref{fmi2FMUstate}:If on entry FMUstate == NULL, a new allocation is required. If FMUstate != NULL, then FMUstate points to a previously returned FMUstate that has not been modified since.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.24]: 2.1.7 Getting and Setting Variable Values\n\nSee also fmi2GetFMUstate!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.8 Getting and Setting the Complete FMU State\n\nfmi2GetFMUstate makes a copy of the internal FMU state and returns a pointer to this copy\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetFMUstate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetFMUstate","text":"fmi2SetFMUstate(c::FMU2Component, FMUstate::fmi2FMUstate)\n\nCopies the content of the previously copied FMUstate back and uses it as actual new FMU state.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nFMUstate::fmi2FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2GetFMUstate.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.8 Getting and Setting the Complete FMU State\n\nfmi2SetFMUstate copies the content of the previously copied FMUstate back and uses it as actual new FMU state.\n\n\n\n\n\nfmi2SetFMUstate(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetFMUstate(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2FreeFMUstate!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2FreeFMUstate!","text":"fmi2FreeFMUstate!(c::FMU2Component, FMUstate::Ref{fmi2FMUstate})\n\nFrees all memory and other resources allocated with the fmi2GetFMUstate call for this FMUstate.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nFMUstate::Ref{fmi2FMUstate}: Argument FMUstate is an object that safely references data of type fmi3FMUstate which is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2FreeFMUstate!.\n\n\n\n\n\nfmi2FreeFMUstate!(c::FMU2Component, state::fmi2FMUstate)\n\nFree the memory for the allocated FMU state\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nReturn singleton instance of type Nothing, if there is no value to return (as in a C void function) or when a variable or field holds no value.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2FreeFMUstate!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.8 Getting and Setting the Complete FMU State\n\nfmi2FreeFMUstate frees all memory and other resources allocated with the fmi2GetFMUstate call for this FMUstate.\n\n\n\n\n\nfmi2FreeFMUstate!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2FreeFMUstate!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2SerializedFMUstateSize","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2SerializedFMUstateSize","text":"fmi2SerializedFMUstateSize(c::FMU2Component, state::fmi2FMUstate)\n\nReturns the size of the byte vector in which the FMUstate can be stored.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nReturn size is an object that safely references a value of type Csize_t.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2SerializedFMUstateSize.\n\n\n\n\n\nfmi2SerializedFMUstateSize(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SerializedFMUstateSize(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SerializedFMUstateSize!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SerializedFMUstateSize!","text":"fmi2SerializedFMUstateSize!(c::FMU2Component, FMUstate::fmi2FMUstate, size::Ref{Csize_t})\n\nStores the size of the byte vector in the given referenced Address, in order that FMUstate can be stored in it.\n\nArgument\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nFMUstate::fmi2FMUstate: Argument FMUstate is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\nsize::Ref{Csize_t}: Argument size is an object that safely references a value of type Csize_t and defines the size of the byte vector in which the FMUstate can be stored.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2SerializedFMUstateSize!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.8 Getting and Setting the Complete FMU State\n\nfmi2SerializedFMUstateSize returns the size of the byte vector, in order that FMUstate can be stored in it.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2SerializeFMUstate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2SerializeFMUstate","text":"fmi2SerializeFMUstate(c::FMU2Component, state::fmi2FMUstate)\n\nSerializes the data referenced by the pointer FMUstate and copies this data into the byte vector serializedState of length size to be provided by the environment.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nserializedState:: Array{fmi2Byte}: Return serializedState contains the copy of the serialized data referenced by the pointer FMUstate\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2SerializeFMUstate.\n\n\n\n\n\nfmi2SerializeFMUstate(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SerializeFMUstate(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SerializeFMUstate!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SerializeFMUstate!","text":"fmi2SerializeFMUstate!(c::FMU2Component, FMUstate::fmi2FMUstate, serialzedState::AbstractArray{fmi2Byte}, size::Csize_t)\n\nSerializes the data which is referenced by pointer FMUstate and copies this data in to the byte vector serializedState of length size, that must be provided by the environment.\n\nArguments\n\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\nserialzedState::AbstractArray{fmi2Byte}: Argument serializedState contains the copy of the serialized data referenced by the pointer FMUstate.\nsize::Csize_t: Argument size defines the length of the serialized vector.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2SerializeFMUstate.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.8 Getting and Setting the Complete FMU State\n\nfmi2SerializeFMUstate serializes the data which is referenced by pointer FMUstate and copies this data in to the byte vector serializedState of length size\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2DeSerializeFMUstate","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2DeSerializeFMUstate","text":"fmi2DeSerializeFMUstate(c::FMU2Component, serializedState::AbstractArray{fmi2Byte})\n\nDeserialize the data in the serializedState fmi2Byte field\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nserializedState::Array{fmi2Byte}: Argument serializedState contains the fmi2Byte field to be deserialized.\n\nReturns\n\nReturn state is a pointer to a copy of the internal FMU state.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2DeSerializeFMUstate.\n\n\n\n\n\nfmi2DeSerializeFMUstate(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2DeSerializeFMUstate(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2DeSerializeFMUstate!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2DeSerializeFMUstate!","text":"fmi2DeSerializeFMUstate!(c::FMU2Component, serializedState::AbstractArray{fmi2Byte}, size::Csize_t, FMUstate::Ref{fmi2FMUstate})\n\nDeserializes the byte vector serializedState of length size, constructs a copy of the FMU state and stores the FMU state in the given address of the reference FMUstate, the pointer to this copy.\n\nArguments\n\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstate::fmi2FMUstate: Argument state is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\nserialzedState::AbstractArray{fmi2Byte}: Argument serializedState contains the copy of the serialized data referenced by the pointer FMUstate.\nsize::Csize_t: Argument size defines the length of the serialized vector.\nFMUstate::Ref{fmi2FMUstate}: Argument FMUstate is an object that safely references data of type fmi3FMUstate which is a pointer to a data structure in the FMU that saves the internal FMU state of the actual or a previous time instant.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.8 Getting and Setting the Complete FMU State\n\nSee also fmi2DeSerializeFMUstate!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.8 Getting and Setting the Complete FMU State\n\nfmi2DeSerializeFMUstate deserializes the byte vector serializedState of length size, constructs a copy of the FMU state and returns FMUstate, the pointer to this copy.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#Getting-Partial-Dervatives","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Getting Partial Dervatives","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"It is optionally possible to provide evaluation of partial derivatives for an FMU. For Model Exchange, this means computing the partial derivatives at a particular time instant. For Co-Simulation, this means to compute the partial derivatives at a particular communication point. One function is provided to compute directional derivatives. This function can be used to construct the desired partial derivative matrices.","category":"page"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2GetDirectionalDerivative\nfmi2GetDirectionalDerivative!\nfmi2SetRealInputDerivatives\nfmi2GetRealOutputDerivatives!\nfmi2SampleJacobian\nfmi2SampleJacobian!","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetDirectionalDerivative","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetDirectionalDerivative","text":"fmi2GetDirectionalDerivative(c::FMU2Component,\n                                  vUnknown_ref::AbstractArray{fmi2ValueReference},\n                                  vKnown_ref::AbstractArray{fmi2ValueReference},\n                                  dvKnown::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nWrapper Function call to compute the partial derivative with respect to the variables vKnown_ref.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns.The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔv_unknown = (δh / δv_known) Δv_known\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\ndvKnown::Union{AbstractArray{fmi2Real}, Nothing} = nothing: If no seed vector is passed the value nothing is used. The vector values Compute the partial derivative with respect to the given entries in vector vKnown_ref with the matching evaluate of dvKnown.  # gehört das zu den v_rest values\n\nReturns\n\ndvUnknown::Array{fmi2Real}: Return dvUnknown contains the directional derivative vector values.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.9 Getting Partial Derivatives\n\nSee also fmi2GetDirectionalDerivative!.\n\n\n\n\n\nfmi2GetDirectionalDerivative(c::FMU2Component,\n                                  vUnknown_ref::fmi2ValueReference,\n                                  vKnown_ref::fmi2ValueReference,\n                                  dvKnown::fmi2Real = 1.0)\n\nDirect function call to compute the partial derivative with respect to vKnown_ref.                           \n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns.The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔv_unknown = (δh / δv_known) Δv_known\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::fmi2ValueReference: Argument vUnknown_ref contains a value of typefmi2ValueReference which is an identifier of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::fmi2ValueReference: Argument vKnown_ref contains a value of typefmi2ValueReference which is an identifier of a variable value of the model. vKnown_ref can be equated with v_known(variable described above).\ndvKnown::fmi2Real = 1.0: If no seed value is passed the value dvKnown = 1.0 is used. Compute the partial derivative with respect to vKnown_ref with the value dvKnown = 1.0.  # gehört das zu den v_rest values\n\nReturns\n\ndvUnknown::Array{fmi2Real}: Return dvUnknown contains the directional derivative vector values.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.9 Getting Partial Derivatives\n\nSee also fmi2GetDirectionalDerivative!.\n\n\n\n\n\nfmi2GetDirectionalDerivative(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetDirectionalDerivative(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetDirectionalDerivative!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetDirectionalDerivative!","text":"fmi2GetDirectionalDerivative!(c::FMU2Component,\n                                   vUnknown_ref::AbstractArray{fmi2ValueReference},\n                                   nUnknown::Csize_t,\n                                   vKnown_ref::AbstractArray{fmi2ValueReference},\n                                   nKnown::Csize_t,\n                                   dvKnown::AbstractArray{fmi2Real},\n                                   dvUnknown::AbstractArray{fmi2Real})\n\nWrapper Function call to compute the partial derivative with respect to the variables vKnown_ref.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔvunknown = (δh / δvknown) Δv_known\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstracArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nnUnknown::Csize_t: Length of the Unknown Array.\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\nnKnown::Csize_t: Length of the Known Array.\ndvKnown::AbstractArray{fmi2Real}:The vector values Compute the partial derivative with respect to the given entries in vector vKnown_ref with the matching evaluate of dvKnown.\ndvUnknown::AbstractArray{fmi2Real}: Stores the directional derivative vector values.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.9 Getting Partial Derivatives\n\nSee also fmi2GetDirectionalDerivative!.\n\n\n\n\n\nfmiGetDirectionalDerivative!(c::FMU2Component,\n                                  vUnknown_ref::AbstractArray{fmi2ValueReference},\n                                  vKnown_ref::AbstractArray{fmi2ValueReference},\n                                  dvUnknown::AbstractArray,\n                                  dvKnown::Union{Array{fmi2Real}, Nothing} = nothing)\n\nWrapper Function call to compute the partial derivative with respect to the variables vKnown_ref.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns.The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔv_unknown = (δh / δv_known) Δv_known\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstracArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\ndvUnknown::AbstractArray{fmi2Real}: Stores the directional derivative vector values.\ndvKnown::Union{AbstractArray{fmi2Real}, Nothing} = nothing: If no seed vector is passed the value nothing is used. The vector values Compute the partial derivative with respect to the given entries in vector vKnown_ref with the matching evaluate of dvKnown.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\nFMISpec2.0.2[p.16]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.25]: 2.1.9 Getting Partial Derivatives\n\nSee also fmi2GetDirectionalDerivative!.\n\n\n\n\n\nSource: FMISpec2.0.2[p.26]: 2.1.9 Getting Partial Derivatives\n\nThis function computes the directional derivatives of an FMU.\n\nΔvUnknown = ∂h / ∂vKnown ⋅ ΔvKnown\n\n\n\n\n\nfmi2GetDirectionalDerivative!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetDirectionalDerivative!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2SetRealInputDerivatives","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2SetRealInputDerivatives","text":"fmi2SetRealInputDerivatives(c::FMU2Component,\n                                vr::AbstractArray{fmi2ValueReference},\n                                nvr::Csize_t,\n                                order::AbstractArray{fmi2Integer}, \n                                value::AbstractArray{fmi2Real})\n\nSets the n-th time derivative of real input variables.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that t define the variables whose derivatives shall be set.\nnvr::Csize_t: Argument nvr defines the size of vr.\norder::AbstractArray{fmi2Integer}: Argument order is an AbstractArray of fmi2Integer values witch specifys the corresponding order of derivative of the real input variable.\nvalues::AbstractArray{fmi2Real}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\nSee also fmi2SetRealInputDerivatives.\n\n\n\n\n\nfmi2SetRealInputDerivatives(c::FMU2Component, \n                                vr::AbstractArray{fmi2ValueReference}, \n                                order::AbstractArray{fmi2Integer}, \n                                values::AbstractArray{fmi2Real})\n\nSets the n-th time derivative of real input variables.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that define the variables whose derivatives shall be set.\norder::AbstractArray{fmi2Integer}: Argument order is an AbstractArray of fmi2Integer values witch specifys the corresponding order of derivative of the real input variable.\nvalues::AbstractArray{fmi2Real}: Argument values is an AbstractArray with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\nSee also fmi2SetRealInputDerivatives.\n\n\n\n\n\nSource: FMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\nSets the n-th time derivative of real input variables. vr defines the value references of the variables the array order specifies the corresponding order of derivation of the variables\n\n\n\n\n\nfmi2SetRealInputDerivatives(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2SetRealInputDerivatives(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2GetRealOutputDerivatives!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2GetRealOutputDerivatives!","text":"fmi2GetRealOutputDerivatives!(c::FMU2Component,  \n                                vr::AbstractArray{fmi2ValueReference}, \n                                nvr::Csize_t, order::AbstractArray{fmi2Integer}, \n                                value::AbstractArray{fmi2Real})\n\nSets the n-th time derivative of real input variables.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvr::Array{fmi2ValueReference}: Argument vr is an array of nvr value handels called \"ValueReference\" that t define the variables whose derivatives shall be set.\nnvr::Csize_t: Argument nvr defines the size of vr.\norder::Array{fmi2Integer}: Argument order is an array of fmi2Integer values witch specifys the corresponding order of derivative of the real input variable.\nvalues::Array{fmi2Real}: Argument values is an array with the actual values of these variables.\n\nReturns\n\nstatus::fmi2Status: Return status is an enumeration of type fmi2Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi2OK: all well\nfmi2Warning: things are not quite right, but the computation can continue\nfmi2Discard: if the slave computed successfully only a subinterval of the communication step\nfmi2Error: the communication step could not be carried out at all\nfmi2Fatal: if an error occurred which corrupted the FMU irreparably\nfmi2Pending: this status is returned if the slave executes the function asynchronously\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\nFMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\n\n\n\n\nSource: FMISpec2.0.2[p.104]: 4.2.1 Transfer of Input / Output Values and Parameters\n\nRetrieves the n-th derivative of output values. vr defines the value references of the variables the array order specifies the corresponding order of derivation of the variables\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2SampleJacobian","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2SampleJacobian","text":"fmi2SampleJacobian(c::FMU2Component,\n                        vUnknown_ref::Union{AbstractArray{fmi2ValueReference}, Symbol},\n                        vKnown_ref::AbstractArray{fmi2ValueReference},\n                        steps::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nThis function samples the directional derivative by manipulating corresponding values (central differences).\n\nComputes the directional derivatives of an FMU. An FMU has different modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes.\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔvunknown = (δh / δvknown) Δv_known\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\nsteps::Union{AbstractArray{fmi2Real}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\ndvUnkonwn::Array{fmi2Real}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(see function fmi2GetDirectionalDerivative!).\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\nSee also fmi2GetDirectionalDerivative!.\n\n\n\n\n\nfmi2SampleJacobian(c::FMU2Component,\n                        vUnknown_ref::Array{fmi2ValueReference},\n                        vKnown_ref::Array{fmi2ValueReference},\n                        steps::Array{fmi2Real} = ones(fmi2Real, length(vKnown_ref)).*1e-5)\n\nThis function samples the directional derivative by manipulating corresponding values (central differences).\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::Array{fmi2ValueReference}:  Argument vUnKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref is the Array of the vector values of Real input variables of function h that changes its value in the actual Mode.\nvKnown_ref::Array{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref is the Array of the vector values of Real input variables of function h that changes its value in the actual Mode.\nsteps::Array{fmi2Real} = ones(fmi2Real, length(vKnown_ref)).*1e-5: Predefined step size vector steps, where all entries have the value 1e-5.\n\nReturns\n\ndvUnknown::Arrya{fmi2Real}: stores the samples of the directional derivative\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2SampleJacobian!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2SampleJacobian!","text":"function fmi2SampleJacobian!(mtx::Matrix{<:Real},\n                                c::FMU2Component,\n                                vUnknown_ref::Union{AbstractArray{fmi2ValueReference}, Symbol},\n                                vKnown_ref::Union{AbstractArray{fmi2ValueReference}, Symbol},\n                                steps::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nThis function samples the directional derivative by manipulating corresponding values (central differences) and saves in-place.\n\nComputes the directional derivatives of an FMU. An FMU has different Modes and in every Mode an FMU might be described by different equations and different unknowns. The precise definitions are given in the mathematical descriptions of Model Exchange (section 3.1) and Co-Simulation (section 4.1). In every Mode, the general form of the FMU equations are: 𝐯unknown = 𝐡(𝐯known, 𝐯_rest)\n\nv_unknown: vector of unknown Real variables computed in the actual Mode:\nInitialization Mode: unkowns kisted under <ModelStructure><InitialUnknowns> that have type Real.\nContinuous-Time Mode (ModelExchange): The continuous-time outputs and state derivatives. (= the variables listed under <ModelStructure><Outputs> with type Real and variability = continuous and the variables listed as state derivatives under <ModelStructure><Derivatives>).\nEvent Mode (ModelExchange): The same variables as in the Continuous-Time Mode and additionally variables under <ModelStructure><Outputs> with type Real and variability = discrete.\nStep Mode (CoSimulation):  The variables listed under <ModelStructure><Outputs> with type Real and variability = continuous or discrete. If <ModelStructure><Derivatives> is present, also the variables listed here as state derivatives.\nv_known: Real input variables of function h that changes its value in the actual Mode.\nv_rest:Set of input variables of function h that either changes its value in the actual Mode but are non-Real variables, or do not change their values in this Mode, but change their values in other Modes\n\nComputes a linear combination of the partial derivatives of h with respect to the selected input variables 𝐯_known:\n\nΔvunknown = (δh / δvknown) Δv_known\n\nArguments\n\nmtx::Matrix{<:Real}:Output matrix to store the Jacobian. Its dimensions must be compatible with the number of unknown and known value references.\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model. vUnknown_ref can be equated with v_unknown(variable described above).\nvKnown_ref::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref can be equated with v_known(variable described above).\ndvUnknown::AbstractArray{fmi2Real}: Stores the directional derivative vector values.\nsteps::Union{AbstractArray{fmi2Real}, Nothing} = nothing): Step size to be used for numerical differentiation. If nothing, a default value will be chosen automatically.\n\nReturns\n\nnothing\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\nSee also fmi2GetDirectionalDerivative!.\n\n\n\n\n\nfmi2SampleJacobian!(c::FMU2Component,\n                        vUnknown_ref::Array{fmi2ValueReference},\n                        vKnown_ref::Array{fmi2ValueReference},\n                        dvUnknown::AbstractArray,\n                        steps::Array{fmi2Real} = ones(fmi2Real, length(vKnown_ref)).*1e-5)\n\nThis function samples the directional derivative by manipulating corresponding values (central differences) and saves in-place.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvUnknown_ref::Array{fmi2ValueReference}:  Argument vUnKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref is the Array of the vector values of Real input variables of function h that changes its value in the actual Mode.\nvKnown_ref::Array{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.vKnown_ref is the Array of the vector values of Real input variables of function h that changes its value in the actual Mode.\ndvUnknown::AbstractArray: stores the samples of the directional derivative\nsteps::Array{fmi2Real} = ones(fmi2Real, length(vKnown_ref)).*1e-5: current time stepsize\n\nReturns\n\nnothing\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#Conversion-functions","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"Conversion functions","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2StringToValueReference\nfmi2ValueReferenceToString\nfmi2StringToCausality\nfmi2CausalityToString\nfmi2StringToVariability\nfmi2VariabilityToString\n\nfmi2StatusToString\nfmi2StringToDependencyKind\nfmi2DependencyKindToString\nfmi2StringToInitial\nfmi2InitialToString","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2StringToValueReference","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2StringToValueReference","text":"fmi2StringToValueReference(md::fmi2ModelDescription, names::AbstractArray{String})\n\nReturns an array of ValueReferences coresponding to the variable names.\n\nArguments\n\nmd::fmi2ModelDescription: Argument md stores all static information related to an FMU. Especially, the FMU variables and their attributes such as name, unit, default initial value, etc..\nnames::AbstractArray{String}: Argument names contains a list of Strings. For each string (\"variable name\"), the corresponding value reference is searched in the given modelDescription.\n\nReturns\n\nvr:Array{fmi2ValueReference}: Return vr is an array of ValueReference coresponding to the variable names.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2StringToValueReference.\n\n\n\n\n\nfmi2StringToValueReference(md::fmi2ModelDescription, name::String)\n\nReturns the ValueReference or an array of ValueReferences coresponding to the variable names.\n\nArguments\n\nmd::fmi2ModelDescription: Argument md stores all static information related to an FMU. Especially, the FMU variables and their attributes such as name, unit, default initial value, etc..\nname::String: Argument names contains a String or a list of Strings. For each string (\"variable name\"), the corresponding value reference is searched in the given modelDescription.\n\nReturns\n\nreference::md.stringValueReferences: Return references is an array of ValueReference coresponding to the variable name.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2StringToValueReference\n\n\n\n\n\nfmi2StringToValueReference(fmu::FMU2, name::Union{String, AbstractArray{String}})\n\nReturns the ValueReference or an array of ValueReferences coresponding to the variable names.\n\nArguments\n\nfmu::FMU2:  Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nname::Union{String, AbstractArray{String}}: Argument names contains a Strings or AbstractArray{String}. For that, the corresponding value reference is searched in the given modelDescription.\n\nReturns\n\nFor input parameter name::Sting:\n\nreference::md.stringValueReferences: Return references is an array of ValueReference coresponding to the variable name.\n\nFor input parameter name::AbstractArray{String}\n\nar::Array{fmi2ScalarVariable}: Return ar is an array of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2StringToValueReference\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2ValueReferenceToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2ValueReferenceToString","text":"fmi2ValueReferenceToString(md::fmi2ModelDescription, reference::fmi2ValueReference)\n\nArguments\n\nmd::fmi2ModelDescription: Argument md stores all static information related to an FMU. Especially, the FMU variables and their attributes such as name, unit, default initial value, etc..\nreference::fmi2ValueReference: The argument references is a variable of the type ValueReference.\n\nReturn\n\nmd.stringValueReferences::Dict{String, fmi2ValueReference}: Returns a dictionary md.stringValueReferences that constructs a hash table with keys of type String and values of type fmi2ValueReference.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\nfmi2ValueReferenceToString(md::fmi2ModelDescription, reference::Int64)\n\nArguments\n\nmd::fmi2ModelDescription: Argument md stores all static information related to an FMU. Especially, the FMU variables and their attributes such as name, unit, default initial value, etc..\nreference::Int64: Argument references is a variable of the type Int64.\n\nReturn\n\nmd.stringValueReferences::Dict{String, fmi2ValueReference}: Returns a dictionary md.stringValueReferences that constructs a hash table with keys of type String and values of type fmi2ValueReference.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\nfmi2ValueReferenceToString(fmu::FMU2, reference::Union{fmi2ValueReference, Int64})\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nreference::Union{fmi2ValueReference, Int64}: Argument references of the type fmi2ValueReference or Int64.\n\nReturn\n\nmd.stringValueReferences::Dict{String, fmi2ValueReference}: Returns a dictionary md.stringValueReferences that constructs a hash table with keys of type String and values of type fmi2ValueReference.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2StringToCausality","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2StringToCausality","text":"fmi2StringToCausality(s::AbstractString)\n\nConverts s (\"parameter\", \"calculatedParameter\", \"input\", \"output\", \"local\", \"independent\") to the corresponding fmi2Causality.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2CausalityToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2CausalityToString","text":"fmi2CausalityToString(c::fmi2Causality)\n\nConverts fmi2Causality c to the corresponding String (\"parameter\", \"calculatedParameter\", \"input\", \"output\", \"local\", \"independent\").\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2StringToVariability","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2StringToVariability","text":"fmi2StringToVariability(s::AbstractString)\n\nConverts s (\"constant\", \"fixed\", \"tunable\", \"discrete\", \"continuous\") to the corresponding fmi2Variability.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2VariabilityToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2VariabilityToString","text":"fmi2VariabilityToString(c::fmi2Variability)\n\nConverts fmi2Variability c to the corresponding String (\"constant\", \"fixed\", \"tunable\", \"discrete\", \"continuous\").\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2StatusToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2StatusToString","text":"fmi2StatusToString(status::Union{fmi2Status, Integer})\n\nConverts fmi2Status status into a String (\"OK\", \"Warning\", \"Discard\", \"Error\", \"Fatal\", \"Pending\").\n\n\n\n\n\nfmi2StringToStatus(s)\n\nConverts a String s to fmi2Status.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2StringToDependencyKind","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2StringToDependencyKind","text":"fmi2StringToDependencyKind(s::AbstractString)\n\nConverts s (\"dependent\", \"constant\", \"fixed\", \"tunable\", \"discrete\") to the corresponding fmi2DependencyKind\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2DependencyKindToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2DependencyKindToString","text":"fmi2DependencyKindToString(c::fmi2DependencyKind)\n\nConverts fmi2DependencyKind c to the corresponding String (\"dependent\", \"constant\", \"fixed\", \"tunable\", \"discrete\")\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2StringToInitial","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2StringToInitial","text":"fmi2StringToInitial(s::AbstractString)\n\nConverts s (\"approx\", \"exact\", \"calculated\") to the corresponding fmi2Initial.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.fmi2InitialToString","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.fmi2InitialToString","text":"fmi2InitialToString(c::fmi2Initial)\n\nConverts fmi2Initial c to the corresponding String (\"approx\", \"exact\", \"calculated\").\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#External/Additional-functions","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"External/Additional functions","text":"","category":"section"},{"location":"fmi2_lowlevel_library_functions/","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMI Common Concepts for Model Exchange and Co-Simulation","text":"fmi2GetSolutionDerivative\nfmi2GetSolutionState\nfmi2GetSolutionValue\nfmi2GetSolutionTime\nfmi2ModelVariablesForValueReference\ngetCurrentComponent\nhasCurrentComponent\nfmi2GetJacobian\nfmi2GetJacobian!\nfmi2GetFullJacobian\nfmi2GetFullJacobian!\nfmi2GetStartValue\nfmi2GetUnit\nfmi2GetDeclaredType\nfmi2GetInitial\nfmi2GetSimpleTypeAttributeStruct","category":"page"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetSolutionDerivative","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetSolutionDerivative","text":"fmi2GetSolutionDerivative(solution::FMU2Solution, vr::fmi2ValueReferenceFormat; isIndex::Bool=false)\n\nReturns the Solution values.\n\nArguments\n\nsolution::FMU2Solution: Struct contains information about the solution value, success, state and  events of a specific FMU.\nvr::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nisIndex::Bool=false: Argument isIndex exists to check if vr ist the spezific solution element (\"index\") that equals the given fmi2ValueReferenceFormat\n\nReturn\n\nIf the length of the given referencees equals 1, each element myt in the collection solution.states.t is selecting the derivative of the solution states represented by indices[1] in respect to time, at time myt and returns its it.\n\nThus, the collect() function is taking the generator expression and returning an array of the selected derivatives. \n\nIf more than one reference is given, the same process takes place as before. The difference is that now more than one indice is accessed.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetSolutionState","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetSolutionState","text":"fmi2GetSolutionState(solution::FMU2Solution, vr::fmi2ValueReferenceFormat; isIndex::Bool=false)\n\nReturns the Solution state.\n\nArguments\n\nsolution::FMU2Solution: Struct contains information about the solution value, success, state and  events of a specific FMU.\nvr::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nisIndex::Bool=false: Argument isIndex exists to check if vr ist the spezific solution element (\"index\") that equals the given fmi2ValueReferenceFormat\n\nReturn\n\nIf he length of the given referencees equals 1, each element u in the collection solution.states.u, it is selecting the element at the index represented by indices[1] and returns it.\n\nThus, the collect() function is taking the generator expression and returning an array of the selected elements. \n\nIf more than one reference is given, the same process takes place as before. The difference is that now more than one indice is accessed.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetSolutionValue","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetSolutionValue","text":"fmi2GetSolutionValue(solution::FMU2Solution, vr::fmi2ValueReferenceFormat; isIndex::Bool=false)\n\nReturns the Solution values.\n\nArguments\n\nsolution::FMU2Solution: Struct contains information about the solution value, success, state and  events of a specific FMU.\nvr::fmi2ValueReferenceFormat: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nisIndex::Bool=false: Argument isIndex exists to check if vr ist the spezific solution element (\"index\") that equals the given fmi2ValueReferenceFormat\n\nReturn\n\nIf he length of the given referencees equals 1, each element u in the collection solution.values.saveval is selecting the element at the index represented by indices[1] and returns it.\n\nThus, the collect() function is taking the generator expression and returning an array of the selected elements. \n\nIf more than one reference is given, the same process takes place as before. The difference is that now more than one indice is accessed.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetSolutionTime","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetSolutionTime","text":"fmi2GetSolutionTime(solution::FMU2Solution)\n\nReturns the Solution time.\n\nArguments\n\nsolution::FMU2Solution: Struct contains information about the solution value, success, state and  events of a specific FMU.\n\nReturn\n\nsolution.states.t::tType: solution.state is a struct ODESolution with attribute t. t is the time points corresponding to the saved values of the ODE solution.\nsolution.values.t::tType: solution.value is a struct ODESolution with attribute t.t the time points corresponding to the saved values of the ODE solution.\nIf no solution time is  found nothing is returned.\n\n#Source\n\nusing OrdinaryDiffEq: ODESolution  (SciML/SciMLBase.jl)\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.2 Platform Dependent Definitions (fmi2TypesPlatform.h)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2ModelVariablesForValueReference","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2ModelVariablesForValueReference","text":"fmi2ModelVariablesForValueReference(md::fmi2ModelDescription, vr::fmi2ValueReference)\n\nReturns the model variable(s) fitting the value reference.\n\nArguments\n\nmd::fmi2ModelDescription: Argument md stores all static information related to an FMU. Especially, the FMU variables and their attributes such as name, unit, default initial value, etc..\nvr::fmi2ValueReference: Argument vr contains a value of typefmi2ValueReference which are identifiers of a variable value of the model.\n\nReturns\n\nar::Array{fmi2ScalarVariable}: Return ar is an array of fmi2ScalarVariable containing the modelVariables with the identical fmi2ValueReference to the input variable vr.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2ModelVariablesForValueReference.\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.getCurrentComponent","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.getCurrentComponent","text":"ToDo: Doc String\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMICore.hasCurrentComponent","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMICore.hasCurrentComponent","text":"ToDo: Doc String\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetJacobian","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetJacobian","text":"fmi2GetJacobian(comp::FMU2Component,\n                    rdx::AbstractArray{fmi2ValueReference},\n                    rx::AbstractArray{fmi2ValueReference};\n                    steps::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nBuilds the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function returns the jacobian ∂rdx / ∂rx.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. For optimization, if the FMU's model description has the optional entry 'dependencies', only dependent variables are sampled/retrieved. This drastically boosts performance for systems with large variable count (like CFD).\n\nArguments\n\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nrdx::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi2Real}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nmat::Array{fmi2Real}: Return mat contains the jacobian ∂rdx / ∂rx.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetJacobian(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetJacobian(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetJacobian!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetJacobian!","text":"fmi2GetJacobian!(jac::AbstractMatrix{fmi2Real},\n                      comp::FMU2Component,\n                      rdx::AbstractArray{fmi2ValueReference},\n                      rx::AbstractArray{fmi2ValueReference};\n                      steps::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nFills the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function stores the jacobian ∂rdx / ∂rx in an AbstractMatrix jac.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. For optimization, if the FMU's model description has the optional entry 'dependencies', only dependent variables are sampled/retrieved. This drastically boosts performance for systems with large variable count (like CFD).\n\nArguments\n\njac::AbstractMatrix{fmi2Real}: A matrix that will hold the computed Jacobian matrix.\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nrdx::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi2Real}, Nothing} = nothing): Step size to be used for numerical differentiation. If nothing, a default value will be chosen automatically.\n\nReturns\n\nnothing\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetJacobian!(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetJacobian!(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetFullJacobian","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetFullJacobian","text":"fmi2GetFullJacobian(comp::FMU2Component,\n                        rdx::AbstractArray{fmi2ValueReference},\n                        rx::AbstractArray{fmi2ValueReference};\n                        steps::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nBuilds the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function returns the jacobian ∂rdx / ∂rx.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. No performance optimization, for an optimized version use fmi2GetJacobian.\n\nArguments\n\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nrdx::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi2Real}, Nothing} = nothing): If sampling is used, sampling step size can be set (for each direction individually) using optional argument steps.\n\nReturns\n\nmat::Array{fmi2Real}: Return mat contains the jacobian ∂rdx / ∂rx.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\nSee also fmi2GetFullJacobian!\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetFullJacobian!","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetFullJacobian!","text":"fmi2GetFullJacobian!(jac::AbstractMatrix{fmi2Real},\n                          comp::FMU2Component,\n                          rdx::AbstractArray{fmi2ValueReference},\n                          rx::AbstractArray{fmi2ValueReference};\n                          steps::Union{AbstractArray{fmi2Real}, Nothing} = nothing)\n\nFills the jacobian over the FMU fmu for FMU value references rdx and rx, so that the function returns the jacobian ∂rdx / ∂rx.\n\nIf FMI built-in directional derivatives are supported, they are used. As fallback, directional derivatives will be sampled with central differences. No performance optimization, for an optimized version use fmi2GetJacobian!.\n\nArguments\n\njac::AbstractMatrix{fmi2Real}: Stores the the jacobian ∂rdx / ∂rx.\ncomp::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nrdx::AbstractArray{fmi2ValueReference}: Argument vUnknown_ref contains values of typefmi2ValueReference which are identifiers of a variable value of the model.\nrx::AbstractArray{fmi2ValueReference}: Argument vKnown_ref contains values of type fmi2ValueReference which are identifiers of a variable value of the model.\n\nKeywords\n\nsteps::Union{AbstractArray{fmi2Real}, Nothing} = nothing): Step size to be used for numerical differentiation.\n\nIf nothing, a default value will be chosen automatically.\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetStartValue","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetStartValue","text":"fmi2GetStartValue(md::fmi2ModelDescription, vrs::fmi2ValueReferenceFormat = md.valueReferences)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\nvrs::fmi2ValueReferenceFormat = md.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nstarts::Array{fmi2ValueReferenceFormat}: start/default value for a given value reference\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetStartValue(fmu::FMU2, vrs::fmi2ValueReferenceFormat = fmu.modelDescription.valueReferences)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nvrs::fmi2ValueReferenceFormat = fmu.modelDescription.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nstarts::fmi2ValueReferenceFormat: start/default value for a given value reference\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetStartValue(c::FMU2Component, vrs::fmi2ValueReferenceFormat = c.fmu.modelDescription.valueReferences)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nc::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nvrs::fmi2ValueReferenceFormat = c.fmu.modelDescription.valueReferences: wildcards for how a user can pass a fmi[X]ValueReference (default = md.valueReferences)\n\nMore detailed: fmi2ValueReferenceFormat = Union{Nothing, String, Array{String,1}, fmi2ValueReference, Array{fmi2ValueReference,1}, Int64, Array{Int64,1}, Symbol}\n\nReturns\n\nstarts::fmi2ValueReferenceFormat: start/default value for a given value reference\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetStartValue(mv::fmi2ScalarVariable)\n\nReturns the start/default value for a given value reference.\n\nArguments\n\nmv::fmi2ScalarVariable: The “ModelVariables” element consists of an ordered set of “ScalarVariable” elements. A “ScalarVariable” represents a variable of primitive type, like a real or integer variable.\n\nReturns\n\nmv._Real.start: start/default value for a given ScalarVariable. In this case representing a variable of primitive type Real.\nmv._Integer.start: start/default value for a given ScalarVariable. In this case representing a variable of primitive type Integer.\nmv._Boolean.start: start/default value for a given ScalarVariable. In this case representing a variable of primitive type Boolean.\nmv._String.start: start/default value for a given ScalarVariable. In this case representing a variable of primitive type String.\nmv._Enumeration.start: start/default value for a given ScalarVariable. In this case representing a variable of primitive type Enumeration.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetStartValue(fmu::FMU2, args...; kwargs...)\n\nWrapper for fmi2GetStartValue(c::FMU2Component, args...; kwargs...) without a provided FMU2Component.  (Component c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetUnit","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetUnit","text":"fmi2GetUnit(mv::fmi2ScalarVariable)\n\nReturns the unit entry (a string) of the corresponding model variable.\n\nArguments\n\nfmi2GetStartValue(mv::fmi2ScalarVariable): The “ModelVariables” element consists of an ordered set of “ScalarVariable” elements. A “ScalarVariable” represents a variable of primitive type, like a real or integer variable.\n\nReturns\n\nmv.Real.unit: Returns the unit entry of the corresponding ScalarVariable representing a variable of the primitive type Real. Otherwise nothing is returned.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\nfmi2GetUnit(st::fmi2SimpleType)\n\nReturns the unit entry (a string) of the corresponding simple type st if it has the attribute Real and nothing otherwise.\n\nSource\n\nFMISpec2.0.3 Link: https://fmi-standard.org/\nFMISpec2.0.3: 2.2.3 Definition of Types (TypeDefinitions)\n\n\n\n\n\nfmi2GetUnit(md::fmi2ModelDescription, mv::fmi2ScalarVariable)\n\nReturns the unit of the corresponding model variable mv as a fmi2Unit if it is defined in md.unitDefinitions.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\nmv::fmi2ScalarVariable: The “ModelVariables” element consists of an ordered set of “ScalarVariable” elements. A “ScalarVariable” represents a variable of primitive type, like a real or integer variable.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetDeclaredType","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetDeclaredType","text":"fmi2GetDeclaredType(md::fmi2ModelDescription, mv::fmi2ScalarVariable)\n\nReturns the fmi2SimpleType of the corresponding model variable mv as defined in md.typeDefinitions. If mv does not have a declared type, return nothing. If mv has a declared type, but it is not found, issue a warning and return nothing.\n\nArguments\n\nmd::fmi2ModelDescription: Struct which provides the static information of ModelVariables.\nmv::fmi2ScalarVariable: The “ModelVariables” element consists of an ordered set of “ScalarVariable” elements. A “ScalarVariable” represents a variable of primitive type, like a real or integer variable.\n\nSource\n\nFMISpec2.0.3 Link: https://fmi-standard.org/\nFMISpec2.0.3: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetInitial","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetInitial","text":"fmi2GetInitial(mv::fmi2ScalarVariable)\n\nReturns the inital entry of the corresponding model variable.\n\nArguments\n\nfmi2GetStartValue(mv::fmi2ScalarVariable): The “ModelVariables” element consists of an ordered set of “ScalarVariable” elements. A “ScalarVariable” represents a variable of primitive type, like a real or integer variable.\n\nReturns\n\nmv.Real.unit: Returns the inital entry of the corresponding ScalarVariable representing a variable of the primitive type Real. Otherwise nothing is returned.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2: 2.2.7  Definition of Model Variables (ModelVariables)\n\n\n\n\n\n","category":"function"},{"location":"fmi2_lowlevel_library_functions/#FMIImport.fmi2GetSimpleTypeAttributeStruct","page":"FMI Common Concepts for Model Exchange and Co-Simulation","title":"FMIImport.fmi2GetSimpleTypeAttributeStruct","text":"fmi2GetSimpleTypeAttributeStruct(st::fmi2SimpleType)\n\nReturns the attribute structure for the simple type st. Depending on definition, this is either st.Real, st.Integer, st.String, st.Boolean or st.Enumeration.\n\nArguments\n\nst::fmi2SimpleType: Struct which provides the information on custom SimpleTypes.\n\nSource\n\nFMISpec2.0.3 Link: https://fmi-standard.org/\nFMISpec2.0.3[p.40]: 2.2.3 Definition of Types (TypeDefinitions)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_CS_functions/#FMI-for-Co-Simulation","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"","category":"section"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"This chapter defines the Functional Mock-up Interface (FMI) for the coupling of two or more simulation models in a Co-Simulation environment (FMI for Co-Simulation). Co-Simulation is a rather general approach to the simulation of coupled technical systems and coupled physical phenomena in engineering with focus on instationary (time-dependent) problems.","category":"page"},{"location":"fmi3_lowlevel_CS_functions/#Transfer-of-Input-/-Output-Values-and-Parameters","page":"FMI for Co-Simulation","title":"Transfer of Input / Output Values and Parameters","text":"","category":"section"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"In order to enable the slave to interpolate the continuous real inputs between communication steps, the derivatives of the inputs with respect to time can be provided. Also, higher derivatives can be set to allow higher order interpolation.","category":"page"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"fmi3CallbackIntermediateUpdate","category":"page"},{"location":"fmi3_lowlevel_CS_functions/#FMIImport.fmi3CallbackIntermediateUpdate","page":"FMI for Co-Simulation","title":"FMIImport.fmi3CallbackIntermediateUpdate","text":"fmi3CallbackIntermediateUpdate(instanceEnvironment::Ptr{Cvoid},\n    intermediateUpdateTime::fmi3Float64,\n    intermediateVariableSetRequested::fmi3Boolean,\n    intermediateVariableGetAllowed::fmi3Boolean,\n    intermediateStepFinished::fmi3Boolean,\n    canReturnEarly::fmi3Boolean,\n    earlyReturnRequested::Ptr{fmi3Boolean},\n    earlyReturnTime::Ptr{fmi3Float64})\n\nWhen a Co-Simulation FMU provides values for its output variables at intermediate points between two consecutive communication points, and is able to receive new values for input variables at these intermediate points, the Intermediate Update Callback function is called. This is typically required when the FMU uses a numerical solver to integrate the FMU's internal state between communication points in fmi3DoStep.  The callback function switches the FMU from Step Mode (see 4.2.1.) in the Intermediate Update Mode (see 4.2.2.) and returns to Step Mode afterwards. If the ModelDescription has the \"providesIntermediateUpdate\" flag, the Intermediate update callback function is called. That flag is ignored in ModelExchange and ScheduledExecution.\n\nArguments\n\ninstanceEnvironment::Ptr{FMU3InstanceEnvironment}: is the instance name of the model that calls this function. \nintermediateUpdateTime::fmi3Float64: is the internal value of the independent variable [typically simulation time] of the FMU at which the callback has been called for intermediate and final steps. If an event happens or an output Clock ticks, intermediateUpdateTime is the time of event or output Clock tick. In Co-Simulation, intermediateUpdateTime is restricted by the arguments to fmi3DoStep as follows:   currentCommunicationPoint ≤ intermediateUpdateTime ≤ (currentCommunicationPoint + communicationStepSize).   The FMU must not call the callback function fmi3CallbackIntermediateUpdate with an intermediateUpdateTime that is smaller than the intermediateUpdateTime given in a previous call of fmi3CallbackIntermediateUpdate with intermediateStepFinished == fmi3True.\nintermediateVariableSetRequested::fmi3Boolean: If intermediateVariableSetRequested == fmi3True, the co-simulation algorithm may provide intermediate values for continuous input variables with intermediateUpdate = true by calling fmi3Set{VariableType}. The set of variables for which the co-simulation algorithm will provide intermediate values is declared through the requiredIntermediateVariables argument to fmi3InstantiateXXX. If a co-simulation algorithm does not provide a new value for any of the variables contained in the set it registered, the last value set remains.\nintermediateVariableGetAllowed::fmi3Boolean: If intermediateVariableGetAllowed == fmi3True, the co-simulation algorithm may collect intermediate output variables by calling fmi3Get{VariableType} for variables with intermediateUpdate = true. The set of variables for which the co-simulation algorithm can get values is supplied through the requiredIntermediateVariables argument to fmi3InstantiateXXX.\nintermediateStepFinished::fmi3Boolean: If intermediateStepFinished == fmi3False, the intermediate outputs of the FMU that the co-simulation algorithm inquires with fmi3Get{VariableType} resulting from tentative internal solver states and may still change for the same intermediateUpdateTime [e.g., if the solver deems the tentative state to cause a too high approximation error, it may go back in time and try to re-estimate the state using smaller internal time steps].                             If intermediateStepFinished == fmi3True, intermediate outputs inquired by the co-simulation algorithm with fmi3Get{VariableType} correspond to accepted internal solver step.\ncanReturnEarly::fmi3Boolean: When canReturnEarly == fmi3True the FMU signals to the co-simulation algorithm its ability to return early from the current fmi3DoStep.\nearlyReturnRequested::Ptr{fmi3Boolean}: If and only if canReturnEarly == fmi3True, the co-simulation algorithm may request the FMU to return early from fmi3DoStep by setting earlyReturnRequested == fmi3True.\nearlyReturnTime::Ptr{fmi3Float64}: is used to signal the FMU at which time to return early from the current fmi3DoStep, if the return value of earlyReturnRequested == fmi3True. If the earlyReturnTime is greater than the last signaled intermediateUpdateTime, the FMU may integrate up to the time instant earlyReturnTime.\n\nReturns\n\nnothing\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 4.2.2. State: Intermediate Update Mode\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_CS_functions/#Computation","page":"FMI for Co-Simulation","title":"Computation","text":"","category":"section"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"The computation of time steps is controlled by the following function.","category":"page"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"fmi3EnterStepMode\nfmi3DoStep!","category":"page"},{"location":"fmi3_lowlevel_CS_functions/#FMICore.fmi3EnterStepMode","page":"FMI for Co-Simulation","title":"FMICore.fmi3EnterStepMode","text":"fmi3EnterStepMode(c::FMU3Instance; soft::Bool=false)\n\nThis function must be called to change from Event Mode into Step Mode in Co-Simulation (see 4.2.).\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\n\nKeywords\n\nsoft::Bool=false: If the Keyword soft = true the fmi3Teminate needs to be called in state  fmi3InstanceStateContinuousTimeMode or fmi3InstanceStateEventMode.\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions \nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 2.3.5. State: Event Mode\n\nSee also fmi3EnterStepMode.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 2.3.5. State: Event Mode\n\nThis function must be called to change from Event Mode into Step Mode in Co-Simulation (see 4.2.).\n\n\n\n\n\nfmi3EnterStepMode(fmu::FMU3)\n\nWrapper for fmi3EnterStepMode(c::FMU3Instance) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_CS_functions/#FMICore.fmi3DoStep!","page":"FMI for Co-Simulation","title":"FMICore.fmi3DoStep!","text":"fmi3DoStep!(c::FMU3Instance, currentCommunicationPoint::fmi3Float64, communicationStepSize::fmi3Float64, noSetFMUStatePriorToCurrentPoint::fmi3Boolean,\n                eventEncountered::Ref{fmi3Boolean}, terminateSimulation::Ref{fmi3Boolean}, earlyReturn::Ref{fmi3Boolean}, lastSuccessfulTime::Ref{fmi3Float64})\n\nThe computation of a time step is started.\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\ncurrentCommunicationPoint::fmi3Float64:  \ncommunicationStepSize::fmi3Float64: \nnoSetFMUStatePriorToCurrentPoint::fmi3Boolean: \neventEncountered::Ref{fmi3Boolean}: \nterminateSimulation::Ref{fmi3Boolean}: \nearlyReturn::Ref{fmi3Boolean}: \nlastSuccessfulTime::Ref{fmi3Float64}: \n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 4.2.1. State: Step Mode\n\nSee also fmi3DoStep!.\n\n\n\n\n\nfmi3DoStep!(c::FMU3Instance, currentCommunicationPoint::Union{Real, Nothing} = nothing, communicationStepSize::Union{Real, Nothing} = nothing, noSetFMUStatePriorToCurrentPoint::Bool = true,\n    eventEncountered::fmi3Boolean = fmi3False, terminateSimulation::fmi3Boolean = fmi3False, earlyReturn::fmi3Boolean = fmi3False, lastSuccessfulTime::fmi3Float64 = 0.0)\n\nThe computation of a time step is started.\n\nTODO argmuents\n\nArguments\n\nc::FMU3Instance: Mutable struct represents an instantiated instance of an FMU in the FMI 3.0 Standard.\ncurrentCommunicationPoint::Union{Real, Nothing} = nothing\ncommunicationStepSize::Union{Real, Nothing} = nothing\nnoSetFMUStatePriorToCurrentPoint::Bool = true\neventEncountered::fmi3Boolean = fmi3False\nterminateSimulation::fmi3Boolean = fmi3False\nearlyReturn::fmi3Boolean = fmi3False\nlastSuccessfulTime::fmi3Float64 = 0.0\n\nReturns\n\nstatus::fmi3Status: Return status is an enumeration of type fmi3Status and indicates the success of the function call.\n\nMore detailed:\n\nfmi3OK: all well\nfmi3Warning: things are not quite right, but the computation can continue\nfmi3Discard: if the slave computed successfully only a subinterval of the communication step\nfmi3Error: the communication step could not be carried out at all\nfmi3Fatal: if an error occurred which corrupted the FMU irreparably\n\nSource\n\nFMISpec3.0 Link: https://fmi-standard.org/\nFMISpec3.0: 2.2.3 Platform Dependent Definitions\nFMISpec3.0: 2.2.4 Status Returned by Functions\nFMISpec3.0: 4.2.1. State: Step Mode\n\nSee also fmi3DoStep!.\n\n\n\n\n\nSource: FMISpec3.0, Version D5ef1c1: 4.2.1. State: Step Mode\n\nThe computation of a time step is started.\n\n\n\n\n\nfmi3DoStep!(fmu::FMU3, args...; kwargs...)\n\nWrapper for fmi3DoStep!(c::FMU3Instance, args...; kwargs...) without a provided FMU3Instance. (Instance c gets selected from fmu)\n\n\n\n\n\n","category":"function"},{"location":"fmi3_lowlevel_CS_functions/#Retrieving-Status-Information-from-the-Slave","page":"FMI for Co-Simulation","title":"Retrieving Status Information from the Slave","text":"","category":"section"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"Status information is retrieved from the slave by the following functions:","category":"page"},{"location":"fmi3_lowlevel_CS_functions/","page":"FMI for Co-Simulation","title":"FMI for Co-Simulation","text":"","category":"page"},{"location":"fmi_lowlevel_library_functions/#Functions-in-FMI-Import/Core-.jl","page":"Functions in FMI Import/Core .jl","title":"Functions in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi_lowlevel_library_functions/","page":"Functions in FMI Import/Core .jl","title":"Functions in FMI Import/Core .jl","text":"logInfo\nlogWarning\nlogError\nloadBinary\neval!","category":"page"},{"location":"fmi_lowlevel_library_functions/#FMICore.logInfo","page":"Functions in FMI Import/Core .jl","title":"FMICore.logInfo","text":"Prints a message with level info if the log level allows it.\n\n\n\n\n\n","category":"function"},{"location":"fmi_lowlevel_library_functions/#FMICore.logWarning","page":"Functions in FMI Import/Core .jl","title":"FMICore.logWarning","text":"Prints a message with level warn if the log level allows it.\n\n\n\n\n\n","category":"function"},{"location":"fmi_lowlevel_library_functions/#FMICore.logError","page":"Functions in FMI Import/Core .jl","title":"FMICore.logError","text":"Prints a message with level error if the log level allows it.\n\n\n\n\n\n","category":"function"},{"location":"fmi_lowlevel_library_functions/#FMIImport.loadBinary","page":"Functions in FMI Import/Core .jl","title":"FMIImport.loadBinary","text":"loadBinary(fmu::FMU2)\n\nload pointers to fmus c functions from shared library handle (provided byfmu.libHandle`)\n\n\n\n\n\nloadBinary(fmu::FMU3)\n\nload pointers to fmus c functions from shared library handle (provided byfmu.libHandle`)\n\n\n\n\n\n","category":"function"},{"location":"fmi_lowlevel_library_functions/#FMICore.eval!","page":"Functions in FMI Import/Core .jl","title":"FMICore.eval!","text":"ToDo: Doc String\n\n\n\n\n\n","category":"function"},{"location":"index_library/#All-library-elements-of-FMI,-Import,-Export,-Core-and-Build","page":"API Index","title":"All library elements of FMI, Import, Export, Core and Build","text":"","category":"section"},{"location":"index_library/","page":"API Index","title":"API Index","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: FMI.jl Logo)","category":"page"},{"location":"#FMI.jl","page":"Introduction","title":"FMI.jl","text":"","category":"section"},{"location":"#What-is-FMI.jl?","page":"Introduction","title":"What is FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FMI.jl is a free-to-use software library for the Julia programming language which integrates the Functional Mock-Up Interface (fmi-standard.org): load or create, parameterize, differentiate, simulate and plot FMUs seamlessly inside the Julia programming language!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Dev Docs)  (Image: Test (latest)) (Image: Test (LTS)) (Image: FMI2 Cross Checks (latest)) (Image: Examples (latest)) (Image: Build Docs) (Image: Run PkgEval) (Image: Coverage) (Image: ColPrac: Contributor's Guide on Collaborative Practices for Community Packages) (Image: FMI Downloads)","category":"page"},{"location":"#How-can-I-use-FMI.jl?","page":"Introduction","title":"How can I use FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"1. Open a Julia-REPL, switch to package mode using ], activate your preferred environment.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"2. Install FMI.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(@v1) pkg> add FMI","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"3. If you want to check that everything works correctly, you can run the tests bundled with FMI.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(@v1) pkg> test FMI","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"4. Have a look inside the examples folder in the examples branch or the examples section of the documentation. All examples are available as Julia-Script (.jl), Jupyter-Notebook (.ipynb) and Markdown (.md).","category":"page"},{"location":"#How-can-I-simulate-a-FMU-and-plot-values?","page":"Introduction","title":"How can I simulate a FMU and plot values?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using FMI, Plots\n\n# load and instantiate a FMU\nfmu = fmiLoad(pathToFMU) \n\n# simulate from t=0.0s until t=10.0s and record the FMU variable named \"mass.s\"\nsimData = fmiSimulate(fmu, (0.0, 10.0); recordValues=[\"mass.s\"])\n\n# plot it!\nplot(simData)\n\n# free memory\nfmiUnload(myFMU)","category":"page"},{"location":"#What-is-currently-supported-in-FMI.jl?","page":"Introduction","title":"What is currently supported in FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"importing the full FMI 2.0.3 and FMI 3.0.0 command set, including optional specials like fmi2GetState, fmi2SetState and fmi2GetDirectionalDerivatives\nparameterization, simulation & plotting of CS- and ME-FMUs\nevent-handling for imported discontinuous ME-FMUs","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":" FMI2.0.3  FMI3.0  SSP1.0 \n Import Export Import Export Import Export\nCS ✔️✔️ 🚧 ✔️ 📅 📅 📅\nME (continuous) ✔️✔️ ✔️✔️ 🚧 📅 📅 📅\nME (discontinuous) ✔️✔️ ✔️✔️ 🚧 📅 📅 📅\nSE 🚫 🚫 🚧 📅 🚫 🚫\nExplicit solvers ✔️✔️ ✔️✔️ ✔️ 📅 📅 📅\nImplicit solvers (autodiff=false) ✔️✔️ 🚧 ✔️ 📅 📅 📅\nImplicit solvers (autodiff=true) ✔️✔️ 🚧 🚧 📅 📅 📅\nget/setState ✔️✔️ 📅 ✔️ 📅 🚫 🚫\ngetDirectionalDerivatives ✔️✔️ 📅 ✔️ 📅 🚫 🚫\ngetAdjointDerivatives 🚫 🚫 ✔️ 📅 🚫 🚫\nFMI Cross Checks ✔️✔️ 📅 📅 📅 🚫 🚫","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"✔️✔️ supported & tested","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"✔️  beta supported (implemented), but untested","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"🚧 work in progress","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"📅  planned","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"🚫  not supported by the corresponding FMI standard (not applicable)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"❌  not planned","category":"page"},{"location":"#What-FMI.jl-Library-to-use?","page":"Introduction","title":"What FMI.jl-Library to use?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: FMI.jl Logo) To keep dependencies nice and clean, the original package FMI.jl had been split into new packages:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"FMI.jl: High level loading, manipulating, saving or building entire FMUs from scratch\nFMIImport.jl: Importing FMUs into Julia\nFMIExport.jl: Exporting stand-alone FMUs from Julia Code\nFMICore.jl: C-code wrapper for the FMI-standard\nFMISensitivity.jl: Static and dynamic sensitivities over FMUs\nFMIBuild.jl: Compiler/Compilation dependencies for FMIExport.jl\nFMIFlux.jl: Machine Learning with FMUs\nFMIZoo.jl: A collection of testing and example FMUs","category":"page"},{"location":"#What-Platforms-are-supported?","page":"Introduction","title":"What Platforms are supported?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FMI.jl is tested (and testing) under Julia Versions 1.6 LTS (64-bit) and latest (64-bit) on Windows latest (64-bit) and Ubuntu latest (64-bit). Mac and Julia (32-bit) should work, but untested. For the best performance, we recommend using Julia >= 1.7.","category":"page"},{"location":"#How-to-cite?","page":"Introduction","title":"How to cite?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Tobias Thummerer, Lars Mikelsons and Josef Kircher. 2021. NeuralFMU: towards structural integration of FMUs into neural networks. Martin Sjölund, Lena Buffoni, Adrian Pop and Lennart Ochel (Ed.). Proceedings of 14th Modelica Conference 2021, Linköping, Sweden, September 20-24, 2021. Linköping University Electronic Press, Linköping (Linköping Electronic Conference Proceedings ; 181), 297-306. DOI: 10.3384/ecp21181297","category":"page"},{"location":"#Related-publications?","page":"Introduction","title":"Related publications?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Tobias Thummerer, Johannes Stoljar and Lars Mikelsons. 2022. NeuralFMU: presenting a workflow for integrating hybrid NeuralODEs into real-world applications. Electronics 11, 19, 3202. DOI: 10.3390/electronics11193202","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Tobias Thummerer, Johannes Tintenherr, Lars Mikelsons. 2021 Hybrid modeling of the human cardiovascular system using NeuralFMUs Journal of Physics: Conference Series 2090, 1, 012155. DOI: 10.1088/1742-6596/2090/1/012155","category":"page"},{"location":"#Notes-for-contributors","page":"Introduction","title":"Notes for contributors","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Contributors are welcome. Before contributing, please read, understand and follow the Contributor's Guide on Collaborative Practices for Community Packages.  During development of new implementations or optimizations on exisitng code, one will have to make design decissions that influence the library performance and usability. The following priorization should be the basis for decision-making:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"#1 Compliance with standard: It is the highest priority to be compliant with the FMI standard (fmi-standard.org). Identifiers described in the standard must be used. Topologies should follow the specification as far as the possibilities of the Julia programming language allows.\n#2 Performance: Because FMI.jl is a simulation tool, performance is very important. This applies to the efficient use of CPU and GPU, but also the conscientious use of RAM and disc space.\n#3 Usability: The library should be as usable as possible, as long as being fully compliant with the FMI standard.","category":"page"},{"location":"#Interested-in-Hybrid-Modelling-in-Julia-using-FMUs?","page":"Introduction","title":"Interested in Hybrid Modelling in Julia using FMUs?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"See FMIFlux.jl.","category":"page"},{"location":"fmi_lowlevel_library_types/#Types-in-FMI-Import/Core-.jl","page":"Types in FMI Import/Core .jl","title":"Types in FMI Import/Core .jl","text":"","category":"section"},{"location":"fmi_lowlevel_library_types/","page":"Types in FMI Import/Core .jl","title":"Types in FMI Import/Core .jl","text":"FMU\nFMUSolution\nFMUEvent\nFMUExecutionConfiguration\nFMULogLevel","category":"page"},{"location":"fmi_lowlevel_library_types/#FMICore.FMU","page":"Types in FMI Import/Core .jl","title":"FMICore.FMU","text":"FMU\n\nThe abstract type for FMUs (FMI 2 & 3).\n\n\n\n\n\n","category":"type"},{"location":"fmi_lowlevel_library_types/#FMICore.FMUSolution","page":"Types in FMI Import/Core .jl","title":"FMICore.FMUSolution","text":"FMUSolution\n\nThe abstract type for a solution generated by simulating an FMU (FMI 2 & 3).\n\n\n\n\n\n","category":"type"},{"location":"fmi_lowlevel_library_types/#FMICore.FMUEvent","page":"Types in FMI Import/Core .jl","title":"FMICore.FMUEvent","text":"FMUEvent\n\nThe abstract type for an event triggered by a FMU (FMI 2 & 3).\n\n\n\n\n\n","category":"type"},{"location":"fmi_lowlevel_library_types/#FMICore.FMUExecutionConfiguration","page":"Types in FMI Import/Core .jl","title":"FMICore.FMUExecutionConfiguration","text":"FMUExecutionConfiguration\n\nThe abstract type for the configuration used to simulate (execute) an FMU (FMI 2 & 3).\n\n\n\n\n\n","category":"type"},{"location":"fmi_lowlevel_library_types/#FMICore.FMULogLevel","page":"Types in FMI Import/Core .jl","title":"FMICore.FMULogLevel","text":"Log levels for non-standard printing of infos, warnings and errors.\n\n\n\n\n\n","category":"type"},{"location":"examples/modelica_conference_2021/#Example-from-the-Modelica-Conference-2021","page":"Modelica conference 2021","title":"Example from the Modelica Conference 2021","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"Tutorial by Tobias Thummerer, Johannes Stoljar","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"This example was updated over time to keep track with developments and changes in FMI.jl.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"🚧 This tutorial is under revision and will be replaced by an up-to-date version soon 🚧","category":"page"},{"location":"examples/modelica_conference_2021/#License","page":"Modelica conference 2021","title":"License","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher, Johannes Stoljar\n# Licensed under the MIT license. \n# See LICENSE (https://github.com/thummeto/FMI.jl/blob/main/LICENSE) file in the project root for details.","category":"page"},{"location":"examples/modelica_conference_2021/#Introduction-to-the-example","page":"Modelica conference 2021","title":"Introduction to the example","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"FMUs can be simulated in multiple ways using FMI.jl. You can use a very simple interface, that offers possibilities that satisfy almost any user requirement. However, if you need to build a custom simulation loop for your use case using the core FMI functions, we show that too.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"(Image: svg)  ","category":"page"},{"location":"examples/modelica_conference_2021/#Other-formats","page":"Modelica conference 2021","title":"Other formats","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"Besides, this Jupyter Notebook there is also a Julia file with the same name, which contains only the code cells and for the documentation there is a Markdown file corresponding to the notebook.  ","category":"page"},{"location":"examples/modelica_conference_2021/#Code-section","page":"Modelica conference 2021","title":"Code section","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"To run the example, the previously installed packages must be included. ","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"# imports\nusing FMI\nusing FMIZoo\nusing Plots","category":"page"},{"location":"examples/modelica_conference_2021/#Simulation-setup","page":"Modelica conference 2021","title":"Simulation setup","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"Next, the start time and end time of the simulation are set. Finally, a step size is specified to store the results of the simulation at these time steps.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"tStart = 0.0\ntStep = 0.1\ntStop = 8.0\ntSave = tStart:tStep:tStop","category":"page"},{"location":"examples/modelica_conference_2021/#Simple-FMU-Simulation","page":"Modelica conference 2021","title":"Simple FMU Simulation","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"Next, the FMU model from FMIZoo.jl is loaded and the information about the FMU is shown.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"# we use an FMU from the FMIZoo.jl\nfmu = fmiLoad(\"SpringFrictionPendulum1D\", \"Dymola\", \"2022x\")\nfmiInfo(fmu)","category":"page"},{"location":"examples/modelica_conference_2021/#Easy-Simulation","page":"Modelica conference 2021","title":"Easy Simulation","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"In the next commands the FMU is simulated, for which the start and end time and recorded variables are declared. Afterwards the simulation result is plotted. In the plot for the FMU, it can be seen that the oscillation keeps decreasing due to the effect of friction. If one simulates long enough, the oscillation comes to a standstill after a certain time.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"simData = fmiSimulate(fmu, (tStart, tStop); recordValues=[\"mass.s\"], saveat=tSave)\nplot(simData)","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"After plotting the data, the FMU is unloaded and all unpacked data on disc is removed.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"fmiUnload(fmu)","category":"page"},{"location":"examples/modelica_conference_2021/#Custom-Simulation","page":"Modelica conference 2021","title":"Custom Simulation","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"In the following type of simulation a more advanced variant is presented, which allows intervening more in the simulation process. Analogous to the simple variant, an FMU model must be loaded.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"fmu = fmiLoad(pathToFMU)","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"Next, it is necessary to create an instance of the FMU, this is achieved by the command fmi2Instantiate!().  ","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"instanceFMU = fmi2Instantiate!(fmu)","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"In the following code block, start and end time for the simulation is set by the fmi2SetupExperiment() command. Next, the FMU is initialized by the calls of fmi2EnterInitializationMode() and fmi2ExitInitializationMode(). It would also be possible to set initial states, parameters or inputs at this place in code.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"fmi2SetupExperiment(instanceFMU, tStart, tStop)\n# set initial model states\nfmi2EnterInitializationMode(instanceFMU)\n# get initial model states\nfmi2ExitInitializationMode(instanceFMU)","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"The actual simulation loop is shown in the following block. Here a simulation step fmi2DoStep() with the fixed step size tStep is executed. As indicated in the code by the comments, the input values and output values of the FMU could be changed in the simulation loop as desired, whereby the higher possibility of adjustments arises.","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"values = []\n\nfor t in tSave\n    # set model inputs if any\n    # ...\n\n    fmi2DoStep(instanceFMU, tStep)\n    \n    # get model outputs\n    value = fmi2GetReal(instanceFMU, \"mass.s\")\n    push!(values, value)\nend\n\nplot(tSave, values)","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"The instantiated FMU must be terminated and then the memory area for the instance can also be deallocated. The last step is to unload the FMU to remove all unpacked data on disc. ","category":"page"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"fmi2Terminate(instanceFMU)\nfmi2FreeInstance!(instanceFMU)\nfmi2Unload(fmu)","category":"page"},{"location":"examples/modelica_conference_2021/#Summary","page":"Modelica conference 2021","title":"Summary","text":"","category":"section"},{"location":"examples/modelica_conference_2021/","page":"Modelica conference 2021","title":"Modelica conference 2021","text":"The tutorial has shown how to use the default simulation command and how to deploy a custom simulation loop.","category":"page"}]
}
