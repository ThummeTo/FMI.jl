name: Examples

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: 
      - main
    paths:
      - 'src/**'
      - 'examples/**'
      - '.github/workflows/Example.yml'
      - 'Project.toml'
  
jobs:
  jupyter:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest] # ubuntu-latest
        file-name: [inputs, manipulation, modelica_conference_2021, multiple_instances, multiprocessing, multithreading, parameterize, simulate, parameter_optimization]
        julia-version: ['1.10']
        julia-arch: [x64]
        experimental: [false]

    steps:
      - name: "Check out repository"
        uses: actions/checkout@v4

      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v2
        with:
            version: ${{ matrix.julia-version }}
            arch: ${{ matrix.julia-arch }}

      - name: "Install dependencies"
        run: julia --project=examples/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'

      - name: "Install packages"
        run: pip install jupyter nbconvert
                        
      - name: "Execute and synchronize all files"
        env:
          FILE: examples/src/${{ matrix.file-name }}.ipynb
        run: |
          jupyter nbconvert --ExecutePreprocessor.kernel_name="julia-${{ matrix.julia-version }}" --to notebook --inplace --execute ${{ env.FILE }}
          jupyter nbconvert --to script ${{ env.FILE }}
          jupyter nbconvert --to markdown ${{ env.FILE }}

      - name: "run generated jl script to determine success of example building"
        run: julia --project=examples/ examples/src/${{ matrix.file-name }}.jl

      - name: "auto-commit (retry on merge)"
        if: success() && github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: nick-fields/retry@v3
        env: 
          CI_COMMIT_MESSAGE: example-${{ matrix.os }}-${{ matrix.file-name }}-${{ matrix.julia-version }}-${{ matrix.julia-arch }}-${{ matrix.experimental }}[${{ github.ref }}]
          CI_COMMIT_AUTHOR: github-actions[bot]
          EXAMPLES_PATH: examples
        # Fetch all and clear the stash list. Include all files from the examples folder to the stash and switch the branch.
        # Reset the branch and remove all current files in the examples folder. 
        # Checkout the last stash to restore the new notebooks and apply the stash index to restore all other new files in the folder.
        with:
          timeout_minutes: 999
          max_attempts: 10
          warning_on_retry: false
          shell: bash
          command: |
            git fetch --all
            git stash clear
            git stash --include-untracked -- ${{ env.EXAMPLES_PATH }}
            git switch examples
            git reset --hard origin/examples
            git checkout stash -f -- ${{ env.EXAMPLES_PATH }}
            git stash apply --index
            git stash drop
            git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
            git config --global user.email "${{ env.CI_COMMIT_AUTHOR }}@users.noreply.github.com"
            git config --global core.autocrlf false
            git add ${{ env.EXAMPLES_PATH }}
            git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
            git push origin examples || (git reset --soft HEAD~1 && (exit 1))

  pluto:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v3

      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v1
        with:
            version: '1.10'

      - run: julia -e 'using Pkg; Pkg.add("PlutoSliderServer"); Pkg.add("FMI")'
      - run: julia -e 'using PlutoSliderServer; PlutoSliderServer.export_directory("examples/pluto-src")'

      - name: "auto-commit (retry on merge)"
        if: success() && github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: nick-fields/retry@v3
        env: 
          CI_COMMIT_MESSAGE: examples-pluto[${{ github.ref }}]
          CI_COMMIT_AUTHOR: github-actions[bot]
          EXAMPLES_PATH: examples
        # Fetch all and clear the stash list. Include all files from the examples folder to the stash and switch the branch.
        # Reset the branch and remove all current files in the examples folder. 
        # Checkout the last stash to restore the new notebooks and apply the stash index to restore all other new files in the folder.
        with:
          timeout_minutes: 999
          max_attempts: 10
          warning_on_retry: false
          shell: bash
          command: |
            git fetch --all
            git stash clear
            git stash --include-untracked -- ${{ env.EXAMPLES_PATH }}
            git switch examples
            git reset --hard origin/examples
            git checkout stash -f -- ${{ env.EXAMPLES_PATH }}
            git stash apply --index
            git stash drop
            git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
            git config --global user.email "${{ env.CI_COMMIT_AUTHOR }}@users.noreply.github.com"
            git config --global core.autocrlf false
            git pull
            git add ${{ env.EXAMPLES_PATH }}
            git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
            git push origin examples || (git reset --soft HEAD~1 && (exit 1))          
  
  call-docu:
    needs: [jupyter, pluto]
    if: github.event_name != 'pull_request' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      # Trigger an repoisitory dispath event
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: trigger-docu
